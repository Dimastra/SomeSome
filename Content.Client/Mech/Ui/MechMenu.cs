using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.UserInterface.Controls;
using Content.Client.UserInterface.Fragments;
using Content.Shared.FixedPoint;
using Content.Shared.Mech.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;

namespace Content.Client.Mech.Ui
{
	// Token: 0x02000240 RID: 576
	[GenerateTypedNameReferences]
	public sealed class MechMenu : FancyWindow
	{
		// Token: 0x14000052 RID: 82
		// (add) Token: 0x06000E9F RID: 3743 RVA: 0x00058338 File Offset: 0x00056538
		// (remove) Token: 0x06000EA0 RID: 3744 RVA: 0x00058370 File Offset: 0x00056570
		[Nullable(2)]
		[method: NullableContext(2)]
		[Nullable(2)]
		public event Action<EntityUid> OnRemoveButtonPressed;

		// Token: 0x06000EA1 RID: 3745 RVA: 0x000583A8 File Offset: 0x000565A8
		public MechMenu(EntityUid mech)
		{
			MechMenu.!XamlIlPopulateTrampoline(this);
			IoCManager.InjectDependencies<MechMenu>(this);
			this._mech = mech;
			SpriteComponent sprite;
			if (!this._ent.TryGetComponent<SpriteComponent>(mech, ref sprite))
			{
				return;
			}
			this.MechView.Sprite = sprite;
		}

		// Token: 0x06000EA2 RID: 3746 RVA: 0x000583EC File Offset: 0x000565EC
		public void UpdateMechStats()
		{
			SharedMechComponent sharedMechComponent;
			if (!this._ent.TryGetComponent<SharedMechComponent>(this._mech, ref sharedMechComponent))
			{
				return;
			}
			FixedPoint2 a = sharedMechComponent.Integrity / sharedMechComponent.MaxIntegrity;
			this.IntegrityDisplayBar.Value = a.Float();
			this.IntegrityDisplay.Text = Loc.GetString("mech-integrity-display", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("amount", (a * 100).Int())
			});
			FixedPoint2 a2 = sharedMechComponent.Energy / sharedMechComponent.MaxEnergy;
			this.EnergyDisplayBar.Value = a2.Float();
			this.EnergyDisplay.Text = Loc.GetString("mech-energy-display", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("amount", (a2 * 100).Int())
			});
			this.SlotDisplay.Text = Loc.GetString("mech-slot-display", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("amount", sharedMechComponent.MaxEquipmentAmount - sharedMechComponent.EquipmentContainer.ContainedEntities.Count)
			});
		}

		// Token: 0x06000EA3 RID: 3747 RVA: 0x00058524 File Offset: 0x00056724
		public void UpdateEquipmentView()
		{
			MechComponent mechComponent;
			if (!this._ent.TryGetComponent<MechComponent>(this._mech, ref mechComponent))
			{
				return;
			}
			this.EquipmentControlContainer.Children.Clear();
			using (IEnumerator<EntityUid> enumerator = mechComponent.EquipmentContainer.ContainedEntities.GetEnumerator())
			{
				while (enumerator.MoveNext())
				{
					EntityUid ent = enumerator.Current;
					SpriteComponent sprite;
					MetaDataComponent metaDataComponent;
					if (this._ent.TryGetComponent<SpriteComponent>(ent, ref sprite) && this._ent.TryGetComponent<MetaDataComponent>(ent, ref metaDataComponent))
					{
						UIFragmentComponent componentOrNull = EntityManagerExt.GetComponentOrNull<UIFragmentComponent>(this._ent, ent);
						Control control;
						if (componentOrNull == null)
						{
							control = null;
						}
						else
						{
							UIFragment ui = componentOrNull.Ui;
							control = ((ui != null) ? ui.GetUIFragmentRoot() : null);
						}
						Control fragment = control;
						MechEquipmentControl mechEquipmentControl = new MechEquipmentControl(metaDataComponent.EntityName, sprite, fragment);
						mechEquipmentControl.OnRemoveButtonPressed += delegate()
						{
							Action<EntityUid> onRemoveButtonPressed = this.OnRemoveButtonPressed;
							if (onRemoveButtonPressed == null)
							{
								return;
							}
							onRemoveButtonPressed(ent);
						};
						this.EquipmentControlContainer.AddChild(mechEquipmentControl);
					}
				}
			}
		}

		// Token: 0x1700031A RID: 794
		// (get) Token: 0x06000EA4 RID: 3748 RVA: 0x00058634 File Offset: 0x00056834
		private ProgressBar IntegrityDisplayBar
		{
			get
			{
				return base.FindControl<ProgressBar>("IntegrityDisplayBar");
			}
		}

		// Token: 0x1700031B RID: 795
		// (get) Token: 0x06000EA5 RID: 3749 RVA: 0x00058641 File Offset: 0x00056841
		private Label IntegrityDisplay
		{
			get
			{
				return base.FindControl<Label>("IntegrityDisplay");
			}
		}

		// Token: 0x1700031C RID: 796
		// (get) Token: 0x06000EA6 RID: 3750 RVA: 0x0005864E File Offset: 0x0005684E
		private ProgressBar EnergyDisplayBar
		{
			get
			{
				return base.FindControl<ProgressBar>("EnergyDisplayBar");
			}
		}

		// Token: 0x1700031D RID: 797
		// (get) Token: 0x06000EA7 RID: 3751 RVA: 0x0005865B File Offset: 0x0005685B
		private Label EnergyDisplay
		{
			get
			{
				return base.FindControl<Label>("EnergyDisplay");
			}
		}

		// Token: 0x1700031E RID: 798
		// (get) Token: 0x06000EA8 RID: 3752 RVA: 0x00058668 File Offset: 0x00056868
		public Label SlotDisplay
		{
			get
			{
				return base.FindControl<Label>("SlotDisplay");
			}
		}

		// Token: 0x1700031F RID: 799
		// (get) Token: 0x06000EA9 RID: 3753 RVA: 0x00058675 File Offset: 0x00056875
		private SpriteView MechView
		{
			get
			{
				return base.FindControl<SpriteView>("MechView");
			}
		}

		// Token: 0x17000320 RID: 800
		// (get) Token: 0x06000EAA RID: 3754 RVA: 0x00058682 File Offset: 0x00056882
		private BoxContainer EquipmentControlContainer
		{
			get
			{
				return base.FindControl<BoxContainer>("EquipmentControlContainer");
			}
		}

		// Token: 0x06000EAB RID: 3755 RVA: 0x00058690 File Offset: 0x00056890
		static void xaml(IServiceProvider A_0, FancyWindow A_1)
		{
			XamlIlContext.Context<FancyWindow> context = new XamlIlContext.Context<FancyWindow>(A_0, null, "resm:Content.Client.Mech.Ui.MechMenu.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Title = (string)new LocExtension("mech-menu-title").ProvideValue();
			A_1.MinSize = new Vector2(350f, 440f);
			A_1.SetSize = new Vector2(350f, 440f);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			boxContainer.HorizontalExpand = true;
			boxContainer.VerticalExpand = true;
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Margin = new Thickness(10f, 10f, 10f, 10f);
			boxContainer2.Orientation = 0;
			boxContainer2.HorizontalExpand = true;
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 1;
			boxContainer3.HorizontalExpand = true;
			BoxContainer boxContainer4 = new BoxContainer();
			boxContainer4.Orientation = 0;
			boxContainer4.HorizontalExpand = true;
			ProgressBar progressBar = new ProgressBar();
			progressBar.Name = "IntegrityDisplayBar";
			Control control = progressBar;
			context.RobustNameScope.Register("IntegrityDisplayBar", control);
			progressBar.HorizontalExpand = true;
			progressBar.SetHeight = 25f;
			progressBar.MaxValue = 1f;
			progressBar.Value = 0f;
			Label label = new Label();
			label.Name = "IntegrityDisplay";
			control = label;
			context.RobustNameScope.Register("IntegrityDisplay", control);
			label.HorizontalAlignment = 1;
			label.Margin = new Thickness(5f, 0f, 0f, 0f);
			label.VerticalAlignment = 2;
			control = label;
			progressBar.XamlChildren.Add(control);
			control = progressBar;
			boxContainer4.XamlChildren.Add(control);
			control = boxContainer4;
			boxContainer3.XamlChildren.Add(control);
			BoxContainer boxContainer5 = new BoxContainer();
			boxContainer5.Orientation = 0;
			boxContainer5.HorizontalExpand = true;
			boxContainer5.Margin = new Thickness(0f, 5f, 0f, 0f);
			ProgressBar progressBar2 = new ProgressBar();
			progressBar2.Name = "EnergyDisplayBar";
			control = progressBar2;
			context.RobustNameScope.Register("EnergyDisplayBar", control);
			progressBar2.HorizontalExpand = true;
			progressBar2.SetHeight = 25f;
			progressBar2.MaxValue = 1f;
			progressBar2.Value = 0f;
			Label label2 = new Label();
			label2.Name = "EnergyDisplay";
			control = label2;
			context.RobustNameScope.Register("EnergyDisplay", control);
			label2.Margin = new Thickness(5f, 0f, 0f, 0f);
			label2.HorizontalAlignment = 1;
			label2.VerticalAlignment = 2;
			control = label2;
			progressBar2.XamlChildren.Add(control);
			control = progressBar2;
			boxContainer5.XamlChildren.Add(control);
			control = boxContainer5;
			boxContainer3.XamlChildren.Add(control);
			Label label3 = new Label();
			label3.Name = "SlotDisplay";
			control = label3;
			context.RobustNameScope.Register("SlotDisplay", control);
			label3.HorizontalAlignment = 1;
			label3.Access = new AccessLevel?(0);
			label3.HorizontalExpand = true;
			control = label3;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer2.XamlChildren.Add(control);
			SpriteView spriteView = new SpriteView();
			spriteView.Name = "MechView";
			control = spriteView;
			context.RobustNameScope.Register("MechView", control);
			spriteView.Margin = new Thickness(10f, 0f, 0f, 0f);
			spriteView.VerticalAlignment = 2;
			spriteView.HorizontalAlignment = 3;
			spriteView.OverrideDirection = new Direction?(0);
			spriteView.SetSize = new Vector2(64f, 64f);
			spriteView.MaxSize = new Vector2(64f, 64f);
			spriteView.Scale = new Vector2(2f, 2f);
			control = spriteView;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer6 = new BoxContainer();
			boxContainer6.VerticalExpand = true;
			boxContainer6.Margin = new Thickness(10f, 0f, 10f, 10f);
			boxContainer6.Orientation = 1;
			PanelContainer panelContainer = new PanelContainer();
			panelContainer.VerticalExpand = true;
			panelContainer.MinSize = new Vector2(0f, 200f);
			panelContainer.PanelOverride = new StyleBoxFlat
			{
				BackgroundColor = Color.FromXaml("#1b1b1b")
			};
			ScrollContainer scrollContainer = new ScrollContainer();
			scrollContainer.HScrollEnabled = false;
			scrollContainer.HorizontalExpand = true;
			scrollContainer.MinSize = new Vector2(100f, 256f);
			scrollContainer.SizeFlagsStretchRatio = 2f;
			scrollContainer.VerticalExpand = true;
			BoxContainer boxContainer7 = new BoxContainer();
			boxContainer7.Name = "EquipmentControlContainer";
			control = boxContainer7;
			context.RobustNameScope.Register("EquipmentControlContainer", control);
			boxContainer7.MinSize = new Vector2(100f, 256f);
			boxContainer7.Orientation = 1;
			boxContainer7.SizeFlagsStretchRatio = 2f;
			boxContainer7.VerticalExpand = true;
			control = boxContainer7;
			scrollContainer.XamlChildren.Add(control);
			control = scrollContainer;
			panelContainer.XamlChildren.Add(control);
			control = panelContainer;
			boxContainer6.XamlChildren.Add(control);
			control = boxContainer6;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06000EAC RID: 3756 RVA: 0x00058CD1 File Offset: 0x00056ED1
		private static void !XamlIlPopulateTrampoline(MechMenu A_0)
		{
			MechMenu.Populate:Content.Client.Mech.Ui.MechMenu.xaml(null, A_0);
		}

		// Token: 0x04000741 RID: 1857
		[Nullable(1)]
		[Dependency]
		private readonly IEntityManager _ent;

		// Token: 0x04000742 RID: 1858
		private readonly EntityUid _mech;
	}
}
