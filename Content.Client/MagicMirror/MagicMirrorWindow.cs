using System;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.Humanoid;
using Content.Shared.Humanoid.Markings;
using Content.Shared.MagicMirror;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.Localization;
using Robust.Shared.Maths;

namespace Content.Client.MagicMirror
{
	// Token: 0x02000252 RID: 594
	[GenerateTypedNameReferences]
	public sealed class MagicMirrorWindow : DefaultWindow
	{
		// Token: 0x06000F08 RID: 3848 RVA: 0x0005A66C File Offset: 0x0005886C
		public MagicMirrorWindow()
		{
			MagicMirrorWindow.!XamlIlPopulateTrampoline(this);
			SingleMarkingPicker hairPicker = this.HairPicker;
			hairPicker.OnMarkingSelect = (Action<ValueTuple<int, string>>)Delegate.Combine(hairPicker.OnMarkingSelect, new Action<ValueTuple<int, string>>(delegate([TupleElementNames(new string[]
			{
				"slot",
				"id"
			})] [Nullable(new byte[]
			{
				0,
				1
			})] ValueTuple<int, string> args)
			{
				this.OnHairSelected(args);
			}));
			SingleMarkingPicker hairPicker2 = this.HairPicker;
			hairPicker2.OnColorChanged = (Action<ValueTuple<int, Marking>>)Delegate.Combine(hairPicker2.OnColorChanged, new Action<ValueTuple<int, Marking>>(delegate([TupleElementNames(new string[]
			{
				"slot",
				"marking"
			})] [Nullable(new byte[]
			{
				0,
				1
			})] ValueTuple<int, Marking> args)
			{
				this.OnHairColorChanged(args);
			}));
			SingleMarkingPicker hairPicker3 = this.HairPicker;
			hairPicker3.OnSlotRemove = (Action<int>)Delegate.Combine(hairPicker3.OnSlotRemove, new Action<int>(delegate(int args)
			{
				this.OnHairSlotRemoved(args);
			}));
			SingleMarkingPicker hairPicker4 = this.HairPicker;
			hairPicker4.OnSlotAdd = (Action)Delegate.Combine(hairPicker4.OnSlotAdd, new Action(delegate()
			{
				this.OnHairSlotAdded();
			}));
			SingleMarkingPicker facialHairPicker = this.FacialHairPicker;
			facialHairPicker.OnMarkingSelect = (Action<ValueTuple<int, string>>)Delegate.Combine(facialHairPicker.OnMarkingSelect, new Action<ValueTuple<int, string>>(delegate([TupleElementNames(new string[]
			{
				"slot",
				"id"
			})] [Nullable(new byte[]
			{
				0,
				1
			})] ValueTuple<int, string> args)
			{
				this.OnFacialHairSelected(args);
			}));
			SingleMarkingPicker facialHairPicker2 = this.FacialHairPicker;
			facialHairPicker2.OnColorChanged = (Action<ValueTuple<int, Marking>>)Delegate.Combine(facialHairPicker2.OnColorChanged, new Action<ValueTuple<int, Marking>>(delegate([TupleElementNames(new string[]
			{
				"slot",
				"marking"
			})] [Nullable(new byte[]
			{
				0,
				1
			})] ValueTuple<int, Marking> args)
			{
				this.OnFacialHairColorChanged(args);
			}));
			SingleMarkingPicker facialHairPicker3 = this.FacialHairPicker;
			facialHairPicker3.OnSlotRemove = (Action<int>)Delegate.Combine(facialHairPicker3.OnSlotRemove, new Action<int>(delegate(int args)
			{
				this.OnFacialHairSlotRemoved(args);
			}));
			SingleMarkingPicker facialHairPicker4 = this.FacialHairPicker;
			facialHairPicker4.OnSlotAdd = (Action)Delegate.Combine(facialHairPicker4.OnSlotAdd, new Action(delegate()
			{
				this.OnFacialHairSlotAdded();
			}));
		}

		// Token: 0x06000F09 RID: 3849 RVA: 0x0005A7C0 File Offset: 0x000589C0
		[NullableContext(1)]
		public void UpdateState(MagicMirrorUiData state)
		{
			this.HairPicker.UpdateData(state.Hair, state.Species, state.HairSlotTotal);
			this.FacialHairPicker.UpdateData(state.FacialHair, state.Species, state.FacialHairSlotTotal);
			if (!this.HairPicker.Visible && !this.FacialHairPicker.Visible && !this._noHair)
			{
				base.AddChild(new Label
				{
					Text = Loc.GetString("magic-mirror-component-activate-user-has-no-hair")
				});
				this._noHair = true;
			}
		}

		// Token: 0x1700032D RID: 813
		// (get) Token: 0x06000F0A RID: 3850 RVA: 0x0005A84B File Offset: 0x00058A4B
		private SingleMarkingPicker HairPicker
		{
			get
			{
				return base.FindControl<SingleMarkingPicker>("HairPicker");
			}
		}

		// Token: 0x1700032E RID: 814
		// (get) Token: 0x06000F0B RID: 3851 RVA: 0x0005A858 File Offset: 0x00058A58
		private SingleMarkingPicker FacialHairPicker
		{
			get
			{
				return base.FindControl<SingleMarkingPicker>("FacialHairPicker");
			}
		}

		// Token: 0x06000F14 RID: 3860 RVA: 0x0005A8D4 File Offset: 0x00058AD4
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.MagicMirror.MagicMirrorWindow.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Title = (string)new LocExtension("magic-mirror-window-title").ProvideValue();
			A_1.MinSize = new Vector2(600f, 400f);
			BoxContainer boxContainer = new BoxContainer();
			SingleMarkingPicker singleMarkingPicker = new SingleMarkingPicker();
			singleMarkingPicker.Name = "HairPicker";
			Control control = singleMarkingPicker;
			context.RobustNameScope.Register("HairPicker", control);
			singleMarkingPicker.Category = MarkingCategories.Hair;
			control = singleMarkingPicker;
			boxContainer.XamlChildren.Add(control);
			SingleMarkingPicker singleMarkingPicker2 = new SingleMarkingPicker();
			singleMarkingPicker2.Name = "FacialHairPicker";
			control = singleMarkingPicker2;
			context.RobustNameScope.Register("FacialHairPicker", control);
			singleMarkingPicker2.Category = MarkingCategories.FacialHair;
			control = singleMarkingPicker2;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06000F15 RID: 3861 RVA: 0x0005AA29 File Offset: 0x00058C29
		private static void !XamlIlPopulateTrampoline(MagicMirrorWindow A_0)
		{
			MagicMirrorWindow.Populate:Content.Client.MagicMirror.MagicMirrorWindow.xaml(null, A_0);
		}

		// Token: 0x04000777 RID: 1911
		[TupleElementNames(new string[]
		{
			"slot",
			"id"
		})]
		[Nullable(new byte[]
		{
			2,
			0,
			1
		})]
		public Action<ValueTuple<int, string>> OnHairSelected;

		// Token: 0x04000778 RID: 1912
		[TupleElementNames(new string[]
		{
			"slot",
			"marking"
		})]
		[Nullable(new byte[]
		{
			2,
			0,
			1
		})]
		public Action<ValueTuple<int, Marking>> OnHairColorChanged;

		// Token: 0x04000779 RID: 1913
		[Nullable(2)]
		public Action<int> OnHairSlotRemoved;

		// Token: 0x0400077A RID: 1914
		[Nullable(2)]
		public Action OnHairSlotAdded;

		// Token: 0x0400077B RID: 1915
		[TupleElementNames(new string[]
		{
			"slot",
			"id"
		})]
		[Nullable(new byte[]
		{
			2,
			0,
			1
		})]
		public Action<ValueTuple<int, string>> OnFacialHairSelected;

		// Token: 0x0400077C RID: 1916
		[TupleElementNames(new string[]
		{
			"slot",
			"marking"
		})]
		[Nullable(new byte[]
		{
			2,
			0,
			1
		})]
		public Action<ValueTuple<int, Marking>> OnFacialHairColorChanged;

		// Token: 0x0400077D RID: 1917
		[Nullable(2)]
		public Action<int> OnFacialHairSlotRemoved;

		// Token: 0x0400077E RID: 1918
		[Nullable(2)]
		public Action OnFacialHairSlotAdded;

		// Token: 0x0400077F RID: 1919
		private bool _noHair;
	}
}
