using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Shared.CCVar;
using Robust.Client.AutoGenerated;
using Robust.Client.Credits;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.Configuration;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;
using Robust.Shared.Utility;
using YamlDotNet.RepresentationModel;

namespace Content.Client.Credits
{
	// Token: 0x02000371 RID: 881
	[GenerateTypedNameReferences]
	public sealed class CreditsWindow : DefaultWindow
	{
		// Token: 0x060015AA RID: 5546 RVA: 0x0008065C File Offset: 0x0007E85C
		public CreditsWindow()
		{
			IoCManager.InjectDependencies<CreditsWindow>(this);
			CreditsWindow.!XamlIlPopulateTrampoline(this);
			TabContainer.SetTabTitle(this.Ss14ContributorsTab, Loc.GetString("credits-window-ss14contributorslist-tab"));
			TabContainer.SetTabTitle(this.PatronsTab, Loc.GetString("credits-window-patrons-tab"));
			TabContainer.SetTabTitle(this.LicensesTab, Loc.GetString("credits-window-licenses-tab"));
			this.PopulateContributors(this.Ss14ContributorsContainer);
			this.PopulatePatrons(this.PatronsContainer);
			this.PopulateLicenses(this.LicensesContainer);
		}

		// Token: 0x060015AB RID: 5547 RVA: 0x000806E0 File Offset: 0x0007E8E0
		[NullableContext(1)]
		private void PopulateLicenses(BoxContainer licensesContainer)
		{
			foreach (CreditsManager.LicenseEntry licenseEntry in from p in CreditsManager.GetLicenses()
			orderby p.Name
			select p)
			{
				licensesContainer.AddChild(new Label
				{
					StyleClasses = 
					{
						"LabelHeading"
					},
					Text = licenseEntry.Name
				});
				foreach (string text in licenseEntry.License.Split("\n", StringSplitOptions.None))
				{
					licensesContainer.AddChild(new Label
					{
						Text = text,
						FontColorOverride = new Color?(new Color(200, 200, 200, byte.MaxValue))
					});
				}
			}
		}

		// Token: 0x060015AC RID: 5548 RVA: 0x000807D4 File Offset: 0x0007E9D4
		[NullableContext(1)]
		private void PopulatePatrons(BoxContainer patronsContainer)
		{
			IEnumerable<CreditsWindow.PatronEntry> source = this.LoadPatrons();
			bool flag = true;
			foreach (IGrouping<string, CreditsWindow.PatronEntry> grouping in from p in source
			group p by p.Tier into p
			orderby CreditsWindow.PatronTierPriority[p.Key]
			select p)
			{
				if (!flag)
				{
					patronsContainer.AddChild(new Control
					{
						MinSize = new ValueTuple<float, float>(0f, 10f)
					});
				}
				flag = false;
				patronsContainer.AddChild(new Label
				{
					StyleClasses = 
					{
						"LabelHeading"
					},
					Text = (grouping.Key ?? "")
				});
				string message = string.Join(", ", grouping.OrderBy((CreditsWindow.PatronEntry p) => p.Name).Select((CreditsWindow.PatronEntry p) => p.Name));
				RichTextLabel richTextLabel = new RichTextLabel();
				richTextLabel.SetMessage(message);
				patronsContainer.AddChild(richTextLabel);
			}
		}

		// Token: 0x060015AD RID: 5549 RVA: 0x00080930 File Offset: 0x0007EB30
		[NullableContext(1)]
		private IEnumerable<CreditsWindow.PatronEntry> LoadPatrons()
		{
			return from YamlMappingNode m in (YamlSequenceNode)this._resourceManager.ContentFileReadYaml(new ResourcePath("/Credits/Patrons.yml", "/")).Documents[0].RootNode
			select new CreditsWindow.PatronEntry(YamlHelpers.AsString(m["Name"]), YamlHelpers.AsString(m["Tier"]));
		}

		// Token: 0x060015AE RID: 5550 RVA: 0x00080998 File Offset: 0x0007EB98
		[NullableContext(1)]
		private void PopulateContributors(BoxContainer ss14ContributorsContainer)
		{
			CreditsWindow.<>c__DisplayClass7_0 CS$<>8__locals1 = new CreditsWindow.<>c__DisplayClass7_0();
			CS$<>8__locals1.ss14ContributorsContainer = ss14ContributorsContainer;
			CS$<>8__locals1.<>4__this = this;
			Control ss14ContributorsContainer2 = CS$<>8__locals1.ss14ContributorsContainer;
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 0;
			boxContainer.HorizontalAlignment = 2;
			boxContainer.SeparationOverride = new int?(20);
			boxContainer.Children.Add(new Label
			{
				Text = Loc.GetString("credits-window-contributor-encouragement-label")
			});
			Control.OrderedChildCollection children = boxContainer.Children;
			Button button = new Button();
			button.Text = Loc.GetString("credits-window-contribute-button");
			Button button2 = button;
			children.Add(button);
			ss14ContributorsContainer2.AddChild(boxContainer);
			CS$<>8__locals1.first = true;
			CS$<>8__locals1.<PopulateContributors>g__AddSection|0(Loc.GetString("credits-window-contributors-section-title"), "GitHub.txt", false);
			CS$<>8__locals1.<PopulateContributors>g__AddSection|0(Loc.GetString("credits-window-codebases-section-title"), "SpaceStation13.txt", false);
			CS$<>8__locals1.<PopulateContributors>g__AddSection|0(Loc.GetString("credits-window-original-remake-team-section-title"), "OriginalRemake.txt", false);
			CS$<>8__locals1.<PopulateContributors>g__AddSection|0(Loc.GetString("credits-window-special-thanks-section-title"), "SpecialThanks.txt", true);
			CS$<>8__locals1.linkGithub = this._cfg.GetCVar<string>(CCVars.InfoLinksGithub);
			button2.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				IoCManager.Resolve<IUriOpener>().OpenUri(CS$<>8__locals1.linkGithub);
			};
			if (CS$<>8__locals1.linkGithub == "")
			{
				button2.Visible = false;
			}
		}

		// Token: 0x1700045C RID: 1116
		// (get) Token: 0x060015AF RID: 5551 RVA: 0x00080AC6 File Offset: 0x0007ECC6
		private ScrollContainer Ss14ContributorsTab
		{
			get
			{
				return base.FindControl<ScrollContainer>("Ss14ContributorsTab");
			}
		}

		// Token: 0x1700045D RID: 1117
		// (get) Token: 0x060015B0 RID: 5552 RVA: 0x00080AD3 File Offset: 0x0007ECD3
		private BoxContainer Ss14ContributorsContainer
		{
			get
			{
				return base.FindControl<BoxContainer>("Ss14ContributorsContainer");
			}
		}

		// Token: 0x1700045E RID: 1118
		// (get) Token: 0x060015B1 RID: 5553 RVA: 0x00080AE0 File Offset: 0x0007ECE0
		private ScrollContainer PatronsTab
		{
			get
			{
				return base.FindControl<ScrollContainer>("PatronsTab");
			}
		}

		// Token: 0x1700045F RID: 1119
		// (get) Token: 0x060015B2 RID: 5554 RVA: 0x00080AED File Offset: 0x0007ECED
		private BoxContainer PatronsContainer
		{
			get
			{
				return base.FindControl<BoxContainer>("PatronsContainer");
			}
		}

		// Token: 0x17000460 RID: 1120
		// (get) Token: 0x060015B3 RID: 5555 RVA: 0x00080AFA File Offset: 0x0007ECFA
		private ScrollContainer LicensesTab
		{
			get
			{
				return base.FindControl<ScrollContainer>("LicensesTab");
			}
		}

		// Token: 0x17000461 RID: 1121
		// (get) Token: 0x060015B4 RID: 5556 RVA: 0x00080B07 File Offset: 0x0007ED07
		private BoxContainer LicensesContainer
		{
			get
			{
				return base.FindControl<BoxContainer>("LicensesContainer");
			}
		}

		// Token: 0x060015B5 RID: 5557 RVA: 0x00080B14 File Offset: 0x0007ED14
		// Note: this type is marked as 'beforefieldinit'.
		static CreditsWindow()
		{
			Dictionary<string, int> dictionary = new Dictionary<string, int>();
			dictionary["Nuclear Operative"] = 1;
			dictionary["Syndicate Agent"] = 2;
			dictionary["Revolutionary"] = 3;
			CreditsWindow.PatronTierPriority = dictionary;
		}

		// Token: 0x060015B6 RID: 5558 RVA: 0x00080B44 File Offset: 0x0007ED44
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.Credits.CreditsWindow.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Title = (string)new LocExtension("credits-window-title").ProvideValue();
			A_1.SetSize = new Vector2(650f, 650f);
			TabContainer tabContainer = new TabContainer();
			ScrollContainer scrollContainer = new ScrollContainer();
			scrollContainer.Name = "Ss14ContributorsTab";
			Control control = scrollContainer;
			context.RobustNameScope.Register("Ss14ContributorsTab", control);
			scrollContainer.HScrollEnabled = false;
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Name = "Ss14ContributorsContainer";
			control = boxContainer;
			context.RobustNameScope.Register("Ss14ContributorsContainer", control);
			boxContainer.Orientation = 1;
			boxContainer.Margin = new Thickness(2f, 2f, 0f, 0f);
			control = boxContainer;
			scrollContainer.XamlChildren.Add(control);
			control = scrollContainer;
			tabContainer.XamlChildren.Add(control);
			ScrollContainer scrollContainer2 = new ScrollContainer();
			scrollContainer2.Name = "PatronsTab";
			control = scrollContainer2;
			context.RobustNameScope.Register("PatronsTab", control);
			scrollContainer2.HScrollEnabled = false;
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Name = "PatronsContainer";
			control = boxContainer2;
			context.RobustNameScope.Register("PatronsContainer", control);
			boxContainer2.Orientation = 1;
			boxContainer2.Margin = new Thickness(2f, 2f, 0f, 0f);
			control = boxContainer2;
			scrollContainer2.XamlChildren.Add(control);
			control = scrollContainer2;
			tabContainer.XamlChildren.Add(control);
			ScrollContainer scrollContainer3 = new ScrollContainer();
			scrollContainer3.Name = "LicensesTab";
			control = scrollContainer3;
			context.RobustNameScope.Register("LicensesTab", control);
			scrollContainer3.HScrollEnabled = false;
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Name = "LicensesContainer";
			control = boxContainer3;
			context.RobustNameScope.Register("LicensesContainer", control);
			boxContainer3.Orientation = 1;
			boxContainer3.Margin = new Thickness(2f, 2f, 0f, 0f);
			control = boxContainer3;
			scrollContainer3.XamlChildren.Add(control);
			control = scrollContainer3;
			tabContainer.XamlChildren.Add(control);
			control = tabContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x060015B7 RID: 5559 RVA: 0x00080E1E File Offset: 0x0007F01E
		private static void !XamlIlPopulateTrampoline(CreditsWindow A_0)
		{
			CreditsWindow.Populate:Content.Client.Credits.CreditsWindow.xaml(null, A_0);
		}

		// Token: 0x04000B53 RID: 2899
		[Nullable(1)]
		[Dependency]
		private readonly IResourceCache _resourceManager;

		// Token: 0x04000B54 RID: 2900
		[Nullable(1)]
		[Dependency]
		private readonly IConfigurationManager _cfg;

		// Token: 0x04000B55 RID: 2901
		[Nullable(1)]
		private static readonly Dictionary<string, int> PatronTierPriority;

		// Token: 0x02000372 RID: 882
		[NullableContext(1)]
		[Nullable(0)]
		private sealed class PatronEntry
		{
			// Token: 0x17000462 RID: 1122
			// (get) Token: 0x060015B8 RID: 5560 RVA: 0x00080E27 File Offset: 0x0007F027
			public string Name { get; }

			// Token: 0x17000463 RID: 1123
			// (get) Token: 0x060015B9 RID: 5561 RVA: 0x00080E2F File Offset: 0x0007F02F
			public string Tier { get; }

			// Token: 0x060015BA RID: 5562 RVA: 0x00080E37 File Offset: 0x0007F037
			public PatronEntry(string name, string tier)
			{
				this.Name = name;
				this.Tier = tier;
			}
		}
	}
}
