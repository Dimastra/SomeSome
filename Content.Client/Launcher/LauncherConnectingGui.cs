using System;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.MainMenu;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;
using Robust.Shared.Network;
using Robust.Shared.Timing;

namespace Content.Client.Launcher
{
	// Token: 0x0200027C RID: 636
	[GenerateTypedNameReferences]
	public sealed class LauncherConnectingGui : Control
	{
		// Token: 0x0600102F RID: 4143 RVA: 0x000606FC File Offset: 0x0005E8FC
		[NullableContext(1)]
		public LauncherConnectingGui(LauncherConnecting state)
		{
			this._state = state;
			LauncherConnectingGui.!XamlIlPopulateTrampoline(this);
			LayoutContainer.SetAnchorPreset(this, 15, false);
			base.Stylesheet = IoCManager.Resolve<IStylesheetManager>().SheetSpace;
			this.ReconnectButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this._state.RetryConnect();
			};
			this.RedialButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				if (!this._state.Redial())
				{
					this._state.RetryConnect();
				}
			};
			this.RetryButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this._state.RetryConnect();
			};
			this.ExitButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this._state.Exit();
			};
			string address = state.Address;
			if (address != null)
			{
				this.ConnectingAddress.Text = address;
			}
			state.PageChanged += this.OnPageChanged;
			state.ConnectFailReasonChanged += this.ConnectFailReasonChanged;
			state.ConnectionStateChanged += this.ConnectionStateChanged;
			this.ConnectionStateChanged(state.ConnectionState);
			ExtendedDisconnectInformationManager extendedDisconnectInformationManager = IoCManager.Resolve<ExtendedDisconnectInformationManager>();
			extendedDisconnectInformationManager.LastNetDisconnectedArgsChanged += this.LastNetDisconnectedArgsChanged;
			this.LastNetDisconnectedArgsChanged(extendedDisconnectInformationManager.LastNetDisconnectedArgs);
		}

		// Token: 0x06001030 RID: 4144 RVA: 0x00060818 File Offset: 0x0005EA18
		[NullableContext(2)]
		private void ConnectFailReasonChanged(string reason)
		{
			this.ConnectFailReason.SetMessage((reason == null) ? "" : Loc.GetString("connecting-fail-reason", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("reason", reason)
			}));
		}

		// Token: 0x06001031 RID: 4145 RVA: 0x00060854 File Offset: 0x0005EA54
		[NullableContext(2)]
		private void LastNetDisconnectedArgsChanged(NetDisconnectedArgs args)
		{
			bool flag = args != null && args.RedialFlag;
			this.RedialButton.Visible = flag;
			this.ReconnectButton.Visible = !flag;
		}

		// Token: 0x06001032 RID: 4146 RVA: 0x0006088C File Offset: 0x0005EA8C
		protected override void FrameUpdate(FrameEventArgs args)
		{
			base.FrameUpdate(args);
			this._redialWaitTime -= args.DeltaSeconds;
			if (this._redialWaitTime <= 0f)
			{
				this.RedialButton.Disabled = false;
				this.RedialButton.Text = Loc.GetString("connecting-redial");
				return;
			}
			this.RedialButton.Disabled = true;
			this.RedialButton.Text = Loc.GetString("connecting-redial-wait", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("time", this._redialWaitTime.ToString("00.000"))
			});
		}

		// Token: 0x06001033 RID: 4147 RVA: 0x0006092C File Offset: 0x0005EB2C
		private void OnPageChanged(LauncherConnecting.Page page)
		{
			this.ConnectingStatus.Visible = (page == LauncherConnecting.Page.Connecting);
			this.ConnectFail.Visible = (page == LauncherConnecting.Page.ConnectFailed);
			this.Disconnected.Visible = (page == LauncherConnecting.Page.Disconnected);
			if (page == LauncherConnecting.Page.Disconnected)
			{
				this.DisconnectReason.Text = this._state.LastDisconnectReason;
			}
		}

		// Token: 0x06001034 RID: 4148 RVA: 0x00060980 File Offset: 0x0005EB80
		private void ConnectionStateChanged(ClientConnectionState state)
		{
			Label connectStatus = this.ConnectStatus;
			DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(17, 1);
			defaultInterpolatedStringHandler.AppendLiteral("connecting-state-");
			defaultInterpolatedStringHandler.AppendFormatted<ClientConnectionState>(state);
			connectStatus.Text = Loc.GetString(defaultInterpolatedStringHandler.ToStringAndClear());
		}

		// Token: 0x17000376 RID: 886
		// (get) Token: 0x06001035 RID: 4149 RVA: 0x000609C2 File Offset: 0x0005EBC2
		private Button ExitButton
		{
			get
			{
				return base.FindControl<Button>("ExitButton");
			}
		}

		// Token: 0x17000377 RID: 887
		// (get) Token: 0x06001036 RID: 4150 RVA: 0x000609CF File Offset: 0x0005EBCF
		private BoxContainer ConnectingStatus
		{
			get
			{
				return base.FindControl<BoxContainer>("ConnectingStatus");
			}
		}

		// Token: 0x17000378 RID: 888
		// (get) Token: 0x06001037 RID: 4151 RVA: 0x000609DC File Offset: 0x0005EBDC
		private Label ConnectStatus
		{
			get
			{
				return base.FindControl<Label>("ConnectStatus");
			}
		}

		// Token: 0x17000379 RID: 889
		// (get) Token: 0x06001038 RID: 4152 RVA: 0x000609E9 File Offset: 0x0005EBE9
		private BoxContainer ConnectFail
		{
			get
			{
				return base.FindControl<BoxContainer>("ConnectFail");
			}
		}

		// Token: 0x1700037A RID: 890
		// (get) Token: 0x06001039 RID: 4153 RVA: 0x000609F6 File Offset: 0x0005EBF6
		private RichTextLabel ConnectFailReason
		{
			get
			{
				return base.FindControl<RichTextLabel>("ConnectFailReason");
			}
		}

		// Token: 0x1700037B RID: 891
		// (get) Token: 0x0600103A RID: 4154 RVA: 0x00060A03 File Offset: 0x0005EC03
		private Button RetryButton
		{
			get
			{
				return base.FindControl<Button>("RetryButton");
			}
		}

		// Token: 0x1700037C RID: 892
		// (get) Token: 0x0600103B RID: 4155 RVA: 0x00060A10 File Offset: 0x0005EC10
		private BoxContainer Disconnected
		{
			get
			{
				return base.FindControl<BoxContainer>("Disconnected");
			}
		}

		// Token: 0x1700037D RID: 893
		// (get) Token: 0x0600103C RID: 4156 RVA: 0x00060A1D File Offset: 0x0005EC1D
		private Label DisconnectReason
		{
			get
			{
				return base.FindControl<Label>("DisconnectReason");
			}
		}

		// Token: 0x1700037E RID: 894
		// (get) Token: 0x0600103D RID: 4157 RVA: 0x00060A2A File Offset: 0x0005EC2A
		private Button ReconnectButton
		{
			get
			{
				return base.FindControl<Button>("ReconnectButton");
			}
		}

		// Token: 0x1700037F RID: 895
		// (get) Token: 0x0600103E RID: 4158 RVA: 0x00060A37 File Offset: 0x0005EC37
		private Button RedialButton
		{
			get
			{
				return base.FindControl<Button>("RedialButton");
			}
		}

		// Token: 0x17000380 RID: 896
		// (get) Token: 0x0600103F RID: 4159 RVA: 0x00060A44 File Offset: 0x0005EC44
		private Label ConnectingAddress
		{
			get
			{
				return base.FindControl<Label>("ConnectingAddress");
			}
		}

		// Token: 0x06001044 RID: 4164 RVA: 0x00060A88 File Offset: 0x0005EC88
		static void xaml(IServiceProvider A_0, Control A_1)
		{
			XamlIlContext.Context<Control> context = new XamlIlContext.Context<Control>(A_0, null, "resm:Content.Client.Launcher.LauncherConnectingGui.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			Control control = new BackgroundControl
			{
				TexturePath = "/Textures/main_menu_background.png",
				Stretch = 8
			};
			A_1.XamlChildren.Add(control);
			Control control2 = new Control();
			control2.HorizontalAlignment = 2;
			control2.VerticalAlignment = 2;
			PanelContainer panelContainer = new PanelContainer();
			string item = "AngleRect";
			panelContainer.StyleClasses.Add(item);
			control = panelContainer;
			control2.XamlChildren.Add(control);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			boxContainer.MinSize = new Vector2(300f, 200f);
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 0;
			Label label = new Label();
			label.Margin = new Thickness(8f, 0f, 0f, 0f);
			label.Text = (string)new LocExtension("connecting-title").ProvideValue();
			item = "LabelHeading";
			label.StyleClasses.Add(item);
			label.VAlign = 1;
			control = label;
			boxContainer2.XamlChildren.Add(control);
			Button button = new Button();
			button.Name = "ExitButton";
			control = button;
			context.RobustNameScope.Register("ExitButton", control);
			button.Text = (string)new LocExtension("connecting-exit").ProvideValue();
			button.HorizontalAlignment = 3;
			button.HorizontalExpand = true;
			control = button;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			control = new HighDivider();
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 1;
			boxContainer3.VerticalExpand = true;
			boxContainer3.Margin = new Thickness(4f, 4f, 4f, 0f);
			Control control3 = new Control();
			control3.VerticalExpand = true;
			control3.Margin = new Thickness(0f, 0f, 0f, 8f);
			BoxContainer boxContainer4 = new BoxContainer();
			boxContainer4.Orientation = 1;
			boxContainer4.Name = "ConnectingStatus";
			control = boxContainer4;
			context.RobustNameScope.Register("ConnectingStatus", control);
			control = new Label
			{
				Text = (string)new LocExtension("connecting-in-progress").ProvideValue(),
				Align = 1
			};
			boxContainer4.XamlChildren.Add(control);
			Label label2 = new Label();
			label2.Name = "ConnectStatus";
			control = label2;
			context.RobustNameScope.Register("ConnectStatus", control);
			item = "LabelSubText";
			label2.StyleClasses.Add(item);
			label2.Align = 1;
			control = label2;
			boxContainer4.XamlChildren.Add(control);
			control = boxContainer4;
			control3.XamlChildren.Add(control);
			BoxContainer boxContainer5 = new BoxContainer();
			boxContainer5.Orientation = 1;
			boxContainer5.Name = "ConnectFail";
			control = boxContainer5;
			context.RobustNameScope.Register("ConnectFail", control);
			boxContainer5.Visible = false;
			RichTextLabel richTextLabel = new RichTextLabel();
			richTextLabel.Name = "ConnectFailReason";
			control = richTextLabel;
			context.RobustNameScope.Register("ConnectFailReason", control);
			richTextLabel.VerticalAlignment = 0;
			control = richTextLabel;
			boxContainer5.XamlChildren.Add(control);
			Button button2 = new Button();
			button2.Name = "RetryButton";
			control = button2;
			context.RobustNameScope.Register("RetryButton", control);
			button2.Text = (string)new LocExtension("connecting-retry").ProvideValue();
			button2.HorizontalAlignment = 2;
			button2.VerticalExpand = true;
			button2.VerticalAlignment = 3;
			control = button2;
			boxContainer5.XamlChildren.Add(control);
			control = boxContainer5;
			control3.XamlChildren.Add(control);
			BoxContainer boxContainer6 = new BoxContainer();
			boxContainer6.Orientation = 1;
			boxContainer6.Name = "Disconnected";
			control = boxContainer6;
			context.RobustNameScope.Register("Disconnected", control);
			control = new Label
			{
				Text = (string)new LocExtension("connecting-disconnected").ProvideValue(),
				Align = 1
			};
			boxContainer6.XamlChildren.Add(control);
			Label label3 = new Label();
			label3.Name = "DisconnectReason";
			control = label3;
			context.RobustNameScope.Register("DisconnectReason", control);
			label3.Align = 1;
			control = label3;
			boxContainer6.XamlChildren.Add(control);
			Button button3 = new Button();
			button3.Name = "ReconnectButton";
			control = button3;
			context.RobustNameScope.Register("ReconnectButton", control);
			button3.Text = (string)new LocExtension("connecting-reconnect").ProvideValue();
			button3.HorizontalAlignment = 2;
			button3.VerticalExpand = true;
			button3.VerticalAlignment = 3;
			control = button3;
			boxContainer6.XamlChildren.Add(control);
			Button button4 = new Button();
			button4.Name = "RedialButton";
			control = button4;
			context.RobustNameScope.Register("RedialButton", control);
			button4.Text = (string)new LocExtension("connecting-redial").ProvideValue();
			button4.Disabled = true;
			button4.HorizontalAlignment = 2;
			button4.VerticalExpand = true;
			button4.VerticalAlignment = 3;
			control = button4;
			boxContainer6.XamlChildren.Add(control);
			control = boxContainer6;
			control3.XamlChildren.Add(control);
			control = control3;
			boxContainer3.XamlChildren.Add(control);
			Label label4 = new Label();
			label4.Name = "ConnectingAddress";
			control = label4;
			context.RobustNameScope.Register("ConnectingAddress", control);
			item = "LabelSubText";
			label4.StyleClasses.Add(item);
			label4.HorizontalAlignment = 2;
			control = label4;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer.XamlChildren.Add(control);
			control = new PanelContainer
			{
				PanelOverride = new StyleBoxFlat
				{
					BackgroundColor = Color.FromXaml("#444"),
					ContentMarginTopOverride = new float?(2f)
				}
			};
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer7 = new BoxContainer();
			boxContainer7.Orientation = 0;
			boxContainer7.Margin = new Thickness(12f, 0f, 4f, 0f);
			boxContainer7.VerticalAlignment = 3;
			Label label5 = new Label();
			label5.Text = (string)new LocExtension("connecting-tip").ProvideValue();
			item = "LabelSubText";
			label5.StyleClasses.Add(item);
			control = label5;
			boxContainer7.XamlChildren.Add(control);
			Label label6 = new Label();
			label6.Text = (string)new LocExtension("connecting-version").ProvideValue();
			item = "LabelSubText";
			label6.StyleClasses.Add(item);
			label6.HorizontalAlignment = 3;
			label6.HorizontalExpand = true;
			control = label6;
			boxContainer7.XamlChildren.Add(control);
			control = boxContainer7;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			control2.XamlChildren.Add(control);
			control = control2;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06001045 RID: 4165 RVA: 0x000612F3 File Offset: 0x0005F4F3
		private static void !XamlIlPopulateTrampoline(LauncherConnectingGui A_0)
		{
			LauncherConnectingGui.Populate:Content.Client.Launcher.LauncherConnectingGui.xaml(null, A_0);
		}

		// Token: 0x04000803 RID: 2051
		private const float RedialWaitTimeSeconds = 15f;

		// Token: 0x04000804 RID: 2052
		[Nullable(1)]
		private readonly LauncherConnecting _state;

		// Token: 0x04000805 RID: 2053
		private float _redialWaitTime = 15f;
	}
}
