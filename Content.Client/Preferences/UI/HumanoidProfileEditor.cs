using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.FlavorText;
using Content.Client.Humanoid;
using Content.Client.Lobby.UI;
using Content.Client.Message;
using Content.Client.Players.PlayTimeTracking;
using Content.Client.UserInterface.Controls;
using Content.Client.White.Sponsors;
using Content.Shared.CCVar;
using Content.Shared.Humanoid;
using Content.Shared.Humanoid.Markings;
using Content.Shared.Humanoid.Prototypes;
using Content.Shared.Preferences;
using Content.Shared.Roles;
using Content.Shared.Traits;
using Content.Shared.White.Sponsors;
using Content.Shared.White.TTS;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.Utility;
using Robust.Shared.Configuration;
using Robust.Shared.Enums;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Map;
using Robust.Shared.Maths;
using Robust.Shared.Prototypes;
using Robust.Shared.Random;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Client.Preferences.UI
{
	// Token: 0x0200018A RID: 394
	[NullableContext(1)]
	[Nullable(0)]
	[GenerateTypedNameReferences]
	public sealed class HumanoidProfileEditor : Control
	{
		// Token: 0x06000A31 RID: 2609 RVA: 0x0003B037 File Offset: 0x00039237
		private void RandomizeEverything()
		{
			this.Profile = HumanoidCharacterProfile.Random(null);
			this.UpdateControls();
			this.IsDirty = true;
		}

		// Token: 0x06000A32 RID: 2610 RVA: 0x0003B054 File Offset: 0x00039254
		private void RandomizeName()
		{
			if (this.Profile == null)
			{
				return;
			}
			string name = HumanoidCharacterProfile.GetName(this.Profile.Species, this.Profile.Gender);
			this.SetName(name);
			this.UpdateNameEdit();
		}

		// Token: 0x170001D7 RID: 471
		// (get) Token: 0x06000A33 RID: 2611 RVA: 0x0003B093 File Offset: 0x00039293
		private LineEdit _ageEdit
		{
			get
			{
				return this.CAgeEdit;
			}
		}

		// Token: 0x170001D8 RID: 472
		// (get) Token: 0x06000A34 RID: 2612 RVA: 0x0003B09B File Offset: 0x0003929B
		private LineEdit _nameEdit
		{
			get
			{
				return this.CNameEdit;
			}
		}

		// Token: 0x170001D9 RID: 473
		// (get) Token: 0x06000A35 RID: 2613 RVA: 0x0003B0A3 File Offset: 0x000392A3
		private Button _nameRandomButton
		{
			get
			{
				return this.CNameRandomize;
			}
		}

		// Token: 0x170001DA RID: 474
		// (get) Token: 0x06000A36 RID: 2614 RVA: 0x0003B0AB File Offset: 0x000392AB
		private Button _randomizeEverythingButton
		{
			get
			{
				return this.CRandomizeEverything;
			}
		}

		// Token: 0x170001DB RID: 475
		// (get) Token: 0x06000A37 RID: 2615 RVA: 0x0003B0B3 File Offset: 0x000392B3
		private RichTextLabel _warningLabel
		{
			get
			{
				return this.CWarningLabel;
			}
		}

		// Token: 0x170001DC RID: 476
		// (get) Token: 0x06000A38 RID: 2616 RVA: 0x0003B0BB File Offset: 0x000392BB
		private Button _saveButton
		{
			get
			{
				return this.CSaveButton;
			}
		}

		// Token: 0x170001DD RID: 477
		// (get) Token: 0x06000A39 RID: 2617 RVA: 0x0003B0C3 File Offset: 0x000392C3
		private OptionButton _sexButton
		{
			get
			{
				return this.CSexButton;
			}
		}

		// Token: 0x170001DE RID: 478
		// (get) Token: 0x06000A3A RID: 2618 RVA: 0x0003B0CB File Offset: 0x000392CB
		private OptionButton _genderButton
		{
			get
			{
				return this.CPronounsButton;
			}
		}

		// Token: 0x170001DF RID: 479
		// (get) Token: 0x06000A3B RID: 2619 RVA: 0x0003B0D3 File Offset: 0x000392D3
		private OptionButton _voiceButton
		{
			get
			{
				return this.CVoiceButton;
			}
		}

		// Token: 0x170001E0 RID: 480
		// (get) Token: 0x06000A3C RID: 2620 RVA: 0x0003B0DB File Offset: 0x000392DB
		private Slider _skinColor
		{
			get
			{
				return this.CSkin;
			}
		}

		// Token: 0x170001E1 RID: 481
		// (get) Token: 0x06000A3D RID: 2621 RVA: 0x0003B0E3 File Offset: 0x000392E3
		private OptionButton _clothingButton
		{
			get
			{
				return this.CClothingButton;
			}
		}

		// Token: 0x170001E2 RID: 482
		// (get) Token: 0x06000A3E RID: 2622 RVA: 0x0003B0EB File Offset: 0x000392EB
		private OptionButton _backpackButton
		{
			get
			{
				return this.CBackpackButton;
			}
		}

		// Token: 0x170001E3 RID: 483
		// (get) Token: 0x06000A3F RID: 2623 RVA: 0x0003B0F3 File Offset: 0x000392F3
		private SingleMarkingPicker _hairPicker
		{
			get
			{
				return this.CHairStylePicker;
			}
		}

		// Token: 0x170001E4 RID: 484
		// (get) Token: 0x06000A40 RID: 2624 RVA: 0x0003B0FB File Offset: 0x000392FB
		private SingleMarkingPicker _facialHairPicker
		{
			get
			{
				return this.CFacialHairPicker;
			}
		}

		// Token: 0x170001E5 RID: 485
		// (get) Token: 0x06000A41 RID: 2625 RVA: 0x0003B103 File Offset: 0x00039303
		private EyeColorPicker _eyesPicker
		{
			get
			{
				return this.CEyeColorPicker;
			}
		}

		// Token: 0x170001E6 RID: 486
		// (get) Token: 0x06000A42 RID: 2626 RVA: 0x0003B10B File Offset: 0x0003930B
		private TabContainer _tabContainer
		{
			get
			{
				return this.CTabContainer;
			}
		}

		// Token: 0x170001E7 RID: 487
		// (get) Token: 0x06000A43 RID: 2627 RVA: 0x0003B113 File Offset: 0x00039313
		private BoxContainer _jobList
		{
			get
			{
				return this.CJobList;
			}
		}

		// Token: 0x170001E8 RID: 488
		// (get) Token: 0x06000A44 RID: 2628 RVA: 0x0003B11B File Offset: 0x0003931B
		private BoxContainer _antagList
		{
			get
			{
				return this.CAntagList;
			}
		}

		// Token: 0x170001E9 RID: 489
		// (get) Token: 0x06000A45 RID: 2629 RVA: 0x0003B123 File Offset: 0x00039323
		private BoxContainer _traitsList
		{
			get
			{
				return this.CTraitsList;
			}
		}

		// Token: 0x170001EA RID: 490
		// (get) Token: 0x06000A46 RID: 2630 RVA: 0x0003B12B File Offset: 0x0003932B
		private OptionButton _preferenceUnavailableButton
		{
			get
			{
				return this.CPreferenceUnavailableButton;
			}
		}

		// Token: 0x170001EB RID: 491
		// (get) Token: 0x06000A47 RID: 2631 RVA: 0x0003B133 File Offset: 0x00039333
		private Control _previewSpriteControl
		{
			get
			{
				return this.CSpriteViewFront;
			}
		}

		// Token: 0x170001EC RID: 492
		// (get) Token: 0x06000A48 RID: 2632 RVA: 0x0003B13B File Offset: 0x0003933B
		private Control _previewSpriteSideControl
		{
			get
			{
				return this.CSpriteViewSide;
			}
		}

		// Token: 0x170001ED RID: 493
		// (get) Token: 0x06000A49 RID: 2633 RVA: 0x0003B143 File Offset: 0x00039343
		private BoxContainer _rgbSkinColorContainer
		{
			get
			{
				return this.CRgbSkinColorContainer;
			}
		}

		// Token: 0x14000047 RID: 71
		// (add) Token: 0x06000A4A RID: 2634 RVA: 0x0003B14C File Offset: 0x0003934C
		// (remove) Token: 0x06000A4B RID: 2635 RVA: 0x0003B184 File Offset: 0x00039384
		[Nullable(new byte[]
		{
			2,
			1
		})]
		[Nullable(new byte[]
		{
			2,
			1
		})]
		public event Action<HumanoidCharacterProfile, int> OnProfileChanged;

		// Token: 0x06000A4C RID: 2636 RVA: 0x0003B1BC File Offset: 0x000393BC
		public HumanoidProfileEditor(IClientPreferencesManager preferencesManager, IPrototypeManager prototypeManager, IEntityManager entityManager, IConfigurationManager configurationManager)
		{
			HumanoidProfileEditor.!XamlIlPopulateTrampoline(this);
			this._random = IoCManager.Resolve<IRobustRandom>();
			this._prototypeManager = prototypeManager;
			this._entMan = entityManager;
			this._preferencesManager = preferencesManager;
			this._configurationManager = configurationManager;
			this._markingManager = IoCManager.Resolve<MarkingManager>();
			this._nameEdit.OnTextChanged += delegate(LineEdit.LineEditEventArgs args)
			{
				this.SetName(args.Text);
			};
			this._nameRandomButton.OnPressed += delegate(BaseButton.ButtonEventArgs args)
			{
				this.RandomizeName();
			};
			this._randomizeEverythingButton.OnPressed += delegate(BaseButton.ButtonEventArgs args)
			{
				this.RandomizeEverything();
			};
			this._warningLabel.SetMarkup("[color=red]" + Loc.GetString("humanoid-profile-editor-naming-rules-warning") + "[/color]");
			this._tabContainer.SetTabTitle(0, Loc.GetString("humanoid-profile-editor-appearance-tab"));
			this._sexButton.OnItemSelected += delegate(OptionButton.ItemSelectedEventArgs args)
			{
				this._sexButton.SelectId(args.Id);
				this.SetSex((Sex)args.Id);
			};
			this._ageEdit.OnTextChanged += delegate(LineEdit.LineEditEventArgs args)
			{
				int age;
				if (!int.TryParse(args.Text, out age))
				{
					return;
				}
				this.SetAge(age);
			};
			this._genderButton.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-male-text"), new int?(3));
			this._genderButton.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-female-text"), new int?(2));
			this._genderButton.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-epicene-text"), new int?(1));
			this._genderButton.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-neuter-text"), new int?(0));
			this._genderButton.OnItemSelected += delegate(OptionButton.ItemSelectedEventArgs args)
			{
				this._genderButton.SelectId(args.Id);
				this.SetGender((byte)args.Id);
			};
			this.InitializeVoice();
			this._speciesList = (from o in prototypeManager.EnumeratePrototypes<SpeciesPrototype>()
			where o.RoundStart
			select o).ToList<SpeciesPrototype>();
			for (int i = 0; i < this._speciesList.Count; i++)
			{
				string @string = Loc.GetString(this._speciesList[i].Name);
				this.CSpeciesButton.AddItem(@string, new int?(i));
			}
			this.CSpeciesButton.OnItemSelected += delegate(OptionButton.ItemSelectedEventArgs args)
			{
				this.CSpeciesButton.SelectId(args.Id);
				this.SetSpecies(this._speciesList[args.Id].ID);
				this.UpdateHairPickers();
				this.OnSkinColorOnValueChanged();
			};
			this._skinColor.OnValueChanged += delegate(Range _)
			{
				this.OnSkinColorOnValueChanged();
			};
			this._rgbSkinColorContainer.AddChild(this._rgbSkinColorSelector = new ColorSelectorSliders());
			ColorSelectorSliders rgbSkinColorSelector = this._rgbSkinColorSelector;
			rgbSkinColorSelector.OnColorChanged = (Action<Color>)Delegate.Combine(rgbSkinColorSelector.OnColorChanged, new Action<Color>(delegate(Color _)
			{
				this.OnSkinColorOnValueChanged();
			}));
			SingleMarkingPicker hairPicker = this._hairPicker;
			hairPicker.OnMarkingSelect = (Action<ValueTuple<int, string>>)Delegate.Combine(hairPicker.OnMarkingSelect, new Action<ValueTuple<int, string>>(delegate([TupleElementNames(new string[]
			{
				"slot",
				"id"
			})] [Nullable(new byte[]
			{
				0,
				1
			})] ValueTuple<int, string> newStyle)
			{
				if (this.Profile == null)
				{
					return;
				}
				this.Profile = this.Profile.WithCharacterAppearance(this.Profile.Appearance.WithHairStyleName(newStyle.Item2));
				this.IsDirty = true;
			}));
			SingleMarkingPicker hairPicker2 = this._hairPicker;
			hairPicker2.OnColorChanged = (Action<ValueTuple<int, Marking>>)Delegate.Combine(hairPicker2.OnColorChanged, new Action<ValueTuple<int, Marking>>(delegate([TupleElementNames(new string[]
			{
				"slot",
				"marking"
			})] [Nullable(new byte[]
			{
				0,
				1
			})] ValueTuple<int, Marking> newColor)
			{
				if (this.Profile == null)
				{
					return;
				}
				this.Profile = this.Profile.WithCharacterAppearance(this.Profile.Appearance.WithHairColor(newColor.Item2.MarkingColors[0]));
				this.IsDirty = true;
			}));
			SingleMarkingPicker facialHairPicker = this._facialHairPicker;
			facialHairPicker.OnMarkingSelect = (Action<ValueTuple<int, string>>)Delegate.Combine(facialHairPicker.OnMarkingSelect, new Action<ValueTuple<int, string>>(delegate([TupleElementNames(new string[]
			{
				"slot",
				"id"
			})] [Nullable(new byte[]
			{
				0,
				1
			})] ValueTuple<int, string> newStyle)
			{
				if (this.Profile == null)
				{
					return;
				}
				this.Profile = this.Profile.WithCharacterAppearance(this.Profile.Appearance.WithFacialHairStyleName(newStyle.Item2));
				this.IsDirty = true;
			}));
			SingleMarkingPicker facialHairPicker2 = this._facialHairPicker;
			facialHairPicker2.OnColorChanged = (Action<ValueTuple<int, Marking>>)Delegate.Combine(facialHairPicker2.OnColorChanged, new Action<ValueTuple<int, Marking>>(delegate([TupleElementNames(new string[]
			{
				"slot",
				"marking"
			})] [Nullable(new byte[]
			{
				0,
				1
			})] ValueTuple<int, Marking> newColor)
			{
				if (this.Profile == null)
				{
					return;
				}
				this.Profile = this.Profile.WithCharacterAppearance(this.Profile.Appearance.WithFacialHairColor(newColor.Item2.MarkingColors[0]));
				this.IsDirty = true;
			}));
			SingleMarkingPicker hairPicker3 = this._hairPicker;
			hairPicker3.OnSlotRemove = (Action<int>)Delegate.Combine(hairPicker3.OnSlotRemove, new Action<int>(delegate(int _)
			{
				if (this.Profile == null)
				{
					return;
				}
				this.Profile = this.Profile.WithCharacterAppearance(this.Profile.Appearance.WithHairStyleName("HairBald"));
				this.UpdateHairPickers();
				this.IsDirty = true;
			}));
			SingleMarkingPicker facialHairPicker3 = this._facialHairPicker;
			facialHairPicker3.OnSlotRemove = (Action<int>)Delegate.Combine(facialHairPicker3.OnSlotRemove, new Action<int>(delegate(int _)
			{
				if (this.Profile == null)
				{
					return;
				}
				this.Profile = this.Profile.WithCharacterAppearance(this.Profile.Appearance.WithFacialHairStyleName("FacialHairShaved"));
				this.UpdateHairPickers();
				this.IsDirty = true;
			}));
			SingleMarkingPicker hairPicker4 = this._hairPicker;
			hairPicker4.OnSlotAdd = (Action)Delegate.Combine(hairPicker4.OnSlotAdd, new Action(delegate()
			{
				if (this.Profile == null)
				{
					return;
				}
				string text2 = this._markingManager.MarkingsByCategoryAndSpecies(MarkingCategories.Hair, this.Profile.Species).Keys.FirstOrDefault<string>();
				if (string.IsNullOrEmpty(text2))
				{
					return;
				}
				this.Profile = this.Profile.WithCharacterAppearance(this.Profile.Appearance.WithHairStyleName(text2));
				this.UpdateHairPickers();
				this.IsDirty = true;
			}));
			SingleMarkingPicker facialHairPicker4 = this._facialHairPicker;
			facialHairPicker4.OnSlotAdd = (Action)Delegate.Combine(facialHairPicker4.OnSlotAdd, new Action(delegate()
			{
				if (this.Profile == null)
				{
					return;
				}
				string text2 = this._markingManager.MarkingsByCategoryAndSpecies(MarkingCategories.FacialHair, this.Profile.Species).Keys.FirstOrDefault<string>();
				if (string.IsNullOrEmpty(text2))
				{
					return;
				}
				this.Profile = this.Profile.WithCharacterAppearance(this.Profile.Appearance.WithFacialHairStyleName(text2));
				this.UpdateHairPickers();
				this.IsDirty = true;
			}));
			this._clothingButton.AddItem(Loc.GetString("humanoid-profile-editor-preference-jumpsuit"), new int?(0));
			this._clothingButton.AddItem(Loc.GetString("humanoid-profile-editor-preference-jumpskirt"), new int?(1));
			this._clothingButton.OnItemSelected += delegate(OptionButton.ItemSelectedEventArgs args)
			{
				this._clothingButton.SelectId(args.Id);
				this.SetClothing((ClothingPreference)args.Id);
			};
			this._backpackButton.AddItem(Loc.GetString("humanoid-profile-editor-preference-backpack"), new int?(0));
			this._backpackButton.AddItem(Loc.GetString("humanoid-profile-editor-preference-satchel"), new int?(1));
			this._backpackButton.AddItem(Loc.GetString("humanoid-profile-editor-preference-duffelbag"), new int?(2));
			this._backpackButton.OnItemSelected += delegate(OptionButton.ItemSelectedEventArgs args)
			{
				this._backpackButton.SelectId(args.Id);
				this.SetBackpack((BackpackPreference)args.Id);
			};
			this._eyesPicker.OnEyeColorPicked += delegate(Color newColor)
			{
				if (this.Profile == null)
				{
					return;
				}
				this.Profile = this.Profile.WithCharacterAppearance(this.Profile.Appearance.WithEyeColor(newColor));
				this.IsDirty = true;
			};
			this._tabContainer.SetTabTitle(1, Loc.GetString("humanoid-profile-editor-jobs-tab"));
			this._preferenceUnavailableButton.AddItem(Loc.GetString("humanoid-profile-editor-preference-unavailable-stay-in-lobby-button"), new int?(0));
			this._preferenceUnavailableButton.AddItem(Loc.GetString("humanoid-profile-editor-preference-unavailable-spawn-as-overflow-button", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("overflowJob", Loc.GetString("job-name-passenger"))
			}), new int?(1));
			this._preferenceUnavailableButton.OnItemSelected += delegate(OptionButton.ItemSelectedEventArgs args)
			{
				this._preferenceUnavailableButton.SelectId(args.Id);
				HumanoidCharacterProfile profile2 = this.Profile;
				this.Profile = ((profile2 != null) ? profile2.WithPreferenceUnavailable((PreferenceUnavailableMode)args.Id) : null);
				this.IsDirty = true;
			};
			this._jobPriorities = new List<HumanoidProfileEditor.JobPrioritySelector>();
			this._jobCategories = new Dictionary<string, BoxContainer>();
			bool flag = true;
			PlayTimeTrackingManager playTimeTrackingManager = IoCManager.Resolve<PlayTimeTrackingManager>();
			foreach (DepartmentPrototype departmentPrototype in this._prototypeManager.EnumeratePrototypes<DepartmentPrototype>())
			{
				string string2 = Loc.GetString("department-" + departmentPrototype.ID);
				BoxContainer boxContainer;
				if (!this._jobCategories.TryGetValue(departmentPrototype.ID, out boxContainer))
				{
					boxContainer = new BoxContainer
					{
						Orientation = 1,
						Name = departmentPrototype.ID,
						ToolTip = Loc.GetString("humanoid-profile-editor-jobs-amount-in-department-tooltip", new ValueTuple<string, object>[]
						{
							new ValueTuple<string, object>("departmentName", string2)
						})
					};
					if (flag)
					{
						flag = false;
					}
					else
					{
						boxContainer.AddChild(new Control
						{
							MinSize = new Vector2(0f, 23f)
						});
					}
					Control control = boxContainer;
					PanelContainer panelContainer = new PanelContainer();
					panelContainer.PanelOverride = new StyleBoxFlat
					{
						BackgroundColor = Color.FromHex("#464946", null)
					};
					panelContainer.Children.Add(new Label
					{
						Text = Loc.GetString("humanoid-profile-editor-department-jobs-label", new ValueTuple<string, object>[]
						{
							new ValueTuple<string, object>("departmentName", string2)
						}),
						Margin = new Thickness(5f, 0f, 0f, 0f)
					});
					control.AddChild(panelContainer);
					this._jobCategories[departmentPrototype.ID] = boxContainer;
					this._jobList.AddChild(boxContainer);
				}
				List<JobPrototype> list = (from o in departmentPrototype.Roles
				select this._prototypeManager.Index<JobPrototype>(o) into o
				where o.SetPreference
				select o).ToList<JobPrototype>();
				list.Sort((JobPrototype x, JobPrototype y) => -string.Compare(x.LocalizedName, y.LocalizedName, StringComparison.CurrentCultureIgnoreCase));
				using (List<JobPrototype>.Enumerator enumerator2 = list.GetEnumerator())
				{
					while (enumerator2.MoveNext())
					{
						JobPrototype job = enumerator2.Current;
						HumanoidProfileEditor.JobPrioritySelector selector = new HumanoidProfileEditor.JobPrioritySelector(job);
						string requirements;
						if (!playTimeTrackingManager.IsAllowed(job, out requirements))
						{
							selector.LockRequirements(requirements);
						}
						boxContainer.AddChild(selector);
						this._jobPriorities.Add(selector);
						selector.PriorityChanged += delegate(JobPriority priority)
						{
							HumanoidProfileEditor <>4__this = this;
							HumanoidCharacterProfile profile2 = this.Profile;
							<>4__this.Profile = ((profile2 != null) ? profile2.WithJobPriority(job.ID, priority) : null);
							this.IsDirty = true;
							foreach (HumanoidProfileEditor.JobPrioritySelector jobPrioritySelector in this._jobPriorities)
							{
								if (jobPrioritySelector.Job == selector.Job)
								{
									jobPrioritySelector.Priority = priority;
								}
								if (priority == JobPriority.High && jobPrioritySelector.Job != selector.Job && jobPrioritySelector.Priority == JobPriority.High)
								{
									jobPrioritySelector.Priority = JobPriority.Medium;
									HumanoidProfileEditor <>4__this2 = this;
									HumanoidCharacterProfile profile3 = this.Profile;
									<>4__this2.Profile = ((profile3 != null) ? profile3.WithJobPriority(jobPrioritySelector.Job.ID, JobPriority.Medium) : null);
								}
							}
						};
					}
				}
			}
			this._tabContainer.SetTabTitle(2, Loc.GetString("humanoid-profile-editor-antags-tab"));
			this._antagPreferences = new List<HumanoidProfileEditor.AntagPreferenceSelector>();
			using (IEnumerator<AntagPrototype> enumerator3 = (from a in prototypeManager.EnumeratePrototypes<AntagPrototype>()
			orderby Loc.GetString(a.Name)
			select a).GetEnumerator())
			{
				while (enumerator3.MoveNext())
				{
					AntagPrototype antag = enumerator3.Current;
					if (antag.SetPreference)
					{
						HumanoidProfileEditor.AntagPreferenceSelector antagPreferenceSelector = new HumanoidProfileEditor.AntagPreferenceSelector(antag);
						this._antagList.AddChild(antagPreferenceSelector);
						this._antagPreferences.Add(antagPreferenceSelector);
						antagPreferenceSelector.PreferenceChanged += delegate(bool preference)
						{
							HumanoidProfileEditor <>4__this = this;
							HumanoidCharacterProfile profile2 = this.Profile;
							<>4__this.Profile = ((profile2 != null) ? profile2.WithAntagPreference(antag.ID, preference) : null);
							this.IsDirty = true;
						};
					}
				}
			}
			List<TraitPrototype> list2 = (from t in prototypeManager.EnumeratePrototypes<TraitPrototype>()
			orderby Loc.GetString(t.Name)
			select t).ToList<TraitPrototype>();
			this._traitPreferences = new List<HumanoidProfileEditor.TraitPreferenceSelector>();
			this._tabContainer.SetTabTitle(3, Loc.GetString("humanoid-profile-editor-traits-tab"));
			if (list2.Count > 0)
			{
				using (List<TraitPrototype>.Enumerator enumerator4 = list2.GetEnumerator())
				{
					while (enumerator4.MoveNext())
					{
						TraitPrototype trait = enumerator4.Current;
						HumanoidProfileEditor.TraitPreferenceSelector traitPreferenceSelector = new HumanoidProfileEditor.TraitPreferenceSelector(trait);
						this._traitsList.AddChild(traitPreferenceSelector);
						this._traitPreferences.Add(traitPreferenceSelector);
						traitPreferenceSelector.PreferenceChanged += delegate(bool preference)
						{
							HumanoidProfileEditor <>4__this = this;
							HumanoidCharacterProfile profile2 = this.Profile;
							<>4__this.Profile = ((profile2 != null) ? profile2.WithTraitPreference(trait.ID, preference) : null);
							this.IsDirty = true;
						};
					}
					goto IL_994;
				}
			}
			this._traitsList.AddChild(new Label
			{
				Text = "No traits available :(",
				FontColorOverride = new Color?(Color.Gray)
			});
			IL_994:
			this._saveButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this.Save();
			};
			this._tabContainer.SetTabTitle(4, Loc.GetString("humanoid-profile-editor-markings-tab"));
			MarkingPicker cmarkings = this.CMarkings;
			cmarkings.OnMarkingAdded = (Action<MarkingSet>)Delegate.Combine(cmarkings.OnMarkingAdded, new Action<MarkingSet>(this.OnMarkingChange));
			MarkingPicker cmarkings2 = this.CMarkings;
			cmarkings2.OnMarkingRemoved = (Action<MarkingSet>)Delegate.Combine(cmarkings2.OnMarkingRemoved, new Action<MarkingSet>(this.OnMarkingChange));
			MarkingPicker cmarkings3 = this.CMarkings;
			cmarkings3.OnMarkingColorChange = (Action<MarkingSet>)Delegate.Combine(cmarkings3.OnMarkingColorChange, new Action<MarkingSet>(this.OnMarkingChange));
			MarkingPicker cmarkings4 = this.CMarkings;
			cmarkings4.OnMarkingRankChange = (Action<MarkingSet>)Delegate.Combine(cmarkings4.OnMarkingRankChange, new Action<MarkingSet>(this.OnMarkingChange));
			if (this._configurationManager.GetCVar<bool>(CCVars.FlavorText))
			{
				FlavorText flavorText = new FlavorText();
				this._tabContainer.AddChild(flavorText);
				this._tabContainer.SetTabTitle(this._tabContainer.ChildCount - 1, Loc.GetString("humanoid-profile-editor-flavortext-tab"));
				this._flavorTextEdit = flavorText.CFlavorTextInput;
				FlavorText flavorText2 = flavorText;
				flavorText2.OnFlavorTextChanged = (Action<string>)Delegate.Combine(flavorText2.OnFlavorTextChanged, new Action<string>(this.OnFlavorTextChange));
			}
			HumanoidCharacterProfile profile = this.Profile;
			string text = ((profile != null) ? profile.Species : null) ?? "Human";
			string dollPrototype = this._prototypeManager.Index<SpeciesPrototype>(text).DollPrototype;
			if (this._previewDummy != null)
			{
				this._entMan.DeleteEntity(this._previewDummy.Value);
			}
			this._previewDummy = new EntityUid?(this._entMan.SpawnEntity(dollPrototype, MapCoordinates.Nullspace));
			this._lastSpecies = text;
			SpriteComponent component = this._entMan.GetComponent<SpriteComponent>(this._previewDummy.Value);
			this._previewSprite = new SpriteView
			{
				Sprite = component,
				Scale = new ValueTuple<float, float>(6f, 6f),
				OverrideDirection = new Direction?(0),
				VerticalAlignment = 2,
				SizeFlagsStretchRatio = 1f
			};
			this._previewSpriteControl.AddChild(this._previewSprite);
			this._previewSpriteSide = new SpriteView
			{
				Sprite = component,
				Scale = new ValueTuple<float, float>(6f, 6f),
				OverrideDirection = new Direction?(2),
				VerticalAlignment = 2,
				SizeFlagsStretchRatio = 1f
			};
			this._previewSpriteSideControl.AddChild(this._previewSpriteSide);
			if (preferencesManager.ServerDataLoaded)
			{
				this.LoadServerData();
			}
			preferencesManager.OnServerDataLoaded += this.LoadServerData;
			this.IsDirty = false;
		}

		// Token: 0x06000A4D RID: 2637 RVA: 0x0003BE70 File Offset: 0x0003A070
		private void OnFlavorTextChange(string content)
		{
			if (this.Profile == null)
			{
				return;
			}
			this.Profile = this.Profile.WithFlavorText(content);
			this.IsDirty = true;
		}

		// Token: 0x06000A4E RID: 2638 RVA: 0x0003BE94 File Offset: 0x0003A094
		private void OnMarkingChange(MarkingSet markings)
		{
			if (this.Profile == null)
			{
				return;
			}
			this.Profile = this.Profile.WithCharacterAppearance(this.Profile.Appearance.WithMarkings(markings.GetForwardEnumerator().ToList<Marking>()));
			this._needUpdatePreview = true;
			this.IsDirty = true;
		}

		// Token: 0x06000A4F RID: 2639 RVA: 0x0003BEE4 File Offset: 0x0003A0E4
		private void OnMarkingColorChange(List<Marking> markings)
		{
			if (this.Profile == null)
			{
				return;
			}
			this.Profile = this.Profile.WithCharacterAppearance(this.Profile.Appearance.WithMarkings(markings));
			this.IsDirty = true;
		}

		// Token: 0x06000A50 RID: 2640 RVA: 0x0003BF18 File Offset: 0x0003A118
		private void OnSkinColorOnValueChanged()
		{
			if (this.Profile == null)
			{
				return;
			}
			switch (this._prototypeManager.Index<SpeciesPrototype>(this.Profile.Species).SkinColoration)
			{
			case HumanoidSkinColor.HumanToned:
			{
				if (!this._skinColor.Visible)
				{
					this._skinColor.Visible = true;
					this._rgbSkinColorContainer.Visible = false;
				}
				Color color = SkinColor.HumanSkinTone((int)this._skinColor.Value);
				this.CMarkings.CurrentSkinColor = color;
				this.Profile = this.Profile.WithCharacterAppearance(this.Profile.Appearance.WithSkinColor(color));
				break;
			}
			case HumanoidSkinColor.Hues:
				if (!this._rgbSkinColorContainer.Visible)
				{
					this._skinColor.Visible = false;
					this._rgbSkinColorContainer.Visible = true;
				}
				this.CMarkings.CurrentSkinColor = this._rgbSkinColorSelector.Color;
				this.Profile = this.Profile.WithCharacterAppearance(this.Profile.Appearance.WithSkinColor(this._rgbSkinColorSelector.Color));
				break;
			case HumanoidSkinColor.TintedHues:
			{
				if (!this._rgbSkinColorContainer.Visible)
				{
					this._skinColor.Visible = false;
					this._rgbSkinColorContainer.Visible = true;
				}
				Color color2 = SkinColor.TintedHues(this._rgbSkinColorSelector.Color);
				this.CMarkings.CurrentSkinColor = color2;
				this.Profile = this.Profile.WithCharacterAppearance(this.Profile.Appearance.WithSkinColor(color2));
				break;
			}
			}
			this.IsDirty = true;
		}

		// Token: 0x06000A51 RID: 2641 RVA: 0x0003C0A0 File Offset: 0x0003A2A0
		protected override void Dispose(bool disposing)
		{
			base.Dispose(disposing);
			if (!disposing)
			{
				return;
			}
			if (this._previewDummy != null)
			{
				this._entMan.DeleteEntity(this._previewDummy.Value);
			}
			this._preferencesManager.OnServerDataLoaded -= this.LoadServerData;
		}

		// Token: 0x06000A52 RID: 2642 RVA: 0x0003C0F4 File Offset: 0x0003A2F4
		private void RebuildSpriteView()
		{
			HumanoidCharacterProfile profile = this.Profile;
			string text = ((profile != null) ? profile.Species : null) ?? "Human";
			string dollPrototype = this._prototypeManager.Index<SpeciesPrototype>(text).DollPrototype;
			if (this._previewDummy != null)
			{
				this._entMan.DeleteEntity(this._previewDummy.Value);
			}
			this._previewDummy = new EntityUid?(this._entMan.SpawnEntity(dollPrototype, MapCoordinates.Nullspace));
			this._lastSpecies = text;
			SpriteComponent component = this._entMan.GetComponent<SpriteComponent>(this._previewDummy.Value);
			if (this._previewSprite == null)
			{
				this._previewSprite = new SpriteView
				{
					Sprite = component,
					Scale = new ValueTuple<float, float>(6f, 6f),
					OverrideDirection = new Direction?(0),
					VerticalAlignment = 2,
					SizeFlagsStretchRatio = 1f
				};
				this._previewSpriteControl.AddChild(this._previewSprite);
			}
			else
			{
				this._previewSprite.Sprite = component;
			}
			if (this._previewSpriteSide == null)
			{
				this._previewSpriteSide = new SpriteView
				{
					Sprite = component,
					Scale = new ValueTuple<float, float>(6f, 6f),
					OverrideDirection = new Direction?(2),
					VerticalAlignment = 2,
					SizeFlagsStretchRatio = 1f
				};
				this._previewSpriteSideControl.AddChild(this._previewSpriteSide);
			}
			else
			{
				this._previewSpriteSide.Sprite = component;
			}
			this._needUpdatePreview = true;
		}

		// Token: 0x06000A53 RID: 2643 RVA: 0x0003C275 File Offset: 0x0003A475
		private void LoadServerData()
		{
			this.Profile = (HumanoidCharacterProfile)this._preferencesManager.Preferences.SelectedCharacter;
			this.CharacterSlot = this._preferencesManager.Preferences.SelectedCharacterIndex;
			this._needUpdatePreview = true;
			this.UpdateControls();
		}

		// Token: 0x06000A54 RID: 2644 RVA: 0x0003C2B5 File Offset: 0x0003A4B5
		private void SetAge(int newAge)
		{
			HumanoidCharacterProfile profile = this.Profile;
			this.Profile = ((profile != null) ? profile.WithAge(newAge) : null);
			this.IsDirty = true;
		}

		// Token: 0x06000A55 RID: 2645 RVA: 0x0003C2D8 File Offset: 0x0003A4D8
		private void SetSex(Sex newSex)
		{
			HumanoidCharacterProfile profile = this.Profile;
			this.Profile = ((profile != null) ? profile.WithSex(newSex) : null);
			if (newSex != Sex.Male)
			{
				if (newSex != Sex.Female)
				{
					HumanoidCharacterProfile profile2 = this.Profile;
					this.Profile = ((profile2 != null) ? profile2.WithGender(1) : null);
				}
				else
				{
					HumanoidCharacterProfile profile3 = this.Profile;
					this.Profile = ((profile3 != null) ? profile3.WithGender(2) : null);
				}
			}
			else
			{
				HumanoidCharacterProfile profile4 = this.Profile;
				this.Profile = ((profile4 != null) ? profile4.WithGender(3) : null);
			}
			this.UpdateGenderControls();
			this.UpdateTTSVoicesControls();
			this.IsDirty = true;
		}

		// Token: 0x06000A56 RID: 2646 RVA: 0x0003C369 File Offset: 0x0003A569
		private void SetGender(Gender newGender)
		{
			HumanoidCharacterProfile profile = this.Profile;
			this.Profile = ((profile != null) ? profile.WithGender(newGender) : null);
			this.IsDirty = true;
		}

		// Token: 0x06000A57 RID: 2647 RVA: 0x0003C38B File Offset: 0x0003A58B
		private void SetVoice(string newVoice)
		{
			HumanoidCharacterProfile profile = this.Profile;
			this.Profile = ((profile != null) ? profile.WithVoice(newVoice) : null);
			this.IsDirty = true;
		}

		// Token: 0x06000A58 RID: 2648 RVA: 0x0003C3B0 File Offset: 0x0003A5B0
		private void SetSpecies(string newSpecies)
		{
			HumanoidCharacterProfile profile = this.Profile;
			this.Profile = ((profile != null) ? profile.WithSpecies(newSpecies) : null);
			this.OnSkinColorOnValueChanged();
			this.CMarkings.SetSpecies(newSpecies);
			this.UpdateSexControls();
			this.RebuildSpriteView();
			this.IsDirty = true;
			this._needUpdatePreview = true;
		}

		// Token: 0x06000A59 RID: 2649 RVA: 0x0003C402 File Offset: 0x0003A602
		private void SetName(string newName)
		{
			HumanoidCharacterProfile profile = this.Profile;
			this.Profile = ((profile != null) ? profile.WithName(newName) : null);
			this.IsDirty = true;
		}

		// Token: 0x06000A5A RID: 2650 RVA: 0x0003C424 File Offset: 0x0003A624
		private void SetClothing(ClothingPreference newClothing)
		{
			HumanoidCharacterProfile profile = this.Profile;
			this.Profile = ((profile != null) ? profile.WithClothingPreference(newClothing) : null);
			this.IsDirty = true;
		}

		// Token: 0x06000A5B RID: 2651 RVA: 0x0003C446 File Offset: 0x0003A646
		private void SetBackpack(BackpackPreference newBackpack)
		{
			HumanoidCharacterProfile profile = this.Profile;
			this.Profile = ((profile != null) ? profile.WithBackpackPreference(newBackpack) : null);
			this.IsDirty = true;
		}

		// Token: 0x06000A5C RID: 2652 RVA: 0x0003C468 File Offset: 0x0003A668
		public void Save()
		{
			this.IsDirty = false;
			if (this.Profile != null)
			{
				this._preferencesManager.UpdateCharacter(this.Profile, this.CharacterSlot);
				Action<HumanoidCharacterProfile, int> onProfileChanged = this.OnProfileChanged;
				if (onProfileChanged != null)
				{
					onProfileChanged(this.Profile, this.CharacterSlot);
				}
				this._needUpdatePreview = true;
			}
		}

		// Token: 0x170001EE RID: 494
		// (get) Token: 0x06000A5D RID: 2653 RVA: 0x0003C4BF File Offset: 0x0003A6BF
		// (set) Token: 0x06000A5E RID: 2654 RVA: 0x0003C4C7 File Offset: 0x0003A6C7
		private bool IsDirty
		{
			get
			{
				return this._isDirty;
			}
			set
			{
				this._isDirty = value;
				this._needUpdatePreview = true;
				this.UpdateSaveButton();
			}
		}

		// Token: 0x06000A5F RID: 2655 RVA: 0x0003C4DD File Offset: 0x0003A6DD
		private void UpdateNameEdit()
		{
			LineEdit nameEdit = this._nameEdit;
			HumanoidCharacterProfile profile = this.Profile;
			nameEdit.Text = (((profile != null) ? profile.Name : null) ?? "");
		}

		// Token: 0x06000A60 RID: 2656 RVA: 0x0003C505 File Offset: 0x0003A705
		private void UpdateFlavorTextEdit()
		{
			if (this._flavorTextEdit != null)
			{
				LineEdit flavorTextEdit = this._flavorTextEdit;
				HumanoidCharacterProfile profile = this.Profile;
				flavorTextEdit.Text = (((profile != null) ? profile.FlavorText : null) ?? "");
			}
		}

		// Token: 0x06000A61 RID: 2657 RVA: 0x0003C538 File Offset: 0x0003A738
		private void UpdateAgeEdit()
		{
			LineEdit ageEdit = this._ageEdit;
			HumanoidCharacterProfile profile = this.Profile;
			ageEdit.Text = (((profile != null) ? profile.Age.ToString() : null) ?? "");
		}

		// Token: 0x06000A62 RID: 2658 RVA: 0x0003C574 File Offset: 0x0003A774
		private void UpdateSexControls()
		{
			if (this.Profile == null)
			{
				return;
			}
			this._sexButton.Clear();
			List<Sex> list = new List<Sex>();
			SpeciesPrototype speciesPrototype;
			if (this._prototypeManager.TryIndex<SpeciesPrototype>(this.Profile.Species, ref speciesPrototype))
			{
				using (List<Sex>.Enumerator enumerator = speciesPrototype.Sexes.GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						Sex item = enumerator.Current;
						list.Add(item);
					}
					goto IL_71;
				}
			}
			list.Add(Sex.Unsexed);
			IL_71:
			foreach (Sex value in list)
			{
				this._sexButton.AddItem(Loc.GetString("humanoid-profile-editor-sex-" + value.ToString().ToLower() + "-text"), new int?((int)value));
			}
			if (list.Contains(this.Profile.Sex))
			{
				this._sexButton.SelectId((int)this.Profile.Sex);
				return;
			}
			this._sexButton.SelectId((int)list[0]);
		}

		// Token: 0x06000A63 RID: 2659 RVA: 0x0003C6B0 File Offset: 0x0003A8B0
		private void UpdateSkinColor()
		{
			if (this.Profile == null)
			{
				return;
			}
			switch (this._prototypeManager.Index<SpeciesPrototype>(this.Profile.Species).SkinColoration)
			{
			case HumanoidSkinColor.HumanToned:
				if (!this._skinColor.Visible)
				{
					this._skinColor.Visible = true;
					this._rgbSkinColorContainer.Visible = false;
				}
				this._skinColor.Value = SkinColor.HumanSkinToneFromColor(this.Profile.Appearance.SkinColor);
				return;
			case HumanoidSkinColor.Hues:
				if (!this._rgbSkinColorContainer.Visible)
				{
					this._skinColor.Visible = false;
					this._rgbSkinColorContainer.Visible = true;
				}
				this._rgbSkinColorSelector.Color = this.Profile.Appearance.SkinColor;
				return;
			case HumanoidSkinColor.TintedHues:
				if (!this._rgbSkinColorContainer.Visible)
				{
					this._skinColor.Visible = false;
					this._rgbSkinColorContainer.Visible = true;
				}
				this._rgbSkinColorSelector.Color = this.Profile.Appearance.SkinColor;
				return;
			default:
				return;
			}
		}

		// Token: 0x06000A64 RID: 2660 RVA: 0x0003C7BC File Offset: 0x0003A9BC
		private void UpdateMarkings()
		{
			if (this.Profile == null)
			{
				return;
			}
			this.CMarkings.SetData(this.Profile.Appearance.Markings, this.Profile.Species, this.Profile.Appearance.SkinColor);
		}

		// Token: 0x06000A65 RID: 2661 RVA: 0x0003C808 File Offset: 0x0003AA08
		private void UpdateSpecies()
		{
			if (this.Profile == null)
			{
				return;
			}
			this.CSpeciesButton.Select(this._speciesList.FindIndex((SpeciesPrototype x) => x.ID == this.Profile.Species));
		}

		// Token: 0x06000A66 RID: 2662 RVA: 0x0003C835 File Offset: 0x0003AA35
		private void UpdateGenderControls()
		{
			if (this.Profile == null)
			{
				return;
			}
			this._genderButton.SelectId(this.Profile.Gender);
		}

		// Token: 0x06000A67 RID: 2663 RVA: 0x0003C856 File Offset: 0x0003AA56
		private void UpdateClothingControls()
		{
			if (this.Profile == null)
			{
				return;
			}
			this._clothingButton.SelectId((int)this.Profile.Clothing);
		}

		// Token: 0x06000A68 RID: 2664 RVA: 0x0003C877 File Offset: 0x0003AA77
		private void UpdateBackpackControls()
		{
			if (this.Profile == null)
			{
				return;
			}
			this._backpackButton.SelectId((int)this.Profile.Backpack);
		}

		// Token: 0x06000A69 RID: 2665 RVA: 0x0003C898 File Offset: 0x0003AA98
		private void UpdateHairPickers()
		{
			if (this.Profile == null)
			{
				return;
			}
			List<Marking> list;
			if (this.Profile.Appearance.HairStyleId == "HairBald")
			{
				list = new List<Marking>();
			}
			else
			{
				list = new List<Marking>
				{
					new Marking(this.Profile.Appearance.HairStyleId, new List<Color>
					{
						this.Profile.Appearance.HairColor
					})
				};
			}
			List<Marking> markings = list;
			if (this.Profile.Appearance.FacialHairStyleId == "FacialHairShaved")
			{
				list = new List<Marking>();
			}
			else
			{
				list = new List<Marking>
				{
					new Marking(this.Profile.Appearance.FacialHairStyleId, new List<Color>
					{
						this.Profile.Appearance.FacialHairColor
					})
				};
			}
			List<Marking> markings2 = list;
			this._hairPicker.UpdateData(markings, this.Profile.Species, 1);
			this._facialHairPicker.UpdateData(markings2, this.Profile.Species, 1);
		}

		// Token: 0x06000A6A RID: 2666 RVA: 0x0003C9A2 File Offset: 0x0003ABA2
		private void UpdateEyePickers()
		{
			if (this.Profile == null)
			{
				return;
			}
			this._eyesPicker.SetData(this.Profile.Appearance.EyeColor);
		}

		// Token: 0x06000A6B RID: 2667 RVA: 0x0003C9C8 File Offset: 0x0003ABC8
		private void UpdateSaveButton()
		{
			this._saveButton.Disabled = (this.Profile == null || !this.IsDirty);
		}

		// Token: 0x06000A6C RID: 2668 RVA: 0x0003C9E9 File Offset: 0x0003ABE9
		private void UpdatePreview()
		{
			if (this.Profile == null)
			{
				return;
			}
			EntitySystem.Get<HumanoidAppearanceSystem>().LoadProfile(this._previewDummy.Value, this.Profile, null);
			LobbyCharacterPreviewPanel.GiveDummyJobClothes(this._previewDummy.Value, this.Profile);
		}

		// Token: 0x06000A6D RID: 2669 RVA: 0x0003CA28 File Offset: 0x0003AC28
		public void UpdateControls()
		{
			if (this.Profile == null)
			{
				return;
			}
			this.UpdateNameEdit();
			this.UpdateFlavorTextEdit();
			this.UpdateSexControls();
			this.UpdateGenderControls();
			this.UpdateSkinColor();
			this.UpdateSpecies();
			this.UpdateClothingControls();
			this.UpdateBackpackControls();
			this.UpdateAgeEdit();
			this.UpdateHairPickers();
			this.UpdateEyePickers();
			this.UpdateSaveButton();
			this.UpdateJobPriorities();
			this.UpdateAntagPreferences();
			this.UpdateTraitPreferences();
			this.UpdateMarkings();
			this.RebuildSpriteView();
			this.UpdateTTSVoicesControls();
			this._preferenceUnavailableButton.SelectId((int)this.Profile.PreferenceUnavailable);
		}

		// Token: 0x06000A6E RID: 2670 RVA: 0x0003CAC0 File Offset: 0x0003ACC0
		protected override void FrameUpdate(FrameEventArgs args)
		{
			base.FrameUpdate(args);
			if (this._needUpdatePreview)
			{
				this.UpdatePreview();
				this._needUpdatePreview = false;
			}
		}

		// Token: 0x06000A6F RID: 2671 RVA: 0x0003CAE0 File Offset: 0x0003ACE0
		private void UpdateJobPriorities()
		{
			foreach (HumanoidProfileEditor.JobPrioritySelector jobPrioritySelector in this._jobPriorities)
			{
				string id = jobPrioritySelector.Job.ID;
				HumanoidCharacterProfile profile = this.Profile;
				JobPriority priority = (profile != null) ? profile.JobPriorities.GetValueOrDefault(id, JobPriority.Never) : JobPriority.Never;
				jobPrioritySelector.Priority = priority;
			}
		}

		// Token: 0x06000A70 RID: 2672 RVA: 0x0003CB58 File Offset: 0x0003AD58
		private void UpdateAntagPreferences()
		{
			foreach (HumanoidProfileEditor.AntagPreferenceSelector antagPreferenceSelector in this._antagPreferences)
			{
				string id = antagPreferenceSelector.Antag.ID;
				HumanoidCharacterProfile profile = this.Profile;
				bool preference = profile != null && profile.AntagPreferences.Contains(id);
				antagPreferenceSelector.Preference = preference;
			}
		}

		// Token: 0x06000A71 RID: 2673 RVA: 0x0003CBD0 File Offset: 0x0003ADD0
		private void UpdateTraitPreferences()
		{
			foreach (HumanoidProfileEditor.TraitPreferenceSelector traitPreferenceSelector in this._traitPreferences)
			{
				string id = traitPreferenceSelector.Trait.ID;
				HumanoidCharacterProfile profile = this.Profile;
				bool preference = profile != null && profile.TraitPreferences.Contains(id);
				traitPreferenceSelector.Preference = preference;
			}
		}

		// Token: 0x06000A72 RID: 2674 RVA: 0x0003CC48 File Offset: 0x0003AE48
		private void InitializeVoice()
		{
			this._voiceList = (from o in this._prototypeManager.EnumeratePrototypes<TTSVoicePrototype>()
			where o.RoundStart
			select o).ToList<TTSVoicePrototype>();
			this._voiceButton.OnItemSelected += delegate(OptionButton.ItemSelectedEventArgs args)
			{
				this._voiceButton.SelectId(args.Id);
				this.SetVoice(this._voiceList[args.Id].ID);
			};
		}

		// Token: 0x06000A73 RID: 2675 RVA: 0x0003CCA8 File Offset: 0x0003AEA8
		private void UpdateTTSVoicesControls()
		{
			if (this.Profile == null)
			{
				return;
			}
			SponsorsManager sponsorsManager = IoCManager.Resolve<SponsorsManager>();
			this._voiceButton.Clear();
			int num = 1;
			for (int i = 0; i < this._voiceList.Count; i++)
			{
				TTSVoicePrototype ttsvoicePrototype = this._voiceList[i];
				if (HumanoidCharacterProfile.CanHaveVoice(ttsvoicePrototype, this.Profile.Sex))
				{
					string @string = Loc.GetString(ttsvoicePrototype.Name);
					this._voiceButton.AddItem(@string, new int?(i));
					if (num == 1)
					{
						num = i;
					}
					SponsorInfo sponsorInfo;
					if (ttsvoicePrototype.SponsorOnly && sponsorsManager.TryGetInfo(out sponsorInfo) && !sponsorInfo.AllowedMarkings.Contains(ttsvoicePrototype.ID))
					{
						this._voiceButton.SetItemDisabled(i, true);
					}
				}
			}
			int num2 = this._voiceList.FindIndex((TTSVoicePrototype x) => x.ID == this.Profile.Voice);
			if (!this._voiceButton.TrySelectId(num2) && this._voiceButton.TrySelectId(num))
			{
				this.SetVoice(this._voiceList[num].ID);
			}
		}

		// Token: 0x170001EF RID: 495
		// (get) Token: 0x06000A74 RID: 2676 RVA: 0x0003CDB6 File Offset: 0x0003AFB6
		[Nullable(0)]
		private LineEdit CNameEdit
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<LineEdit>("CNameEdit");
			}
		}

		// Token: 0x170001F0 RID: 496
		// (get) Token: 0x06000A75 RID: 2677 RVA: 0x0003CDC3 File Offset: 0x0003AFC3
		[Nullable(0)]
		private Button CNameRandomize
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<Button>("CNameRandomize");
			}
		}

		// Token: 0x170001F1 RID: 497
		// (get) Token: 0x06000A76 RID: 2678 RVA: 0x0003CDD0 File Offset: 0x0003AFD0
		[Nullable(0)]
		private Button CRandomizeEverything
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<Button>("CRandomizeEverything");
			}
		}

		// Token: 0x170001F2 RID: 498
		// (get) Token: 0x06000A77 RID: 2679 RVA: 0x0003CDDD File Offset: 0x0003AFDD
		[Nullable(0)]
		private RichTextLabel CWarningLabel
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<RichTextLabel>("CWarningLabel");
			}
		}

		// Token: 0x170001F3 RID: 499
		// (get) Token: 0x06000A78 RID: 2680 RVA: 0x0003CDEA File Offset: 0x0003AFEA
		[Nullable(0)]
		private Button CSaveButton
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<Button>("CSaveButton");
			}
		}

		// Token: 0x170001F4 RID: 500
		// (get) Token: 0x06000A79 RID: 2681 RVA: 0x0003CDF7 File Offset: 0x0003AFF7
		[Nullable(0)]
		private TabContainer CTabContainer
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<TabContainer>("CTabContainer");
			}
		}

		// Token: 0x170001F5 RID: 501
		// (get) Token: 0x06000A7A RID: 2682 RVA: 0x0003CE04 File Offset: 0x0003B004
		[Nullable(0)]
		private OptionButton CSexButton
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<OptionButton>("CSexButton");
			}
		}

		// Token: 0x170001F6 RID: 502
		// (get) Token: 0x06000A7B RID: 2683 RVA: 0x0003CE11 File Offset: 0x0003B011
		[Nullable(0)]
		private LineEdit CAgeEdit
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<LineEdit>("CAgeEdit");
			}
		}

		// Token: 0x170001F7 RID: 503
		// (get) Token: 0x06000A7C RID: 2684 RVA: 0x0003CE1E File Offset: 0x0003B01E
		[Nullable(0)]
		private OptionButton CPronounsButton
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<OptionButton>("CPronounsButton");
			}
		}

		// Token: 0x170001F8 RID: 504
		// (get) Token: 0x06000A7D RID: 2685 RVA: 0x0003CE2B File Offset: 0x0003B02B
		[Nullable(0)]
		private OptionButton CSpeciesButton
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<OptionButton>("CSpeciesButton");
			}
		}

		// Token: 0x170001F9 RID: 505
		// (get) Token: 0x06000A7E RID: 2686 RVA: 0x0003CE38 File Offset: 0x0003B038
		[Nullable(0)]
		private OptionButton CVoiceButton
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<OptionButton>("CVoiceButton");
			}
		}

		// Token: 0x170001FA RID: 506
		// (get) Token: 0x06000A7F RID: 2687 RVA: 0x0003CE45 File Offset: 0x0003B045
		[Nullable(0)]
		private Slider CSkin
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<Slider>("CSkin");
			}
		}

		// Token: 0x170001FB RID: 507
		// (get) Token: 0x06000A80 RID: 2688 RVA: 0x0003CE52 File Offset: 0x0003B052
		[Nullable(0)]
		private BoxContainer CRgbSkinColorContainer
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<BoxContainer>("CRgbSkinColorContainer");
			}
		}

		// Token: 0x170001FC RID: 508
		// (get) Token: 0x06000A81 RID: 2689 RVA: 0x0003CE5F File Offset: 0x0003B05F
		[Nullable(0)]
		private SingleMarkingPicker CHairStylePicker
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<SingleMarkingPicker>("CHairStylePicker");
			}
		}

		// Token: 0x170001FD RID: 509
		// (get) Token: 0x06000A82 RID: 2690 RVA: 0x0003CE6C File Offset: 0x0003B06C
		[Nullable(0)]
		private SingleMarkingPicker CFacialHairPicker
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<SingleMarkingPicker>("CFacialHairPicker");
			}
		}

		// Token: 0x170001FE RID: 510
		// (get) Token: 0x06000A83 RID: 2691 RVA: 0x0003CE79 File Offset: 0x0003B079
		[Nullable(0)]
		private OptionButton CClothingButton
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<OptionButton>("CClothingButton");
			}
		}

		// Token: 0x170001FF RID: 511
		// (get) Token: 0x06000A84 RID: 2692 RVA: 0x0003CE86 File Offset: 0x0003B086
		[Nullable(0)]
		private OptionButton CBackpackButton
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<OptionButton>("CBackpackButton");
			}
		}

		// Token: 0x17000200 RID: 512
		// (get) Token: 0x06000A85 RID: 2693 RVA: 0x0003CE93 File Offset: 0x0003B093
		[Nullable(0)]
		private EyeColorPicker CEyeColorPicker
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<EyeColorPicker>("CEyeColorPicker");
			}
		}

		// Token: 0x17000201 RID: 513
		// (get) Token: 0x06000A86 RID: 2694 RVA: 0x0003CEA0 File Offset: 0x0003B0A0
		[Nullable(0)]
		private OptionButton CPreferenceUnavailableButton
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<OptionButton>("CPreferenceUnavailableButton");
			}
		}

		// Token: 0x17000202 RID: 514
		// (get) Token: 0x06000A87 RID: 2695 RVA: 0x0003CEAD File Offset: 0x0003B0AD
		[Nullable(0)]
		private BoxContainer CJobList
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<BoxContainer>("CJobList");
			}
		}

		// Token: 0x17000203 RID: 515
		// (get) Token: 0x06000A88 RID: 2696 RVA: 0x0003CEBA File Offset: 0x0003B0BA
		[Nullable(0)]
		private BoxContainer CAntagList
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<BoxContainer>("CAntagList");
			}
		}

		// Token: 0x17000204 RID: 516
		// (get) Token: 0x06000A89 RID: 2697 RVA: 0x0003CEC7 File Offset: 0x0003B0C7
		[Nullable(0)]
		private BoxContainer CTraitsList
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<BoxContainer>("CTraitsList");
			}
		}

		// Token: 0x17000205 RID: 517
		// (get) Token: 0x06000A8A RID: 2698 RVA: 0x0003CED4 File Offset: 0x0003B0D4
		[Nullable(0)]
		private BoxContainer CMarkingsTab
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<BoxContainer>("CMarkingsTab");
			}
		}

		// Token: 0x17000206 RID: 518
		// (get) Token: 0x06000A8B RID: 2699 RVA: 0x0003CEE1 File Offset: 0x0003B0E1
		[Nullable(0)]
		private MarkingPicker CMarkings
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<MarkingPicker>("CMarkings");
			}
		}

		// Token: 0x17000207 RID: 519
		// (get) Token: 0x06000A8C RID: 2700 RVA: 0x0003CEEE File Offset: 0x0003B0EE
		[Nullable(0)]
		private Control CSpriteViewFront
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<Control>("CSpriteViewFront");
			}
		}

		// Token: 0x17000208 RID: 520
		// (get) Token: 0x06000A8D RID: 2701 RVA: 0x0003CEFB File Offset: 0x0003B0FB
		[Nullable(0)]
		private Control CSpriteViewSide
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<Control>("CSpriteViewSide");
			}
		}

		// Token: 0x06000AA8 RID: 2728 RVA: 0x0003D35C File Offset: 0x0003B55C
		static void xaml(IServiceProvider A_0, Control A_1)
		{
			XamlIlContext.Context<Control> context = new XamlIlContext.Context<Control>(A_0, null, "resm:Content.Client.Preferences.UI.HumanoidProfileEditor.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 0;
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 1;
			boxContainer2.Margin = new Thickness(10f, 10f, 10f, 10f);
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 0;
			boxContainer3.SeparationOverride = new int?(10);
			BoxContainer boxContainer4 = new BoxContainer();
			boxContainer4.Orientation = 1;
			HighlightedContainer highlightedContainer = new HighlightedContainer();
			BoxContainer boxContainer5 = new BoxContainer();
			boxContainer5.Orientation = 1;
			HighlightedContainer highlightedContainer2 = new HighlightedContainer();
			BoxContainer boxContainer6 = new BoxContainer();
			boxContainer6.Orientation = 1;
			BoxContainer boxContainer7 = new BoxContainer();
			boxContainer7.Orientation = 0;
			boxContainer7.VerticalExpand = true;
			Control control = new Label
			{
				Text = (string)new LocExtension("humanoid-profile-editor-name-label").ProvideValue()
			};
			boxContainer7.XamlChildren.Add(control);
			LineEdit lineEdit = new LineEdit();
			lineEdit.Name = "CNameEdit";
			control = lineEdit;
			context.RobustNameScope.Register("CNameEdit", control);
			lineEdit.MinSize = new Vector2(270f, 0f);
			lineEdit.VerticalAlignment = 2;
			lineEdit.Margin = new Thickness(5f, 0f, 0f, 0f);
			control = lineEdit;
			boxContainer7.XamlChildren.Add(control);
			Button button = new Button();
			button.Name = "CNameRandomize";
			control = button;
			context.RobustNameScope.Register("CNameRandomize", control);
			button.Text = (string)new LocExtension("humanoid-profile-editor-name-random-button").ProvideValue();
			control = button;
			boxContainer7.XamlChildren.Add(control);
			control = boxContainer7;
			boxContainer6.XamlChildren.Add(control);
			Button button2 = new Button();
			button2.Name = "CRandomizeEverything";
			control = button2;
			context.RobustNameScope.Register("CRandomizeEverything", control);
			button2.HorizontalAlignment = 2;
			button2.HorizontalExpand = false;
			button2.MaxWidth = 256f;
			button2.Text = (string)new LocExtension("humanoid-profile-editor-randomize-everything-button").ProvideValue();
			control = button2;
			boxContainer6.XamlChildren.Add(control);
			RichTextLabel richTextLabel = new RichTextLabel();
			richTextLabel.Name = "CWarningLabel";
			control = richTextLabel;
			context.RobustNameScope.Register("CWarningLabel", control);
			richTextLabel.HorizontalExpand = false;
			richTextLabel.VerticalExpand = true;
			richTextLabel.MaxWidth = 425f;
			richTextLabel.HorizontalAlignment = 1;
			control = richTextLabel;
			boxContainer6.XamlChildren.Add(control);
			control = boxContainer6;
			highlightedContainer2.XamlChildren.Add(control);
			control = highlightedContainer2;
			boxContainer5.XamlChildren.Add(control);
			control = boxContainer5;
			highlightedContainer.XamlChildren.Add(control);
			control = highlightedContainer;
			boxContainer4.XamlChildren.Add(control);
			control = boxContainer4;
			boxContainer3.XamlChildren.Add(control);
			BoxContainer boxContainer8 = new BoxContainer();
			boxContainer8.Orientation = 1;
			HighlightedContainer highlightedContainer3 = new HighlightedContainer();
			BoxContainer boxContainer9 = new BoxContainer();
			boxContainer9.Orientation = 0;
			control = new Button
			{
				Text = (string)new LocExtension("humanoid-profile-editor-import-button").ProvideValue(),
				Disabled = true,
				ToolTip = (string)new LocExtension("generic-not-yet-implemented").ProvideValue()
			};
			boxContainer9.XamlChildren.Add(control);
			control = new Button
			{
				Text = (string)new LocExtension("humanoid-profile-editor-export-button").ProvideValue(),
				Disabled = true,
				ToolTip = (string)new LocExtension("generic-not-yet-implemented").ProvideValue()
			};
			boxContainer9.XamlChildren.Add(control);
			control = boxContainer9;
			highlightedContainer3.XamlChildren.Add(control);
			control = highlightedContainer3;
			boxContainer8.XamlChildren.Add(control);
			HighlightedContainer highlightedContainer4 = new HighlightedContainer();
			Button button3 = new Button();
			button3.Name = "CSaveButton";
			control = button3;
			context.RobustNameScope.Register("CSaveButton", control);
			button3.Text = (string)new LocExtension("humanoid-profile-editor-save-button").ProvideValue();
			button3.HorizontalAlignment = 2;
			control = button3;
			highlightedContainer4.XamlChildren.Add(control);
			control = highlightedContainer4;
			boxContainer8.XamlChildren.Add(control);
			control = boxContainer8;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer2.XamlChildren.Add(control);
			control = new Control
			{
				MinHeight = 10f
			};
			boxContainer2.XamlChildren.Add(control);
			TabContainer tabContainer = new TabContainer();
			tabContainer.Name = "CTabContainer";
			control = tabContainer;
			context.RobustNameScope.Register("CTabContainer", control);
			tabContainer.VerticalExpand = true;
			BoxContainer boxContainer10 = new BoxContainer();
			boxContainer10.Orientation = 1;
			ScrollContainer scrollContainer = new ScrollContainer();
			scrollContainer.VerticalExpand = true;
			BoxContainer boxContainer11 = new BoxContainer();
			boxContainer11.Orientation = 1;
			BoxContainer boxContainer12 = new BoxContainer();
			boxContainer12.Orientation = 0;
			boxContainer12.SeparationOverride = new int?(10);
			HighlightedContainer highlightedContainer5 = new HighlightedContainer();
			BoxContainer boxContainer13 = new BoxContainer();
			boxContainer13.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("humanoid-profile-editor-sex-label").ProvideValue()
			};
			boxContainer13.XamlChildren.Add(control);
			OptionButton optionButton = new OptionButton();
			optionButton.Name = "CSexButton";
			control = optionButton;
			context.RobustNameScope.Register("CSexButton", control);
			control = optionButton;
			boxContainer13.XamlChildren.Add(control);
			control = boxContainer13;
			highlightedContainer5.XamlChildren.Add(control);
			control = highlightedContainer5;
			boxContainer12.XamlChildren.Add(control);
			HighlightedContainer highlightedContainer6 = new HighlightedContainer();
			BoxContainer boxContainer14 = new BoxContainer();
			boxContainer14.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("humanoid-profile-editor-age-label").ProvideValue()
			};
			boxContainer14.XamlChildren.Add(control);
			LineEdit lineEdit2 = new LineEdit();
			lineEdit2.Name = "CAgeEdit";
			control = lineEdit2;
			context.RobustNameScope.Register("CAgeEdit", control);
			lineEdit2.MinSize = new Vector2(40f, 0f);
			control = lineEdit2;
			boxContainer14.XamlChildren.Add(control);
			control = boxContainer14;
			highlightedContainer6.XamlChildren.Add(control);
			control = highlightedContainer6;
			boxContainer12.XamlChildren.Add(control);
			HighlightedContainer highlightedContainer7 = new HighlightedContainer();
			BoxContainer boxContainer15 = new BoxContainer();
			boxContainer15.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("humanoid-profile-editor-pronouns-label").ProvideValue()
			};
			boxContainer15.XamlChildren.Add(control);
			OptionButton optionButton2 = new OptionButton();
			optionButton2.Name = "CPronounsButton";
			control = optionButton2;
			context.RobustNameScope.Register("CPronounsButton", control);
			control = optionButton2;
			boxContainer15.XamlChildren.Add(control);
			control = boxContainer15;
			highlightedContainer7.XamlChildren.Add(control);
			control = highlightedContainer7;
			boxContainer12.XamlChildren.Add(control);
			control = boxContainer12;
			boxContainer11.XamlChildren.Add(control);
			BoxContainer boxContainer16 = new BoxContainer();
			boxContainer16.Orientation = 0;
			boxContainer16.SeparationOverride = new int?(10);
			HighlightedContainer highlightedContainer8 = new HighlightedContainer();
			BoxContainer boxContainer17 = new BoxContainer();
			boxContainer17.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("humanoid-profile-editor-species-label").ProvideValue()
			};
			boxContainer17.XamlChildren.Add(control);
			OptionButton optionButton3 = new OptionButton();
			optionButton3.Name = "CSpeciesButton";
			control = optionButton3;
			context.RobustNameScope.Register("CSpeciesButton", control);
			control = optionButton3;
			boxContainer17.XamlChildren.Add(control);
			control = boxContainer17;
			highlightedContainer8.XamlChildren.Add(control);
			control = highlightedContainer8;
			boxContainer16.XamlChildren.Add(control);
			HighlightedContainer highlightedContainer9 = new HighlightedContainer();
			BoxContainer boxContainer18 = new BoxContainer();
			boxContainer18.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("humanoid-profile-editor-voice-label").ProvideValue()
			};
			boxContainer18.XamlChildren.Add(control);
			OptionButton optionButton4 = new OptionButton();
			optionButton4.Name = "CVoiceButton";
			control = optionButton4;
			context.RobustNameScope.Register("CVoiceButton", control);
			control = optionButton4;
			boxContainer18.XamlChildren.Add(control);
			control = boxContainer18;
			highlightedContainer9.XamlChildren.Add(control);
			control = highlightedContainer9;
			boxContainer16.XamlChildren.Add(control);
			control = boxContainer16;
			boxContainer11.XamlChildren.Add(control);
			HighlightedContainer highlightedContainer10 = new HighlightedContainer();
			BoxContainer boxContainer19 = new BoxContainer();
			boxContainer19.HorizontalExpand = true;
			boxContainer19.Orientation = 1;
			control = new Label
			{
				Text = (string)new LocExtension("humanoid-profile-editor-skin-color-label").ProvideValue()
			};
			boxContainer19.XamlChildren.Add(control);
			Slider slider = new Slider();
			slider.HorizontalExpand = true;
			slider.Name = "CSkin";
			control = slider;
			context.RobustNameScope.Register("CSkin", control);
			slider.MinValue = 0f;
			slider.MaxValue = 100f;
			slider.Value = 20f;
			control = slider;
			boxContainer19.XamlChildren.Add(control);
			BoxContainer boxContainer20 = new BoxContainer();
			boxContainer20.Name = "CRgbSkinColorContainer";
			control = boxContainer20;
			context.RobustNameScope.Register("CRgbSkinColorContainer", control);
			boxContainer20.Visible = false;
			boxContainer20.Orientation = 1;
			boxContainer20.HorizontalExpand = true;
			control = boxContainer20;
			boxContainer19.XamlChildren.Add(control);
			control = boxContainer19;
			highlightedContainer10.XamlChildren.Add(control);
			control = highlightedContainer10;
			boxContainer11.XamlChildren.Add(control);
			HighlightedContainer highlightedContainer11 = new HighlightedContainer();
			BoxContainer boxContainer21 = new BoxContainer();
			boxContainer21.Orientation = 0;
			SingleMarkingPicker singleMarkingPicker = new SingleMarkingPicker();
			singleMarkingPicker.Name = "CHairStylePicker";
			control = singleMarkingPicker;
			context.RobustNameScope.Register("CHairStylePicker", control);
			singleMarkingPicker.Category = MarkingCategories.Hair;
			control = singleMarkingPicker;
			boxContainer21.XamlChildren.Add(control);
			SingleMarkingPicker singleMarkingPicker2 = new SingleMarkingPicker();
			singleMarkingPicker2.Name = "CFacialHairPicker";
			control = singleMarkingPicker2;
			context.RobustNameScope.Register("CFacialHairPicker", control);
			singleMarkingPicker2.Category = MarkingCategories.FacialHair;
			control = singleMarkingPicker2;
			boxContainer21.XamlChildren.Add(control);
			control = boxContainer21;
			highlightedContainer11.XamlChildren.Add(control);
			control = highlightedContainer11;
			boxContainer11.XamlChildren.Add(control);
			HighlightedContainer highlightedContainer12 = new HighlightedContainer();
			BoxContainer boxContainer22 = new BoxContainer();
			boxContainer22.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("humanoid-profile-editor-clothing-label").ProvideValue()
			};
			boxContainer22.XamlChildren.Add(control);
			OptionButton optionButton5 = new OptionButton();
			optionButton5.Name = "CClothingButton";
			control = optionButton5;
			context.RobustNameScope.Register("CClothingButton", control);
			control = optionButton5;
			boxContainer22.XamlChildren.Add(control);
			control = boxContainer22;
			highlightedContainer12.XamlChildren.Add(control);
			control = highlightedContainer12;
			boxContainer11.XamlChildren.Add(control);
			HighlightedContainer highlightedContainer13 = new HighlightedContainer();
			BoxContainer boxContainer23 = new BoxContainer();
			boxContainer23.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("humanoid-profile-editor-backpack-label").ProvideValue()
			};
			boxContainer23.XamlChildren.Add(control);
			OptionButton optionButton6 = new OptionButton();
			optionButton6.Name = "CBackpackButton";
			control = optionButton6;
			context.RobustNameScope.Register("CBackpackButton", control);
			control = optionButton6;
			boxContainer23.XamlChildren.Add(control);
			control = boxContainer23;
			highlightedContainer13.XamlChildren.Add(control);
			control = highlightedContainer13;
			boxContainer11.XamlChildren.Add(control);
			HighlightedContainer highlightedContainer14 = new HighlightedContainer();
			BoxContainer boxContainer24 = new BoxContainer();
			boxContainer24.Orientation = 1;
			control = new Label
			{
				Text = (string)new LocExtension("humanoid-profile-editor-eyes-label").ProvideValue()
			};
			boxContainer24.XamlChildren.Add(control);
			EyeColorPicker eyeColorPicker = new EyeColorPicker();
			eyeColorPicker.Name = "CEyeColorPicker";
			control = eyeColorPicker;
			context.RobustNameScope.Register("CEyeColorPicker", control);
			control = eyeColorPicker;
			boxContainer24.XamlChildren.Add(control);
			control = boxContainer24;
			highlightedContainer14.XamlChildren.Add(control);
			control = highlightedContainer14;
			boxContainer11.XamlChildren.Add(control);
			control = boxContainer11;
			scrollContainer.XamlChildren.Add(control);
			control = scrollContainer;
			boxContainer10.XamlChildren.Add(control);
			control = boxContainer10;
			tabContainer.XamlChildren.Add(control);
			BoxContainer boxContainer25 = new BoxContainer();
			boxContainer25.Orientation = 1;
			OptionButton optionButton7 = new OptionButton();
			optionButton7.Name = "CPreferenceUnavailableButton";
			control = optionButton7;
			context.RobustNameScope.Register("CPreferenceUnavailableButton", control);
			control = optionButton7;
			boxContainer25.XamlChildren.Add(control);
			ScrollContainer scrollContainer2 = new ScrollContainer();
			scrollContainer2.VerticalExpand = true;
			BoxContainer boxContainer26 = new BoxContainer();
			boxContainer26.Name = "CJobList";
			control = boxContainer26;
			context.RobustNameScope.Register("CJobList", control);
			boxContainer26.Orientation = 1;
			control = boxContainer26;
			scrollContainer2.XamlChildren.Add(control);
			control = scrollContainer2;
			boxContainer25.XamlChildren.Add(control);
			control = boxContainer25;
			tabContainer.XamlChildren.Add(control);
			BoxContainer boxContainer27 = new BoxContainer();
			boxContainer27.Orientation = 1;
			boxContainer27.Margin = new Thickness(10f, 10f, 10f, 10f);
			ScrollContainer scrollContainer3 = new ScrollContainer();
			scrollContainer3.VerticalExpand = true;
			BoxContainer boxContainer28 = new BoxContainer();
			boxContainer28.Name = "CAntagList";
			control = boxContainer28;
			context.RobustNameScope.Register("CAntagList", control);
			boxContainer28.Orientation = 1;
			control = boxContainer28;
			scrollContainer3.XamlChildren.Add(control);
			control = scrollContainer3;
			boxContainer27.XamlChildren.Add(control);
			control = boxContainer27;
			tabContainer.XamlChildren.Add(control);
			BoxContainer boxContainer29 = new BoxContainer();
			boxContainer29.Orientation = 1;
			boxContainer29.Margin = new Thickness(10f, 10f, 10f, 10f);
			ScrollContainer scrollContainer4 = new ScrollContainer();
			scrollContainer4.VerticalExpand = true;
			BoxContainer boxContainer30 = new BoxContainer();
			boxContainer30.Name = "CTraitsList";
			control = boxContainer30;
			context.RobustNameScope.Register("CTraitsList", control);
			boxContainer30.Orientation = 1;
			control = boxContainer30;
			scrollContainer4.XamlChildren.Add(control);
			control = scrollContainer4;
			boxContainer29.XamlChildren.Add(control);
			control = boxContainer29;
			tabContainer.XamlChildren.Add(control);
			BoxContainer boxContainer31 = new BoxContainer();
			boxContainer31.Name = "CMarkingsTab";
			control = boxContainer31;
			context.RobustNameScope.Register("CMarkingsTab", control);
			boxContainer31.Orientation = 1;
			boxContainer31.Margin = new Thickness(10f, 10f, 10f, 10f);
			ScrollContainer scrollContainer5 = new ScrollContainer();
			scrollContainer5.VerticalExpand = true;
			MarkingPicker markingPicker = new MarkingPicker();
			markingPicker.Name = "CMarkings";
			control = markingPicker;
			context.RobustNameScope.Register("CMarkings", control);
			markingPicker.IgnoreCategories = "Hair,FacialHair";
			control = markingPicker;
			scrollContainer5.XamlChildren.Add(control);
			control = scrollContainer5;
			boxContainer31.XamlChildren.Add(control);
			control = boxContainer31;
			tabContainer.XamlChildren.Add(control);
			control = tabContainer;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer32 = new BoxContainer();
			boxContainer32.Orientation = 1;
			boxContainer32.VerticalExpand = true;
			boxContainer32.HorizontalExpand = true;
			Control control2 = new Control();
			control2.Name = "CSpriteViewFront";
			control = control2;
			context.RobustNameScope.Register("CSpriteViewFront", control);
			control2.VerticalExpand = true;
			control2.SizeFlagsStretchRatio = 1f;
			control = control2;
			boxContainer32.XamlChildren.Add(control);
			Control control3 = new Control();
			control3.Name = "CSpriteViewSide";
			control = control3;
			context.RobustNameScope.Register("CSpriteViewSide", control);
			control3.VerticalExpand = true;
			control3.SizeFlagsStretchRatio = 1f;
			control = control3;
			boxContainer32.XamlChildren.Add(control);
			control = boxContainer32;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06000AA9 RID: 2729 RVA: 0x0003E574 File Offset: 0x0003C774
		private static void !XamlIlPopulateTrampoline(HumanoidProfileEditor A_0)
		{
			HumanoidProfileEditor.Populate:Content.Client.Preferences.UI.HumanoidProfileEditor.xaml(null, A_0);
		}

		// Token: 0x0400050D RID: 1293
		private readonly IRobustRandom _random;

		// Token: 0x0400050E RID: 1294
		private readonly IPrototypeManager _prototypeManager;

		// Token: 0x0400050F RID: 1295
		private readonly IClientPreferencesManager _preferencesManager;

		// Token: 0x04000510 RID: 1296
		private readonly IEntityManager _entMan;

		// Token: 0x04000511 RID: 1297
		private readonly IConfigurationManager _configurationManager;

		// Token: 0x04000512 RID: 1298
		private readonly MarkingManager _markingManager;

		// Token: 0x04000513 RID: 1299
		private LineEdit _flavorTextEdit;

		// Token: 0x04000514 RID: 1300
		private readonly List<HumanoidProfileEditor.JobPrioritySelector> _jobPriorities;

		// Token: 0x04000515 RID: 1301
		private readonly Dictionary<string, BoxContainer> _jobCategories;

		// Token: 0x04000516 RID: 1302
		private readonly List<SpeciesPrototype> _speciesList;

		// Token: 0x04000517 RID: 1303
		private readonly List<HumanoidProfileEditor.AntagPreferenceSelector> _antagPreferences;

		// Token: 0x04000518 RID: 1304
		private readonly List<HumanoidProfileEditor.TraitPreferenceSelector> _traitPreferences;

		// Token: 0x04000519 RID: 1305
		private EntityUid? _previewDummy;

		// Token: 0x0400051A RID: 1306
		[Nullable(2)]
		private string _lastSpecies;

		// Token: 0x0400051B RID: 1307
		[Nullable(2)]
		private SpriteView _previewSprite;

		// Token: 0x0400051C RID: 1308
		[Nullable(2)]
		private SpriteView _previewSpriteSide;

		// Token: 0x0400051D RID: 1309
		private ColorSelectorSliders _rgbSkinColorSelector;

		// Token: 0x0400051E RID: 1310
		private bool _isDirty;

		// Token: 0x0400051F RID: 1311
		private bool _needUpdatePreview;

		// Token: 0x04000520 RID: 1312
		public int CharacterSlot;

		// Token: 0x04000521 RID: 1313
		[Nullable(2)]
		public HumanoidCharacterProfile Profile;

		// Token: 0x04000522 RID: 1314
		private MarkingSet _markingSet = new MarkingSet();

		// Token: 0x04000524 RID: 1316
		private List<TTSVoicePrototype> _voiceList;

		// Token: 0x0200018B RID: 395
		[Nullable(0)]
		private sealed class JobPrioritySelector : Control
		{
			// Token: 0x17000209 RID: 521
			// (get) Token: 0x06000AAA RID: 2730 RVA: 0x0003E57D File Offset: 0x0003C77D
			public JobPrototype Job { get; }

			// Token: 0x1700020A RID: 522
			// (get) Token: 0x06000AAB RID: 2731 RVA: 0x0003E585 File Offset: 0x0003C785
			// (set) Token: 0x06000AAC RID: 2732 RVA: 0x0003E592 File Offset: 0x0003C792
			public JobPriority Priority
			{
				get
				{
					return (JobPriority)this._optionButton.SelectedValue;
				}
				set
				{
					this._optionButton.SelectByValue((int)value);
				}
			}

			// Token: 0x14000048 RID: 72
			// (add) Token: 0x06000AAD RID: 2733 RVA: 0x0003E5A0 File Offset: 0x0003C7A0
			// (remove) Token: 0x06000AAE RID: 2734 RVA: 0x0003E5D8 File Offset: 0x0003C7D8
			[Nullable(2)]
			[method: NullableContext(2)]
			[Nullable(2)]
			public event Action<JobPriority> PriorityChanged;

			// Token: 0x06000AAF RID: 2735 RVA: 0x0003E610 File Offset: 0x0003C810
			public JobPrioritySelector(JobPrototype job)
			{
				this.Job = job;
				this._optionButton = new RadioOptions<int>(0)
				{
					FirstButtonStyle = "OpenRight",
					ButtonStyle = "OpenBoth",
					LastButtonStyle = "OpenLeft"
				};
				this._optionButton.GenerateItem = new Func<string, int, Button>(this.GenerateButton);
				this._optionButton.AddItem(Loc.GetString("humanoid-profile-editor-job-priority-high-button"), 3, null);
				this._optionButton.AddItem(Loc.GetString("humanoid-profile-editor-job-priority-medium-button"), 2, null);
				this._optionButton.AddItem(Loc.GetString("humanoid-profile-editor-job-priority-low-button"), 1, null);
				this._optionButton.AddItem(Loc.GetString("humanoid-profile-editor-job-priority-never-button"), 0, null);
				this._optionButton.OnItemSelected += delegate(RadioOptionItemSelectedEventArgs<int> args)
				{
					this._optionButton.Select(args.Id);
					Action<JobPriority> priorityChanged = this.PriorityChanged;
					if (priorityChanged == null)
					{
						return;
					}
					priorityChanged(this.Priority);
				};
				TextureRect textureRect = new TextureRect
				{
					TextureScale = new ValueTuple<float, float>(2f, 2f),
					Stretch = 4
				};
				if (job.Icon != null)
				{
					SpriteSpecifier.Rsi rsi = new SpriteSpecifier.Rsi(new ResourcePath("/Textures/Interface/Misc/job_icons.rsi", "/"), job.Icon);
					textureRect.Texture = SpriteSpecifierExt.Frame0(rsi);
				}
				this._requirementsLabel = new Label
				{
					Text = Loc.GetString("role-timer-locked"),
					Visible = true,
					HorizontalAlignment = 2,
					StyleClasses = 
					{
						"LabelSubText"
					}
				};
				StripeBack stripeBack = new StripeBack();
				stripeBack.Visible = false;
				stripeBack.HorizontalExpand = true;
				stripeBack.TooltipDelay = new float?(0.2f);
				stripeBack.MouseFilter = 0;
				stripeBack.Children.Add(this._requirementsLabel);
				this._lockStripe = stripeBack;
				this._jobTitle = new Label
				{
					Margin = new Thickness(5f, 0f, 5f, 0f),
					Text = job.LocalizedName,
					MinSize = new ValueTuple<float, float>(180f, 0f),
					MouseFilter = 0
				};
				if (job.LocalizedDescription != null)
				{
					this._jobTitle.ToolTip = job.LocalizedDescription;
					this._jobTitle.TooltipDelay = new float?(0.2f);
				}
				BoxContainer boxContainer = new BoxContainer();
				boxContainer.Orientation = 0;
				boxContainer.Children.Add(textureRect);
				boxContainer.Children.Add(this._jobTitle);
				boxContainer.Children.Add(this._optionButton);
				boxContainer.Children.Add(this._lockStripe);
				base.AddChild(boxContainer);
			}

			// Token: 0x06000AB0 RID: 2736 RVA: 0x0003E88B File Offset: 0x0003CA8B
			public void LockRequirements(string requirements)
			{
				this._lockStripe.ToolTip = requirements;
				this._lockStripe.Visible = true;
				this._optionButton.Visible = false;
			}

			// Token: 0x06000AB1 RID: 2737 RVA: 0x0003E8B1 File Offset: 0x0003CAB1
			public void UnlockRequirements()
			{
				this._requirementsLabel.Visible = false;
				this._lockStripe.Visible = false;
				this._optionButton.Visible = true;
			}

			// Token: 0x06000AB2 RID: 2738 RVA: 0x0003E8D7 File Offset: 0x0003CAD7
			private Button GenerateButton(string text, int value)
			{
				return new Button
				{
					Text = text,
					MinWidth = 90f
				};
			}

			// Token: 0x04000526 RID: 1318
			private readonly RadioOptions<int> _optionButton;

			// Token: 0x04000528 RID: 1320
			private StripeBack _lockStripe;

			// Token: 0x04000529 RID: 1321
			private Label _requirementsLabel;

			// Token: 0x0400052A RID: 1322
			private Label _jobTitle;
		}

		// Token: 0x0200018C RID: 396
		[Nullable(0)]
		private sealed class AntagPreferenceSelector : Control
		{
			// Token: 0x1700020B RID: 523
			// (get) Token: 0x06000AB4 RID: 2740 RVA: 0x0003E919 File Offset: 0x0003CB19
			public AntagPrototype Antag { get; }

			// Token: 0x1700020C RID: 524
			// (get) Token: 0x06000AB5 RID: 2741 RVA: 0x0003E921 File Offset: 0x0003CB21
			// (set) Token: 0x06000AB6 RID: 2742 RVA: 0x0003E92E File Offset: 0x0003CB2E
			public bool Preference
			{
				get
				{
					return this._checkBox.Pressed;
				}
				set
				{
					this._checkBox.Pressed = value;
				}
			}

			// Token: 0x14000049 RID: 73
			// (add) Token: 0x06000AB7 RID: 2743 RVA: 0x0003E93C File Offset: 0x0003CB3C
			// (remove) Token: 0x06000AB8 RID: 2744 RVA: 0x0003E974 File Offset: 0x0003CB74
			[Nullable(2)]
			[method: NullableContext(2)]
			[Nullable(2)]
			public event Action<bool> PreferenceChanged;

			// Token: 0x06000AB9 RID: 2745 RVA: 0x0003E9AC File Offset: 0x0003CBAC
			public AntagPreferenceSelector(AntagPrototype antag)
			{
				this.Antag = antag;
				this._checkBox = new CheckBox
				{
					Text = Loc.GetString(antag.Name)
				};
				this._checkBox.OnToggled += this.OnCheckBoxToggled;
				if (antag.Description != null)
				{
					this._checkBox.ToolTip = Loc.GetString(antag.Description);
					this._checkBox.TooltipDelay = new float?(0.2f);
				}
				BoxContainer boxContainer = new BoxContainer();
				boxContainer.Orientation = 0;
				boxContainer.Children.Add(this._checkBox);
				base.AddChild(boxContainer);
			}

			// Token: 0x06000ABA RID: 2746 RVA: 0x0003EA4F File Offset: 0x0003CC4F
			private void OnCheckBoxToggled(BaseButton.ButtonToggledEventArgs args)
			{
				Action<bool> preferenceChanged = this.PreferenceChanged;
				if (preferenceChanged == null)
				{
					return;
				}
				preferenceChanged(this.Preference);
			}

			// Token: 0x0400052C RID: 1324
			private readonly CheckBox _checkBox;
		}

		// Token: 0x0200018D RID: 397
		[Nullable(0)]
		private sealed class TraitPreferenceSelector : Control
		{
			// Token: 0x1700020D RID: 525
			// (get) Token: 0x06000ABB RID: 2747 RVA: 0x0003EA67 File Offset: 0x0003CC67
			public TraitPrototype Trait { get; }

			// Token: 0x1700020E RID: 526
			// (get) Token: 0x06000ABC RID: 2748 RVA: 0x0003EA6F File Offset: 0x0003CC6F
			// (set) Token: 0x06000ABD RID: 2749 RVA: 0x0003EA7C File Offset: 0x0003CC7C
			public bool Preference
			{
				get
				{
					return this._checkBox.Pressed;
				}
				set
				{
					this._checkBox.Pressed = value;
				}
			}

			// Token: 0x1400004A RID: 74
			// (add) Token: 0x06000ABE RID: 2750 RVA: 0x0003EA8C File Offset: 0x0003CC8C
			// (remove) Token: 0x06000ABF RID: 2751 RVA: 0x0003EAC4 File Offset: 0x0003CCC4
			[Nullable(2)]
			[method: NullableContext(2)]
			[Nullable(2)]
			public event Action<bool> PreferenceChanged;

			// Token: 0x06000AC0 RID: 2752 RVA: 0x0003EAFC File Offset: 0x0003CCFC
			public TraitPreferenceSelector(TraitPrototype trait)
			{
				this.Trait = trait;
				this._checkBox = new CheckBox
				{
					Text = Loc.GetString(trait.Name)
				};
				this._checkBox.OnToggled += this.OnCheckBoxToggled;
				string description = trait.Description;
				if (description != null)
				{
					this._checkBox.ToolTip = Loc.GetString(description);
					this._checkBox.TooltipDelay = new float?(0.2f);
				}
				BoxContainer boxContainer = new BoxContainer();
				boxContainer.Orientation = 0;
				boxContainer.Children.Add(this._checkBox);
				base.AddChild(boxContainer);
			}

			// Token: 0x06000AC1 RID: 2753 RVA: 0x0003EB9C File Offset: 0x0003CD9C
			private void OnCheckBoxToggled(BaseButton.ButtonToggledEventArgs args)
			{
				Action<bool> preferenceChanged = this.PreferenceChanged;
				if (preferenceChanged == null)
				{
					return;
				}
				preferenceChanged(this.Preference);
			}

			// Token: 0x0400052F RID: 1327
			private readonly CheckBox _checkBox;
		}
	}
}
