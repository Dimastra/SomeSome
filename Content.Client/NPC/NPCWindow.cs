using System;
using CompiledRobustXaml;
using Content.Client.UserInterface.Controls;
using Content.Shared.NPC;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Maths;

namespace Content.Client.NPC
{
	// Token: 0x0200020E RID: 526
	[GenerateTypedNameReferences]
	public sealed class NPCWindow : FancyWindow
	{
		// Token: 0x06000DBB RID: 3515 RVA: 0x00052CF4 File Offset: 0x00050EF4
		public NPCWindow()
		{
			NPCWindow.!XamlIlPopulateTrampoline(this);
			IoCManager.InjectDependencies<NPCWindow>(this);
			IEntitySystemManager entitySystemManager = IoCManager.Resolve<IEntitySystemManager>();
			PathfindingSystem path = entitySystemManager.GetEntitySystem<PathfindingSystem>();
			this.PathCrumbs.Pressed = ((path.Modes & PathfindingDebugMode.Breadcrumbs) > PathfindingDebugMode.None);
			this.PathPolys.Pressed = ((path.Modes & PathfindingDebugMode.Polys) > PathfindingDebugMode.None);
			this.PathNeighbors.Pressed = ((path.Modes & PathfindingDebugMode.PolyNeighbors) > PathfindingDebugMode.None);
			this.PathRouteCosts.Pressed = ((path.Modes & PathfindingDebugMode.RouteCosts) > PathfindingDebugMode.None);
			this.PathRoutes.Pressed = ((path.Modes & PathfindingDebugMode.Routes) > PathfindingDebugMode.None);
			this.PathCrumbs.OnToggled += delegate(BaseButton.ButtonToggledEventArgs args)
			{
				path.Modes ^= PathfindingDebugMode.Breadcrumbs;
			};
			this.PathPolys.OnToggled += delegate(BaseButton.ButtonToggledEventArgs args)
			{
				path.Modes ^= PathfindingDebugMode.Polys;
			};
			this.PathNeighbors.OnToggled += delegate(BaseButton.ButtonToggledEventArgs args)
			{
				path.Modes ^= PathfindingDebugMode.PolyNeighbors;
			};
			this.PathRouteCosts.OnToggled += delegate(BaseButton.ButtonToggledEventArgs args)
			{
				path.Modes ^= PathfindingDebugMode.RouteCosts;
			};
			this.PathRoutes.OnToggled += delegate(BaseButton.ButtonToggledEventArgs args)
			{
				path.Modes ^= PathfindingDebugMode.Routes;
			};
		}

		// Token: 0x170002E7 RID: 743
		// (get) Token: 0x06000DBC RID: 3516 RVA: 0x00052E2C File Offset: 0x0005102C
		private BoxContainer Options
		{
			get
			{
				return base.FindControl<BoxContainer>("Options");
			}
		}

		// Token: 0x170002E8 RID: 744
		// (get) Token: 0x06000DBD RID: 3517 RVA: 0x00052E39 File Offset: 0x00051039
		private BoxContainer NPCBox
		{
			get
			{
				return base.FindControl<BoxContainer>("NPCBox");
			}
		}

		// Token: 0x170002E9 RID: 745
		// (get) Token: 0x06000DBE RID: 3518 RVA: 0x00052E46 File Offset: 0x00051046
		private CheckBox NPCPath
		{
			get
			{
				return base.FindControl<CheckBox>("NPCPath");
			}
		}

		// Token: 0x170002EA RID: 746
		// (get) Token: 0x06000DBF RID: 3519 RVA: 0x00052E53 File Offset: 0x00051053
		private CheckBox NPCThonk
		{
			get
			{
				return base.FindControl<CheckBox>("NPCThonk");
			}
		}

		// Token: 0x170002EB RID: 747
		// (get) Token: 0x06000DC0 RID: 3520 RVA: 0x00052E60 File Offset: 0x00051060
		private BoxContainer PathfinderBox
		{
			get
			{
				return base.FindControl<BoxContainer>("PathfinderBox");
			}
		}

		// Token: 0x170002EC RID: 748
		// (get) Token: 0x06000DC1 RID: 3521 RVA: 0x00052E6D File Offset: 0x0005106D
		private CheckBox PathCrumbs
		{
			get
			{
				return base.FindControl<CheckBox>("PathCrumbs");
			}
		}

		// Token: 0x170002ED RID: 749
		// (get) Token: 0x06000DC2 RID: 3522 RVA: 0x00052E7A File Offset: 0x0005107A
		private CheckBox PathPolys
		{
			get
			{
				return base.FindControl<CheckBox>("PathPolys");
			}
		}

		// Token: 0x170002EE RID: 750
		// (get) Token: 0x06000DC3 RID: 3523 RVA: 0x00052E87 File Offset: 0x00051087
		private CheckBox PathNeighbors
		{
			get
			{
				return base.FindControl<CheckBox>("PathNeighbors");
			}
		}

		// Token: 0x170002EF RID: 751
		// (get) Token: 0x06000DC4 RID: 3524 RVA: 0x00052E94 File Offset: 0x00051094
		private CheckBox PathRouteCosts
		{
			get
			{
				return base.FindControl<CheckBox>("PathRouteCosts");
			}
		}

		// Token: 0x170002F0 RID: 752
		// (get) Token: 0x06000DC5 RID: 3525 RVA: 0x00052EA1 File Offset: 0x000510A1
		private CheckBox PathRoutes
		{
			get
			{
				return base.FindControl<CheckBox>("PathRoutes");
			}
		}

		// Token: 0x06000DC6 RID: 3526 RVA: 0x00052EB0 File Offset: 0x000510B0
		static void xaml(IServiceProvider A_0, FancyWindow A_1)
		{
			XamlIlContext.Context<FancyWindow> context = new XamlIlContext.Context<FancyWindow>(A_0, null, "resm:Content.Client.NPC.NPCWindow.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Title = "NPC debug";
			A_1.MinSize = new Vector2(200f, 200f);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Name = "Options";
			Control control = boxContainer;
			context.RobustNameScope.Register("Options", control);
			boxContainer.Orientation = 1;
			StripeBack stripeBack = new StripeBack();
			control = new Label
			{
				Text = "NPC",
				HorizontalAlignment = 2
			};
			stripeBack.XamlChildren.Add(control);
			control = stripeBack;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Name = "NPCBox";
			control = boxContainer2;
			context.RobustNameScope.Register("NPCBox", control);
			boxContainer2.Orientation = 1;
			CheckBox checkBox = new CheckBox();
			checkBox.Name = "NPCPath";
			control = checkBox;
			context.RobustNameScope.Register("NPCPath", control);
			checkBox.Text = "Path";
			control = checkBox;
			boxContainer2.XamlChildren.Add(control);
			CheckBox checkBox2 = new CheckBox();
			checkBox2.Name = "NPCThonk";
			control = checkBox2;
			context.RobustNameScope.Register("NPCThonk", control);
			checkBox2.Text = "Thonk";
			control = checkBox2;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			StripeBack stripeBack2 = new StripeBack();
			control = new Label
			{
				Text = "Pathfinder",
				HorizontalAlignment = 2
			};
			stripeBack2.XamlChildren.Add(control);
			control = stripeBack2;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Name = "PathfinderBox";
			control = boxContainer3;
			context.RobustNameScope.Register("PathfinderBox", control);
			boxContainer3.Orientation = 1;
			CheckBox checkBox3 = new CheckBox();
			checkBox3.Name = "PathCrumbs";
			control = checkBox3;
			context.RobustNameScope.Register("PathCrumbs", control);
			checkBox3.Text = "Breadcrumbs";
			control = checkBox3;
			boxContainer3.XamlChildren.Add(control);
			CheckBox checkBox4 = new CheckBox();
			checkBox4.Name = "PathPolys";
			control = checkBox4;
			context.RobustNameScope.Register("PathPolys", control);
			checkBox4.Text = "Polygons";
			control = checkBox4;
			boxContainer3.XamlChildren.Add(control);
			CheckBox checkBox5 = new CheckBox();
			checkBox5.Name = "PathNeighbors";
			control = checkBox5;
			context.RobustNameScope.Register("PathNeighbors", control);
			checkBox5.Text = "Neighbors";
			control = checkBox5;
			boxContainer3.XamlChildren.Add(control);
			CheckBox checkBox6 = new CheckBox();
			checkBox6.Name = "PathRouteCosts";
			control = checkBox6;
			context.RobustNameScope.Register("PathRouteCosts", control);
			checkBox6.Text = "Route costs";
			control = checkBox6;
			boxContainer3.XamlChildren.Add(control);
			CheckBox checkBox7 = new CheckBox();
			checkBox7.Name = "PathRoutes";
			control = checkBox7;
			context.RobustNameScope.Register("PathRoutes", control);
			checkBox7.Text = "Routes";
			control = checkBox7;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06000DC7 RID: 3527 RVA: 0x000532B8 File Offset: 0x000514B8
		private static void !XamlIlPopulateTrampoline(NPCWindow A_0)
		{
			NPCWindow.Populate:Content.Client.NPC.NPCWindow.xaml(null, A_0);
		}
	}
}
