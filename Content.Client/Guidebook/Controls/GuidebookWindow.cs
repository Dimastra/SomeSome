using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.Administration.UI.CustomControls;
using Content.Client.UserInterface.Controls;
using Content.Client.UserInterface.Controls.FancyTree;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.ContentPack;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Log;
using Robust.Shared.Maths;

namespace Content.Client.Guidebook.Controls
{
	// Token: 0x020002F2 RID: 754
	[GenerateTypedNameReferences]
	public sealed class GuidebookWindow : FancyWindow
	{
		// Token: 0x060012EC RID: 4844 RVA: 0x0007097F File Offset: 0x0006EB7F
		public GuidebookWindow()
		{
			GuidebookWindow.!XamlIlPopulateTrampoline(this);
			IoCManager.InjectDependencies<GuidebookWindow>(this);
			this.Tree.OnSelectedItemChanged += this.OnSelectionChanged;
		}

		// Token: 0x060012ED RID: 4845 RVA: 0x000709B8 File Offset: 0x0006EBB8
		[NullableContext(2)]
		private void OnSelectionChanged(TreeItem item)
		{
			if (item != null)
			{
				GuideEntry guideEntry = item.Metadata as GuideEntry;
				if (guideEntry != null)
				{
					this.ShowGuide(guideEntry);
					return;
				}
			}
			this.ClearSelectedGuide();
		}

		// Token: 0x060012EE RID: 4846 RVA: 0x000709E5 File Offset: 0x0006EBE5
		public void ClearSelectedGuide()
		{
			this.Placeholder.Visible = true;
			this.EntryContainer.Visible = false;
			this.EntryContainer.RemoveAllChildren();
		}

		// Token: 0x060012EF RID: 4847 RVA: 0x00070A0C File Offset: 0x0006EC0C
		[NullableContext(1)]
		private void ShowGuide(GuideEntry entry)
		{
			this.Scroll.SetScrollValue(default(Vector2));
			this.Placeholder.Visible = false;
			this.EntryContainer.Visible = true;
			this.EntryContainer.RemoveAllChildren();
			using (StreamReader streamReader = this._resourceManager.ContentFileReadText(entry.Text))
			{
				if (!this._parsingMan.TryAddMarkup(this.EntryContainer, streamReader.ReadToEnd(), true))
				{
					this.EntryContainer.AddChild(new Label
					{
						Text = "ERROR: Failed to parse document."
					});
					Logger.Error("Failed to parse contents of guide document " + entry.Id + ".");
				}
			}
		}

		// Token: 0x060012F0 RID: 4848 RVA: 0x00070AD0 File Offset: 0x0006ECD0
		[NullableContext(2)]
		public void UpdateGuides([Nullable(1)] Dictionary<string, GuideEntry> entries, [Nullable(new byte[]
		{
			2,
			1
		})] List<string> rootEntries = null, string forceRoot = null, string selected = null)
		{
			this._entries = entries;
			this.RepopulateTree(rootEntries, forceRoot);
			this.ClearSelectedGuide();
			this.Split.State = 0;
			if (entries.Count == 1)
			{
				this.TreeBox.Visible = false;
				this.Split.ResizeMode = -1;
				selected = entries.Keys.First<string>();
			}
			else
			{
				this.TreeBox.Visible = true;
				this.Split.ResizeMode = 0;
			}
			if (selected != null)
			{
				TreeItem treeItem = this.Tree.Items.FirstOrDefault(delegate(TreeItem x)
				{
					GuideEntry guideEntry = x.Metadata as GuideEntry;
					return guideEntry != null && guideEntry.Id == selected;
				});
				this.Tree.SetSelectedIndex((treeItem != null) ? new int?(treeItem.Index) : null);
			}
		}

		// Token: 0x060012F1 RID: 4849 RVA: 0x00070BA4 File Offset: 0x0006EDA4
		[NullableContext(1)]
		private IEnumerable<GuideEntry> GetSortedRootEntries([Nullable(new byte[]
		{
			2,
			1
		})] List<string> rootEntries)
		{
			if (rootEntries == null)
			{
				HashSet<string> hashSet = new HashSet<string>(this._entries.Keys);
				foreach (GuideEntry guideEntry in this._entries.Values)
				{
					hashSet.ExceptWith(guideEntry.Children);
				}
				rootEntries = hashSet.ToList<string>();
			}
			return from x in rootEntries
			select this._entries[x] into x
			orderby x.Priority, Loc.GetString(x.Name)
			select x;
		}

		// Token: 0x060012F2 RID: 4850 RVA: 0x00070C78 File Offset: 0x0006EE78
		[NullableContext(2)]
		private void RepopulateTree([Nullable(new byte[]
		{
			2,
			1
		})] List<string> roots = null, string forcedRoot = null)
		{
			this.Tree.Clear();
			HashSet<string> addedEntries = new HashSet<string>();
			TreeItem parent = (forcedRoot == null) ? null : this.AddEntry(forcedRoot, null, addedEntries);
			foreach (GuideEntry guideEntry in this.GetSortedRootEntries(roots))
			{
				this.AddEntry(guideEntry.Id, parent, addedEntries);
			}
			this.Tree.SetAllExpanded(true);
		}

		// Token: 0x060012F3 RID: 4851 RVA: 0x00070CFC File Offset: 0x0006EEFC
		[NullableContext(1)]
		[return: Nullable(2)]
		private TreeItem AddEntry(string id, [Nullable(2)] TreeItem parent, HashSet<string> addedEntries)
		{
			GuideEntry guideEntry;
			if (!this._entries.TryGetValue(id, out guideEntry))
			{
				return null;
			}
			if (!addedEntries.Add(id))
			{
				Logger.Error("Adding duplicate guide entry: " + id);
				return null;
			}
			TreeItem treeItem = this.Tree.AddItem(parent);
			treeItem.Metadata = guideEntry;
			string @string = Loc.GetString(guideEntry.Name);
			treeItem.Label.Text = @string;
			foreach (string id2 in guideEntry.Children)
			{
				this.AddEntry(id2, treeItem, addedEntries);
			}
			return treeItem;
		}

		// Token: 0x170003F4 RID: 1012
		// (get) Token: 0x060012F4 RID: 4852 RVA: 0x00070DB0 File Offset: 0x0006EFB0
		private SplitContainer Split
		{
			get
			{
				return base.FindControl<SplitContainer>("Split");
			}
		}

		// Token: 0x170003F5 RID: 1013
		// (get) Token: 0x060012F5 RID: 4853 RVA: 0x00070DBD File Offset: 0x0006EFBD
		private BoxContainer TreeBox
		{
			get
			{
				return base.FindControl<BoxContainer>("TreeBox");
			}
		}

		// Token: 0x170003F6 RID: 1014
		// (get) Token: 0x060012F6 RID: 4854 RVA: 0x00070DCA File Offset: 0x0006EFCA
		private FancyTree Tree
		{
			get
			{
				return base.FindControl<FancyTree>("Tree");
			}
		}

		// Token: 0x170003F7 RID: 1015
		// (get) Token: 0x060012F7 RID: 4855 RVA: 0x00070DD7 File Offset: 0x0006EFD7
		private ScrollContainer Scroll
		{
			get
			{
				return base.FindControl<ScrollContainer>("Scroll");
			}
		}

		// Token: 0x170003F8 RID: 1016
		// (get) Token: 0x060012F8 RID: 4856 RVA: 0x0001485F File Offset: 0x00012A5F
		private BoxContainer EntryContainer
		{
			get
			{
				return base.FindControl<BoxContainer>("EntryContainer");
			}
		}

		// Token: 0x170003F9 RID: 1017
		// (get) Token: 0x060012F9 RID: 4857 RVA: 0x00070DE4 File Offset: 0x0006EFE4
		private BoxContainer Placeholder
		{
			get
			{
				return base.FindControl<BoxContainer>("Placeholder");
			}
		}

		// Token: 0x060012FB RID: 4859 RVA: 0x00070E00 File Offset: 0x0006F000
		static void xaml(IServiceProvider A_0, FancyWindow A_1)
		{
			XamlIlContext.Context<FancyWindow> context = new XamlIlContext.Context<FancyWindow>(A_0, null, "resm:Content.Client.Guidebook.Controls.GuidebookWindow.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.SetSize = new Vector2(750f, 700f);
			A_1.MinSize = new Vector2(100f, 200f);
			A_1.Resizable = true;
			A_1.Title = (string)new LocExtension("guidebook-window-title").ProvideValue();
			SplitContainer splitContainer = new SplitContainer();
			splitContainer.Orientation = 0;
			splitContainer.HorizontalExpand = true;
			splitContainer.Name = "Split";
			Control control = splitContainer;
			context.RobustNameScope.Register("Split", control);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 0;
			boxContainer.Name = "TreeBox";
			control = boxContainer;
			context.RobustNameScope.Register("TreeBox", control);
			FancyTree fancyTree = new FancyTree();
			fancyTree.Name = "Tree";
			control = fancyTree;
			context.RobustNameScope.Register("Tree", control);
			fancyTree.VerticalExpand = true;
			fancyTree.HorizontalExpand = true;
			control = fancyTree;
			boxContainer.XamlChildren.Add(control);
			VSeparator vseparator = new VSeparator();
			string item = "LowDivider";
			vseparator.StyleClasses.Add(item);
			vseparator.Margin = new Thickness(0f, -2f, 0f, -2f);
			control = vseparator;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			splitContainer.XamlChildren.Add(control);
			ScrollContainer scrollContainer = new ScrollContainer();
			scrollContainer.Name = "Scroll";
			control = scrollContainer;
			context.RobustNameScope.Register("Scroll", control);
			scrollContainer.HScrollEnabled = false;
			scrollContainer.HorizontalExpand = true;
			scrollContainer.VerticalExpand = true;
			Control control2 = new Control();
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 1;
			boxContainer2.Name = "EntryContainer";
			control = boxContainer2;
			context.RobustNameScope.Register("EntryContainer", control);
			boxContainer2.Margin = new Thickness(5f, 5f, 5f, 5f);
			boxContainer2.Visible = false;
			control = boxContainer2;
			control2.XamlChildren.Add(control);
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 1;
			boxContainer3.Name = "Placeholder";
			control = boxContainer3;
			context.RobustNameScope.Register("Placeholder", control);
			boxContainer3.Margin = new Thickness(5f, 5f, 5f, 5f);
			control = new Label
			{
				HorizontalAlignment = 2,
				VerticalAlignment = 2,
				Text = (string)new LocExtension("guidebook-placeholder-text").ProvideValue()
			};
			boxContainer3.XamlChildren.Add(control);
			control = new Label
			{
				HorizontalAlignment = 2,
				VerticalAlignment = 2,
				Text = (string)new LocExtension("guidebook-placeholder-text-2").ProvideValue()
			};
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			control2.XamlChildren.Add(control);
			control = control2;
			scrollContainer.XamlChildren.Add(control);
			control = scrollContainer;
			splitContainer.XamlChildren.Add(control);
			control = splitContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x060012FC RID: 4860 RVA: 0x000711F5 File Offset: 0x0006F3F5
		private static void !XamlIlPopulateTrampoline(GuidebookWindow A_0)
		{
			GuidebookWindow.Populate:Content.Client.Guidebook.Controls.GuidebookWindow.xaml(null, A_0);
		}

		// Token: 0x0400097D RID: 2429
		[Nullable(1)]
		[Dependency]
		private readonly IResourceManager _resourceManager;

		// Token: 0x0400097E RID: 2430
		[Nullable(1)]
		[Dependency]
		private readonly DocumentParsingManager _parsingMan;

		// Token: 0x0400097F RID: 2431
		[Nullable(1)]
		private Dictionary<string, GuideEntry> _entries = new Dictionary<string, GuideEntry>();
	}
}
