using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.White.Sponsors;
using Content.Shared.Humanoid.Markings;
using Content.Shared.White.Sponsors;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.Utility;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;

namespace Content.Client.Humanoid
{
	// Token: 0x020002D6 RID: 726
	[GenerateTypedNameReferences]
	public sealed class SingleMarkingPicker : BoxContainer
	{
		// Token: 0x170003E3 RID: 995
		// (get) Token: 0x0600124F RID: 4687 RVA: 0x0006D1B6 File Offset: 0x0006B3B6
		// (set) Token: 0x06001250 RID: 4688 RVA: 0x0006D1EC File Offset: 0x0006B3EC
		private int Slot
		{
			get
			{
				if (this._markings == null || this._markings.Count == 0)
				{
					this._slot = -1;
				}
				else if (this._slot == -1)
				{
					this._slot = 0;
				}
				return this._slot;
			}
			set
			{
				if (this._markings == null || this._markings.Count == 0)
				{
					this._slot = -1;
					return;
				}
				this._slot = value;
				this._ignoreItemSelected = true;
				foreach (ItemList.Item item in this.MarkingList)
				{
					item.Selected = ((string)item.Metadata == this._markings[this._slot].MarkingId);
				}
				this._ignoreItemSelected = false;
				this.PopulateColors();
			}
		}

		// Token: 0x170003E4 RID: 996
		// (get) Token: 0x06001251 RID: 4689 RVA: 0x0006D294 File Offset: 0x0006B494
		// (set) Token: 0x06001252 RID: 4690 RVA: 0x0006D29C File Offset: 0x0006B49C
		public MarkingCategories Category
		{
			get
			{
				return this._category;
			}
			set
			{
				this._category = value;
				Label categoryName = this.CategoryName;
				DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(18, 1);
				defaultInterpolatedStringHandler.AppendLiteral("markings-category-");
				defaultInterpolatedStringHandler.AppendFormatted<MarkingCategories>(this._category);
				categoryName.Text = Loc.GetString(defaultInterpolatedStringHandler.ToStringAndClear());
				if (!string.IsNullOrEmpty(this._species))
				{
					this.PopulateList();
				}
			}
		}

		// Token: 0x170003E5 RID: 997
		// (get) Token: 0x06001253 RID: 4691 RVA: 0x0006D2FD File Offset: 0x0006B4FD
		private int PointsLeft
		{
			get
			{
				if (this._markings == null)
				{
					return 0;
				}
				if (this._totalPoints < 0)
				{
					return -1;
				}
				return this._totalPoints - this._markings.Count;
			}
		}

		// Token: 0x170003E6 RID: 998
		// (get) Token: 0x06001254 RID: 4692 RVA: 0x0006D326 File Offset: 0x0006B526
		private int PointsUsed
		{
			get
			{
				List<Marking> markings = this._markings;
				if (markings == null)
				{
					return 0;
				}
				return markings.Count;
			}
		}

		// Token: 0x06001255 RID: 4693 RVA: 0x0006D33C File Offset: 0x0006B53C
		public SingleMarkingPicker()
		{
			SingleMarkingPicker.!XamlIlPopulateTrampoline(this);
			IoCManager.InjectDependencies<SingleMarkingPicker>(this);
			this.MarkingList.OnItemSelected += this.SelectMarking;
			this.AddButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this.OnSlotAdd();
			};
			this.SlotSelector.OnItemSelected += delegate(OptionButton.ItemSelectedEventArgs args)
			{
				this.Slot = args.Button.SelectedId;
			};
			this.RemoveButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this.OnSlotRemove(this._slot);
			};
		}

		// Token: 0x06001256 RID: 4694 RVA: 0x0006D3C0 File Offset: 0x0006B5C0
		[NullableContext(1)]
		public void UpdateData(List<Marking> markings, string species, int totalPoints)
		{
			this._markings = markings;
			this._species = species;
			this._totalPoints = totalPoints;
			this._markingPrototypeCache = this._markingManager.MarkingsByCategoryAndSpecies(this.Category, this._species);
			base.Visible = (this._markingPrototypeCache.Count != 0);
			if (this._markingPrototypeCache.Count == 0)
			{
				return;
			}
			this.PopulateList();
			this.PopulateColors();
			this.PopulateSlotSelector();
		}

		// Token: 0x06001257 RID: 4695 RVA: 0x0006D434 File Offset: 0x0006B634
		public void PopulateList()
		{
			if (string.IsNullOrEmpty(this._species))
			{
				throw new ArgumentException("Tried to populate marking list without a set species!");
			}
			if (this._markingPrototypeCache == null)
			{
				this._markingPrototypeCache = this._markingManager.MarkingsByCategoryAndSpecies(this.Category, this._species);
			}
			this.MarkingSelectorContainer.Visible = (this._markings != null && this._markings.Count != 0);
			if (this._markings == null || this._markings.Count == 0)
			{
				return;
			}
			this.MarkingList.Clear();
			foreach (KeyValuePair<string, MarkingPrototype> keyValuePair in this._markingPrototypeCache)
			{
				string text;
				MarkingPrototype markingPrototype;
				keyValuePair.Deconstruct(out text, out markingPrototype);
				string text2 = text;
				MarkingPrototype markingPrototype2 = markingPrototype;
				ItemList.Item item = this.MarkingList.AddItem(Loc.GetString("marking-" + text2), SpriteSpecifierExt.Frame0(markingPrototype2.Sprites[0]), true);
				item.Metadata = markingPrototype2.ID;
				if (markingPrototype2.SponsorOnly)
				{
					item.Disabled = true;
					SponsorInfo sponsorInfo;
					if (this._sponsorsManager.TryGetInfo(out sponsorInfo))
					{
						item.Disabled = !sponsorInfo.AllowedMarkings.Contains(markingPrototype2.ID);
					}
				}
				if (this._markings[this.Slot].MarkingId == text2)
				{
					this._ignoreItemSelected = true;
					item.Selected = true;
					this._ignoreItemSelected = false;
				}
			}
		}

		// Token: 0x06001258 RID: 4696 RVA: 0x0006D5C0 File Offset: 0x0006B7C0
		private void PopulateColors()
		{
			MarkingPrototype markingPrototype;
			if (this._markings == null || this._markings.Count == 0 || !this._markingManager.TryGetMarking(this._markings[this.Slot], out markingPrototype))
			{
				return;
			}
			Marking marking = this._markings[this.Slot];
			this.ColorSelectorContainer.DisposeAllChildren();
			this.ColorSelectorContainer.RemoveAllChildren();
			if (marking.MarkingColors.Count != markingPrototype.Sprites.Count)
			{
				marking = new Marking(marking.MarkingId, markingPrototype.Sprites.Count);
			}
			for (int i = 0; i < marking.MarkingColors.Count; i++)
			{
				ColorSelectorSliders colorSelectorSliders = new ColorSelectorSliders
				{
					HorizontalExpand = true
				};
				colorSelectorSliders.Color = marking.MarkingColors[i];
				int colorIndex = i;
				ColorSelectorSliders colorSelectorSliders2 = colorSelectorSliders;
				colorSelectorSliders2.OnColorChanged = (Action<Color>)Delegate.Combine(colorSelectorSliders2.OnColorChanged, new Action<Color>(delegate(Color color)
				{
					marking.SetColor(colorIndex, color);
					this.OnColorChanged(new ValueTuple<int, Marking>(this._slot, marking));
				}));
				this.ColorSelectorContainer.AddChild(colorSelectorSliders);
			}
		}

		// Token: 0x06001259 RID: 4697 RVA: 0x0006D708 File Offset: 0x0006B908
		[NullableContext(1)]
		private void SelectMarking(ItemList.ItemListSelectedEventArgs args)
		{
			if (this._ignoreItemSelected)
			{
				return;
			}
			string text = (string)this.MarkingList.get_IndexItem(args.ItemIndex).Metadata;
			MarkingPrototype markingPrototype;
			if (!this._markingManager.Markings.TryGetValue(text, out markingPrototype))
			{
				throw new ArgumentException("Attempted to select non-existent marking.");
			}
			Marking marking = this._markings[this.Slot];
			this._markings[this.Slot] = markingPrototype.AsMarking();
			int num = 0;
			while (num < this._markings[this.Slot].MarkingColors.Count && num < marking.MarkingColors.Count)
			{
				this._markings[this.Slot].SetColor(num, marking.MarkingColors[num]);
				num++;
			}
			this.PopulateColors();
			this.OnMarkingSelect(new ValueTuple<int, string>(this._slot, text));
		}

		// Token: 0x0600125A RID: 4698 RVA: 0x0006D7F8 File Offset: 0x0006B9F8
		private void PopulateSlotSelector()
		{
			this.SlotSelector.Visible = (this.Slot >= 0);
			this.AddButton.HorizontalExpand = (this.Slot < 0);
			this.RemoveButton.HorizontalExpand = (this.Slot < 0);
			this.AddButton.Disabled = (this.PointsLeft == 0 && this._totalPoints > -1);
			this.RemoveButton.Disabled = (this.PointsUsed == 0);
			this.SlotSelector.Clear();
			if (this.Slot < 0)
			{
				return;
			}
			for (int i = 0; i < this.PointsUsed; i++)
			{
				OptionButton slotSelector = this.SlotSelector;
				DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(5, 1);
				defaultInterpolatedStringHandler.AppendLiteral("Slot ");
				defaultInterpolatedStringHandler.AppendFormatted<int>(i + 1);
				slotSelector.AddItem(defaultInterpolatedStringHandler.ToStringAndClear(), new int?(i));
				if (i == this._slot)
				{
					this.SlotSelector.SelectId(i);
				}
			}
		}

		// Token: 0x170003E7 RID: 999
		// (get) Token: 0x0600125B RID: 4699 RVA: 0x0006D8E9 File Offset: 0x0006BAE9
		private Label CategoryName
		{
			get
			{
				return base.FindControl<Label>("CategoryName");
			}
		}

		// Token: 0x170003E8 RID: 1000
		// (get) Token: 0x0600125C RID: 4700 RVA: 0x0006D8F6 File Offset: 0x0006BAF6
		private BoxContainer SlotSelectorContainer
		{
			get
			{
				return base.FindControl<BoxContainer>("SlotSelectorContainer");
			}
		}

		// Token: 0x170003E9 RID: 1001
		// (get) Token: 0x0600125D RID: 4701 RVA: 0x0006D903 File Offset: 0x0006BB03
		private OptionButton SlotSelector
		{
			get
			{
				return base.FindControl<OptionButton>("SlotSelector");
			}
		}

		// Token: 0x170003EA RID: 1002
		// (get) Token: 0x0600125E RID: 4702 RVA: 0x0006D910 File Offset: 0x0006BB10
		private Button AddButton
		{
			get
			{
				return base.FindControl<Button>("AddButton");
			}
		}

		// Token: 0x170003EB RID: 1003
		// (get) Token: 0x0600125F RID: 4703 RVA: 0x0006D91D File Offset: 0x0006BB1D
		private Button RemoveButton
		{
			get
			{
				return base.FindControl<Button>("RemoveButton");
			}
		}

		// Token: 0x170003EC RID: 1004
		// (get) Token: 0x06001260 RID: 4704 RVA: 0x0006D92A File Offset: 0x0006BB2A
		private BoxContainer MarkingSelectorContainer
		{
			get
			{
				return base.FindControl<BoxContainer>("MarkingSelectorContainer");
			}
		}

		// Token: 0x170003ED RID: 1005
		// (get) Token: 0x06001261 RID: 4705 RVA: 0x0006D937 File Offset: 0x0006BB37
		private ItemList MarkingList
		{
			get
			{
				return base.FindControl<ItemList>("MarkingList");
			}
		}

		// Token: 0x170003EE RID: 1006
		// (get) Token: 0x06001262 RID: 4706 RVA: 0x0006D944 File Offset: 0x0006BB44
		private BoxContainer ColorSelectorContainer
		{
			get
			{
				return base.FindControl<BoxContainer>("ColorSelectorContainer");
			}
		}

		// Token: 0x06001266 RID: 4710 RVA: 0x0006D984 File Offset: 0x0006BB84
		static void xaml(IServiceProvider A_0, BoxContainer A_1)
		{
			XamlIlContext.Context<BoxContainer> context = new XamlIlContext.Context<BoxContainer>(A_0, null, "resm:Content.Client.Humanoid.SingleMarkingPicker.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Orientation = 1;
			A_1.HorizontalExpand = true;
			A_1.VerticalExpand = true;
			Label label = new Label();
			label.Name = "CategoryName";
			Control control = label;
			context.RobustNameScope.Register("CategoryName", control);
			control = label;
			A_1.XamlChildren.Add(control);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Name = "SlotSelectorContainer";
			control = boxContainer;
			context.RobustNameScope.Register("SlotSelectorContainer", control);
			boxContainer.HorizontalExpand = true;
			OptionButton optionButton = new OptionButton();
			optionButton.Name = "SlotSelector";
			control = optionButton;
			context.RobustNameScope.Register("SlotSelector", control);
			optionButton.HorizontalExpand = true;
			control = optionButton;
			boxContainer.XamlChildren.Add(control);
			Button button = new Button();
			button.Name = "AddButton";
			control = button;
			context.RobustNameScope.Register("AddButton", control);
			button.Text = (string)new LocExtension("marking-slot-add").ProvideValue();
			control = button;
			boxContainer.XamlChildren.Add(control);
			Button button2 = new Button();
			button2.Name = "RemoveButton";
			control = button2;
			context.RobustNameScope.Register("RemoveButton", control);
			button2.Text = (string)new LocExtension("marking-slot-remove").ProvideValue();
			control = button2;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Name = "MarkingSelectorContainer";
			control = boxContainer2;
			context.RobustNameScope.Register("MarkingSelectorContainer", control);
			boxContainer2.Orientation = 1;
			boxContainer2.HorizontalExpand = true;
			boxContainer2.VerticalExpand = true;
			ScrollContainer scrollContainer = new ScrollContainer();
			scrollContainer.MinHeight = 500f;
			scrollContainer.VerticalExpand = true;
			scrollContainer.HorizontalExpand = true;
			ItemList itemList = new ItemList();
			itemList.Name = "MarkingList";
			control = itemList;
			context.RobustNameScope.Register("MarkingList", control);
			itemList.VerticalExpand = true;
			control = itemList;
			scrollContainer.XamlChildren.Add(control);
			control = scrollContainer;
			boxContainer2.XamlChildren.Add(control);
			ScrollContainer scrollContainer2 = new ScrollContainer();
			scrollContainer2.MinHeight = 200f;
			scrollContainer2.HorizontalExpand = true;
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Name = "ColorSelectorContainer";
			control = boxContainer3;
			context.RobustNameScope.Register("ColorSelectorContainer", control);
			boxContainer3.HorizontalExpand = true;
			control = boxContainer3;
			scrollContainer2.XamlChildren.Add(control);
			control = scrollContainer2;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06001267 RID: 4711 RVA: 0x0006DD01 File Offset: 0x0006BF01
		private static void !XamlIlPopulateTrampoline(SingleMarkingPicker A_0)
		{
			SingleMarkingPicker.Populate:Content.Client.Humanoid.SingleMarkingPicker.xaml(null, A_0);
		}

		// Token: 0x0400090F RID: 2319
		[Nullable(1)]
		[Dependency]
		private MarkingManager _markingManager;

		// Token: 0x04000910 RID: 2320
		[Nullable(1)]
		[Dependency]
		private readonly SponsorsManager _sponsorsManager;

		// Token: 0x04000911 RID: 2321
		[TupleElementNames(new string[]
		{
			"slot",
			"id"
		})]
		[Nullable(new byte[]
		{
			2,
			0,
			1
		})]
		public Action<ValueTuple<int, string>> OnMarkingSelect;

		// Token: 0x04000912 RID: 2322
		[Nullable(2)]
		public Action<int> OnSlotRemove;

		// Token: 0x04000913 RID: 2323
		[Nullable(2)]
		public Action OnSlotAdd;

		// Token: 0x04000914 RID: 2324
		[TupleElementNames(new string[]
		{
			"slot",
			"marking"
		})]
		[Nullable(new byte[]
		{
			2,
			0,
			1
		})]
		public Action<ValueTuple<int, Marking>> OnColorChanged;

		// Token: 0x04000915 RID: 2325
		private int _slot = -1;

		// Token: 0x04000916 RID: 2326
		private int _totalPoints;

		// Token: 0x04000917 RID: 2327
		private bool _ignoreItemSelected;

		// Token: 0x04000918 RID: 2328
		private MarkingCategories _category;

		// Token: 0x04000919 RID: 2329
		[Nullable(new byte[]
		{
			2,
			1,
			1
		})]
		private IReadOnlyDictionary<string, MarkingPrototype> _markingPrototypeCache;

		// Token: 0x0400091A RID: 2330
		[Nullable(2)]
		private string _species;

		// Token: 0x0400091B RID: 2331
		[Nullable(new byte[]
		{
			2,
			1
		})]
		private List<Marking> _markings;
	}
}
