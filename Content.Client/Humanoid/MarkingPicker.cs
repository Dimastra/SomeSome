using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.White.Sponsors;
using Content.Shared.Humanoid.Markings;
using Content.Shared.Humanoid.Prototypes;
using Content.Shared.White.Sponsors;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.Utility;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.Humanoid
{
	// Token: 0x020002D4 RID: 724
	[GenerateTypedNameReferences]
	public sealed class MarkingPicker : Control
	{
		// Token: 0x170003D7 RID: 983
		// (get) Token: 0x06001224 RID: 4644 RVA: 0x0006BE6C File Offset: 0x0006A06C
		// (set) Token: 0x06001225 RID: 4645 RVA: 0x0006BE7C File Offset: 0x0006A07C
		[Nullable(1)]
		public string IgnoreCategories
		{
			[NullableContext(1)]
			get
			{
				return string.Join<MarkingCategories>(',', this._ignoreCategories);
			}
			[NullableContext(1)]
			set
			{
				this._ignoreCategories.Clear();
				string[] array = value.Split(',', StringSplitOptions.None);
				for (int i = 0; i < array.Length; i++)
				{
					MarkingCategories item;
					if (Enum.TryParse<MarkingCategories>(array[i], out item))
					{
						this._ignoreCategories.Add(item);
					}
				}
				this.SetupCategoryButtons();
			}
		}

		// Token: 0x170003D8 RID: 984
		// (get) Token: 0x06001226 RID: 4646 RVA: 0x0006BECB File Offset: 0x0006A0CB
		// (set) Token: 0x06001227 RID: 4647 RVA: 0x0006BED3 File Offset: 0x0006A0D3
		public bool Forced { get; set; }

		// Token: 0x170003D9 RID: 985
		// (get) Token: 0x06001228 RID: 4648 RVA: 0x0006BEDC File Offset: 0x0006A0DC
		// (set) Token: 0x06001229 RID: 4649 RVA: 0x0006BEE4 File Offset: 0x0006A0E4
		public bool IgnoreSpecies
		{
			get
			{
				return this._ignoreSpecies;
			}
			set
			{
				this._ignoreSpecies = value;
				this.Populate();
			}
		}

		// Token: 0x0600122A RID: 4650 RVA: 0x0006BEF4 File Offset: 0x0006A0F4
		[NullableContext(1)]
		public void SetData(List<Marking> newMarkings, string species, Color skinColor)
		{
			string markingPoints = this._prototypeManager.Index<SpeciesPrototype>(species).MarkingPoints;
			this._currentMarkings = new MarkingSet(newMarkings, markingPoints, this._markingManager, null);
			if (!this.IgnoreSpecies)
			{
				this._currentMarkings.FilterSpecies(species, null, null);
			}
			this._currentSpecies = species;
			this.CurrentSkinColor = skinColor;
			this.Populate();
			this.PopulateUsed();
		}

		// Token: 0x0600122B RID: 4651 RVA: 0x0006BF57 File Offset: 0x0006A157
		[NullableContext(1)]
		public void SetData(MarkingSet set, string species, Color skinColor)
		{
			this._currentMarkings = set;
			if (!this.IgnoreSpecies)
			{
				this._currentMarkings.FilterSpecies(species, null, null);
			}
			this._currentSpecies = species;
			this.CurrentSkinColor = skinColor;
			this.Populate();
			this.PopulateUsed();
		}

		// Token: 0x0600122C RID: 4652 RVA: 0x0006BF90 File Offset: 0x0006A190
		public void SetSkinColor(Color color)
		{
			this.CurrentSkinColor = color;
		}

		// Token: 0x0600122D RID: 4653 RVA: 0x0006BF9C File Offset: 0x0006A19C
		public MarkingPicker()
		{
			MarkingPicker.!XamlIlPopulateTrampoline(this);
			IoCManager.InjectDependencies<MarkingPicker>(this);
			this.SetupCategoryButtons();
			this.CMarkingCategoryButton.OnItemSelected += this.OnCategoryChange;
			this.CMarkingsUnused.OnItemSelected += delegate(ItemList.ItemListSelectedEventArgs item)
			{
				this._selectedUnusedMarking = this.CMarkingsUnused.get_IndexItem(item.ItemIndex);
			};
			this.CMarkingAdd.OnPressed += delegate(BaseButton.ButtonEventArgs args)
			{
				this.MarkingAdd();
			};
			this.CMarkingsUsed.OnItemSelected += this.OnUsedMarkingSelected;
			this.CMarkingRemove.OnPressed += delegate(BaseButton.ButtonEventArgs args)
			{
				this.MarkingRemove();
			};
			this.CMarkingRankUp.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this.SwapMarkingUp();
			};
			this.CMarkingRankDown.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this.SwapMarkingDown();
			};
		}

		// Token: 0x0600122E RID: 4654 RVA: 0x0006C0B4 File Offset: 0x0006A2B4
		private void SetupCategoryButtons()
		{
			this.CMarkingCategoryButton.Clear();
			for (int i = 0; i < this._markingCategories.Count; i++)
			{
				if (!this._ignoreCategories.Contains(this._markingCategories[i]))
				{
					this.CMarkingCategoryButton.AddItem(Loc.GetString("markings-category-" + this._markingCategories[i].ToString()), new int?(i));
				}
			}
			this.CMarkingCategoryButton.SelectId(this._markingCategories.IndexOf(this._selectedMarkingCategory));
		}

		// Token: 0x0600122F RID: 4655 RVA: 0x0006C151 File Offset: 0x0006A351
		[NullableContext(1)]
		private string GetMarkingName(MarkingPrototype marking)
		{
			return Loc.GetString("marking-" + marking.ID);
		}

		// Token: 0x06001230 RID: 4656 RVA: 0x0006C168 File Offset: 0x0006A368
		[NullableContext(1)]
		private List<string> GetMarkingStateNames(MarkingPrototype marking)
		{
			List<string> list = new List<string>();
			foreach (SpriteSpecifier spriteSpecifier in marking.Sprites)
			{
				SpriteSpecifier.Rsi rsi = spriteSpecifier as SpriteSpecifier.Rsi;
				if (rsi == null)
				{
					SpriteSpecifier.Texture texture = spriteSpecifier as SpriteSpecifier.Texture;
					if (texture != null)
					{
						list.Add(Loc.GetString("marking-" + marking.ID + "-" + texture.TexturePath.Filename));
					}
				}
				else
				{
					list.Add(Loc.GetString("marking-" + marking.ID + "-" + rsi.RsiState));
				}
			}
			return list;
		}

		// Token: 0x06001231 RID: 4657 RVA: 0x0006C228 File Offset: 0x0006A428
		public void Populate()
		{
			this.CMarkingsUnused.Clear();
			this._selectedUnusedMarking = null;
			foreach (MarkingPrototype markingPrototype in (this.IgnoreSpecies ? this._markingManager.MarkingsByCategory(this._selectedMarkingCategory) : this._markingManager.MarkingsByCategoryAndSpecies(this._selectedMarkingCategory, this._currentSpecies)).Values)
			{
				Marking marking;
				if (!this._currentMarkings.TryGetMarking(this._selectedMarkingCategory, markingPrototype.ID, out marking))
				{
					ItemList.Item item = this.CMarkingsUnused.AddItem(this.GetMarkingName(markingPrototype) ?? "", SpriteSpecifierExt.Frame0(markingPrototype.Sprites[0]), true);
					item.Metadata = markingPrototype;
					if (markingPrototype.SponsorOnly)
					{
						item.Disabled = true;
						SponsorInfo sponsorInfo;
						if (this._sponsorsManager.TryGetInfo(out sponsorInfo))
						{
							item.Disabled = !sponsorInfo.AllowedMarkings.Contains(markingPrototype.ID);
						}
					}
				}
			}
			this.CMarkingPoints.Visible = (this._currentMarkings.PointsLeft(this._selectedMarkingCategory) != -1);
		}

		// Token: 0x06001232 RID: 4658 RVA: 0x0006C364 File Offset: 0x0006A564
		public void PopulateUsed()
		{
			this.CMarkingsUsed.Clear();
			this.CMarkingColors.Visible = false;
			this._selectedMarking = null;
			if (!this.IgnoreSpecies)
			{
				this._currentMarkings.FilterSpecies(this._currentSpecies, this._markingManager, null);
			}
			foreach (Marking marking in this._currentMarkings.GetReverseEnumerator(this._selectedMarkingCategory))
			{
				MarkingPrototype markingPrototype;
				if (this._markingManager.TryGetMarking(marking, out markingPrototype))
				{
					string text = marking.Forced ? "marking-used-forced" : "marking-used";
					ValueTuple<string, object>[] array = new ValueTuple<string, object>[2];
					array[0] = new ValueTuple<string, object>("marking-name", this.GetMarkingName(markingPrototype) ?? "");
					int num = 1;
					string item = "marking-category";
					DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(18, 1);
					defaultInterpolatedStringHandler.AppendLiteral("markings-category-");
					defaultInterpolatedStringHandler.AppendFormatted<MarkingCategories>(markingPrototype.MarkingCategory);
					array[num] = new ValueTuple<string, object>(item, Loc.GetString(defaultInterpolatedStringHandler.ToStringAndClear()));
					string @string = Loc.GetString(text, array);
					ItemList.Item item2 = new ItemList.Item(this.CMarkingsUsed)
					{
						Text = @string,
						Icon = SpriteSpecifierExt.Frame0(markingPrototype.Sprites[0]),
						Selectable = true,
						Metadata = markingPrototype,
						IconModulate = marking.MarkingColors[0]
					};
					this.CMarkingsUsed.Add(item2);
				}
			}
			this.UpdatePoints();
		}

		// Token: 0x06001233 RID: 4659 RVA: 0x0006C4F8 File Offset: 0x0006A6F8
		private void SwapMarkingUp()
		{
			if (this._selectedMarking == null)
			{
				return;
			}
			int src = this.CMarkingsUsed.IndexOf(this._selectedMarking);
			if (this.ShiftMarkingRank(src, -1))
			{
				Action<MarkingSet> onMarkingRankChange = this.OnMarkingRankChange;
				if (onMarkingRankChange == null)
				{
					return;
				}
				onMarkingRankChange(this._currentMarkings);
			}
		}

		// Token: 0x06001234 RID: 4660 RVA: 0x0006C540 File Offset: 0x0006A740
		private void SwapMarkingDown()
		{
			if (this._selectedMarking == null)
			{
				return;
			}
			int src = this.CMarkingsUsed.IndexOf(this._selectedMarking);
			if (this.ShiftMarkingRank(src, 1))
			{
				Action<MarkingSet> onMarkingRankChange = this.OnMarkingRankChange;
				if (onMarkingRankChange == null)
				{
					return;
				}
				onMarkingRankChange(this._currentMarkings);
			}
		}

		// Token: 0x06001235 RID: 4661 RVA: 0x0006C588 File Offset: 0x0006A788
		private bool ShiftMarkingRank(int src, int places)
		{
			if (src + places >= this.CMarkingsUsed.Count || src + places < 0)
			{
				return false;
			}
			int num = src + places;
			ItemList.Item item = this.CMarkingsUsed.get_IndexItem(num);
			this.CMarkingsUsed.set_IndexItem(num, this.CMarkingsUsed.get_IndexItem(src));
			this.CMarkingsUsed.set_IndexItem(src, item);
			if (places >= 0)
			{
				if (places > 0)
				{
					this._currentMarkings.ShiftRankUpFromEnd(this._selectedMarkingCategory, src);
				}
			}
			else
			{
				this._currentMarkings.ShiftRankDownFromEnd(this._selectedMarkingCategory, src);
			}
			return true;
		}

		// Token: 0x06001236 RID: 4662 RVA: 0x0006C614 File Offset: 0x0006A814
		[NullableContext(1)]
		public void SetSpecies(string species)
		{
			this._currentSpecies = species;
			List<Marking> markings = this._currentMarkings.GetForwardEnumerator().ToList<Marking>();
			SpeciesPrototype speciesPrototype = this._prototypeManager.Index<SpeciesPrototype>(species);
			this._currentMarkings = new MarkingSet(markings, speciesPrototype.MarkingPoints, this._markingManager, this._prototypeManager);
			this._currentMarkings.FilterSpecies(species, null, null);
			this.Populate();
			this.PopulateUsed();
		}

		// Token: 0x06001237 RID: 4663 RVA: 0x0006C680 File Offset: 0x0006A880
		private void UpdatePoints()
		{
			int num = this._currentMarkings.PointsLeft(this._selectedMarkingCategory);
			if (num > -1)
			{
				this.CMarkingPoints.Text = Loc.GetString("marking-points-remaining", new ValueTuple<string, object>[]
				{
					new ValueTuple<string, object>("points", num)
				});
			}
		}

		// Token: 0x06001238 RID: 4664 RVA: 0x0006C6D5 File Offset: 0x0006A8D5
		[NullableContext(1)]
		private void OnCategoryChange(OptionButton.ItemSelectedEventArgs category)
		{
			this.CMarkingCategoryButton.SelectId(category.Id);
			this._selectedMarkingCategory = this._markingCategories[category.Id];
			this.Populate();
			this.PopulateUsed();
			this.UpdatePoints();
		}

		// Token: 0x06001239 RID: 4665 RVA: 0x0006C714 File Offset: 0x0006A914
		[NullableContext(1)]
		private void OnUsedMarkingSelected(ItemList.ItemListSelectedEventArgs item)
		{
			this._selectedMarking = this.CMarkingsUsed.get_IndexItem(item.ItemIndex);
			MarkingPrototype markingPrototype = (MarkingPrototype)this._selectedMarking.Metadata;
			if (markingPrototype.FollowSkinColor)
			{
				this.CMarkingColors.Visible = false;
				return;
			}
			List<string> markingStateNames = this.GetMarkingStateNames(markingPrototype);
			this._currentMarkingColors.Clear();
			this.CMarkingColors.DisposeAllChildren();
			List<ColorSelectorSliders> list = new List<ColorSelectorSliders>();
			for (int i = 0; i < markingPrototype.Sprites.Count; i++)
			{
				BoxContainer boxContainer = new BoxContainer
				{
					Orientation = 1
				};
				this.CMarkingColors.AddChild(boxContainer);
				ColorSelectorSliders colorSelector = new ColorSelectorSliders();
				list.Add(colorSelector);
				boxContainer.AddChild(new Label
				{
					Text = markingStateNames[i] + " color:"
				});
				boxContainer.AddChild(colorSelector);
				List<Marking> list2 = this._currentMarkings.Markings[this._selectedMarkingCategory];
				Color color = list2[list2.Count - 1 - item.ItemIndex].MarkingColors[i];
				Color color2;
				color2..ctor(color.RByte, color.GByte, color.BByte, byte.MaxValue);
				colorSelector.Color = color2;
				this._currentMarkingColors.Add(color2);
				int colorIndex = this._currentMarkingColors.Count - 1;
				Action<Color> b = delegate(Color _)
				{
					this._currentMarkingColors[colorIndex] = colorSelector.Color;
					this.ColorChanged(colorIndex);
				};
				ColorSelectorSliders colorSelector2 = colorSelector;
				colorSelector2.OnColorChanged = (Action<Color>)Delegate.Combine(colorSelector2.OnColorChanged, b);
			}
			this.CMarkingColors.Visible = true;
		}

		// Token: 0x0600123A RID: 4666 RVA: 0x0006C8D4 File Offset: 0x0006AAD4
		private void ColorChanged(int colorIndex)
		{
			if (this._selectedMarking == null)
			{
				return;
			}
			MarkingPrototype markingPrototype = (MarkingPrototype)this._selectedMarking.Metadata;
			int num = this._currentMarkings.FindIndexOf(this._selectedMarkingCategory, markingPrototype.ID);
			if (num < 0)
			{
				return;
			}
			this._selectedMarking.IconModulate = this._currentMarkingColors[colorIndex];
			Marking marking = new Marking(this._currentMarkings.Markings[this._selectedMarkingCategory][num]);
			marking.SetColor(colorIndex, this._currentMarkingColors[colorIndex]);
			this._currentMarkings.Replace(this._selectedMarkingCategory, num, marking);
			Action<MarkingSet> onMarkingColorChange = this.OnMarkingColorChange;
			if (onMarkingColorChange == null)
			{
				return;
			}
			onMarkingColorChange(this._currentMarkings);
		}

		// Token: 0x0600123B RID: 4667 RVA: 0x0006C990 File Offset: 0x0006AB90
		private void MarkingAdd()
		{
			if (this._selectedUnusedMarking == null)
			{
				return;
			}
			if (this._currentMarkings.PointsLeft(this._selectedMarkingCategory) == 0 && !this.Forced)
			{
				return;
			}
			MarkingPrototype markingPrototype = (MarkingPrototype)this._selectedUnusedMarking.Metadata;
			Marking marking = markingPrototype.AsMarking();
			for (int i = 0; i < marking.MarkingColors.Count; i++)
			{
				marking.SetColor(i, this.CurrentSkinColor);
			}
			marking.Forced = this.Forced;
			this._currentMarkings.AddBack(this._selectedMarkingCategory, marking);
			this.UpdatePoints();
			this.CMarkingsUnused.Remove(this._selectedUnusedMarking);
			ItemList.Item item = new ItemList.Item(this.CMarkingsUsed);
			ItemList.Item item2 = item;
			string text = "marking-used";
			ValueTuple<string, object>[] array = new ValueTuple<string, object>[2];
			array[0] = new ValueTuple<string, object>("marking-name", this.GetMarkingName(markingPrototype) ?? "");
			int num = 1;
			string item3 = "marking-category";
			DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(18, 1);
			defaultInterpolatedStringHandler.AppendLiteral("markings-category-");
			defaultInterpolatedStringHandler.AppendFormatted<MarkingCategories>(markingPrototype.MarkingCategory);
			array[num] = new ValueTuple<string, object>(item3, Loc.GetString(defaultInterpolatedStringHandler.ToStringAndClear()));
			item2.Text = Loc.GetString(text, array);
			item.Icon = SpriteSpecifierExt.Frame0(markingPrototype.Sprites[0]);
			item.Selectable = true;
			item.Metadata = markingPrototype;
			ItemList.Item item4 = item;
			this.CMarkingsUsed.Insert(0, item4);
			this._selectedUnusedMarking = null;
			Action<MarkingSet> onMarkingAdded = this.OnMarkingAdded;
			if (onMarkingAdded == null)
			{
				return;
			}
			onMarkingAdded(this._currentMarkings);
		}

		// Token: 0x0600123C RID: 4668 RVA: 0x0006CB10 File Offset: 0x0006AD10
		private void MarkingRemove()
		{
			if (this._selectedMarking == null)
			{
				return;
			}
			MarkingPrototype markingPrototype = (MarkingPrototype)this._selectedMarking.Metadata;
			this._currentMarkings.Remove(this._selectedMarkingCategory, markingPrototype.ID);
			this.UpdatePoints();
			this.CMarkingsUsed.Remove(this._selectedMarking);
			if (markingPrototype.MarkingCategory == this._selectedMarkingCategory)
			{
				this.CMarkingsUnused.AddItem(this.GetMarkingName(markingPrototype) ?? "", SpriteSpecifierExt.Frame0(markingPrototype.Sprites[0]), true).Metadata = markingPrototype;
			}
			this._selectedMarking = null;
			this.CMarkingColors.Visible = false;
			Action<MarkingSet> onMarkingRemoved = this.OnMarkingRemoved;
			if (onMarkingRemoved == null)
			{
				return;
			}
			onMarkingRemoved(this._currentMarkings);
		}

		// Token: 0x170003DA RID: 986
		// (get) Token: 0x0600123D RID: 4669 RVA: 0x0006CBD1 File Offset: 0x0006ADD1
		private OptionButton CMarkingCategoryButton
		{
			get
			{
				return base.FindControl<OptionButton>("CMarkingCategoryButton");
			}
		}

		// Token: 0x170003DB RID: 987
		// (get) Token: 0x0600123E RID: 4670 RVA: 0x0006CBDE File Offset: 0x0006ADDE
		private ItemList CMarkingsUnused
		{
			get
			{
				return base.FindControl<ItemList>("CMarkingsUnused");
			}
		}

		// Token: 0x170003DC RID: 988
		// (get) Token: 0x0600123F RID: 4671 RVA: 0x0006CBEB File Offset: 0x0006ADEB
		private Label CMarkingPoints
		{
			get
			{
				return base.FindControl<Label>("CMarkingPoints");
			}
		}

		// Token: 0x170003DD RID: 989
		// (get) Token: 0x06001240 RID: 4672 RVA: 0x0006CBF8 File Offset: 0x0006ADF8
		private Button CMarkingAdd
		{
			get
			{
				return base.FindControl<Button>("CMarkingAdd");
			}
		}

		// Token: 0x170003DE RID: 990
		// (get) Token: 0x06001241 RID: 4673 RVA: 0x0006CC05 File Offset: 0x0006AE05
		private ItemList CMarkingsUsed
		{
			get
			{
				return base.FindControl<ItemList>("CMarkingsUsed");
			}
		}

		// Token: 0x170003DF RID: 991
		// (get) Token: 0x06001242 RID: 4674 RVA: 0x0006CC12 File Offset: 0x0006AE12
		private Button CMarkingRankUp
		{
			get
			{
				return base.FindControl<Button>("CMarkingRankUp");
			}
		}

		// Token: 0x170003E0 RID: 992
		// (get) Token: 0x06001243 RID: 4675 RVA: 0x0006CC1F File Offset: 0x0006AE1F
		private Button CMarkingRankDown
		{
			get
			{
				return base.FindControl<Button>("CMarkingRankDown");
			}
		}

		// Token: 0x170003E1 RID: 993
		// (get) Token: 0x06001244 RID: 4676 RVA: 0x0006CC2C File Offset: 0x0006AE2C
		private Button CMarkingRemove
		{
			get
			{
				return base.FindControl<Button>("CMarkingRemove");
			}
		}

		// Token: 0x170003E2 RID: 994
		// (get) Token: 0x06001245 RID: 4677 RVA: 0x0006CC39 File Offset: 0x0006AE39
		private BoxContainer CMarkingColors
		{
			get
			{
				return base.FindControl<BoxContainer>("CMarkingColors");
			}
		}

		// Token: 0x0600124B RID: 4683 RVA: 0x0006CC80 File Offset: 0x0006AE80
		static void xaml(IServiceProvider A_0, Control A_1)
		{
			XamlIlContext.Context<Control> context = new XamlIlContext.Context<Control>(A_0, null, "resm:Content.Client.Humanoid.MarkingPicker.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			boxContainer.HorizontalExpand = true;
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 0;
			boxContainer2.SeparationOverride = new int?(5);
			boxContainer2.HorizontalExpand = true;
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 1;
			boxContainer3.HorizontalExpand = true;
			Control control = new Label
			{
				Text = (string)new LocExtension("markings-unused").ProvideValue()
			};
			boxContainer3.XamlChildren.Add(control);
			OptionButton optionButton = new OptionButton();
			optionButton.Name = "CMarkingCategoryButton";
			control = optionButton;
			context.RobustNameScope.Register("CMarkingCategoryButton", control);
			control = optionButton;
			boxContainer3.XamlChildren.Add(control);
			ItemList itemList = new ItemList();
			itemList.Name = "CMarkingsUnused";
			control = itemList;
			context.RobustNameScope.Register("CMarkingsUnused", control);
			itemList.VerticalExpand = true;
			itemList.MinSize = new Vector2(300f, 250f);
			control = itemList;
			boxContainer3.XamlChildren.Add(control);
			Label label = new Label();
			label.Name = "CMarkingPoints";
			control = label;
			context.RobustNameScope.Register("CMarkingPoints", control);
			label.Text = "uwu";
			control = label;
			boxContainer3.XamlChildren.Add(control);
			Button button = new Button();
			button.Name = "CMarkingAdd";
			control = button;
			context.RobustNameScope.Register("CMarkingAdd", control);
			button.Text = (string)new LocExtension("markings-add").ProvideValue();
			control = button;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer2.XamlChildren.Add(control);
			BoxContainer boxContainer4 = new BoxContainer();
			boxContainer4.Orientation = 1;
			boxContainer4.HorizontalExpand = true;
			control = new Label
			{
				Text = (string)new LocExtension("markings-used").ProvideValue()
			};
			boxContainer4.XamlChildren.Add(control);
			ItemList itemList2 = new ItemList();
			itemList2.Name = "CMarkingsUsed";
			control = itemList2;
			context.RobustNameScope.Register("CMarkingsUsed", control);
			itemList2.VerticalExpand = true;
			itemList2.MinSize = new Vector2(300f, 250f);
			control = itemList2;
			boxContainer4.XamlChildren.Add(control);
			BoxContainer boxContainer5 = new BoxContainer();
			boxContainer5.Orientation = 0;
			boxContainer5.SeparationOverride = new int?(5);
			Button button2 = new Button();
			button2.Name = "CMarkingRankUp";
			control = button2;
			context.RobustNameScope.Register("CMarkingRankUp", control);
			button2.Text = (string)new LocExtension("markings-rank-up").ProvideValue();
			button2.HorizontalExpand = true;
			control = button2;
			boxContainer5.XamlChildren.Add(control);
			Button button3 = new Button();
			button3.Name = "CMarkingRankDown";
			control = button3;
			context.RobustNameScope.Register("CMarkingRankDown", control);
			button3.Text = (string)new LocExtension("markings-rank-down").ProvideValue();
			button3.HorizontalExpand = true;
			control = button3;
			boxContainer5.XamlChildren.Add(control);
			control = boxContainer5;
			boxContainer4.XamlChildren.Add(control);
			Button button4 = new Button();
			button4.Name = "CMarkingRemove";
			control = button4;
			context.RobustNameScope.Register("CMarkingRemove", control);
			button4.Text = (string)new LocExtension("markings-remove").ProvideValue();
			control = button4;
			boxContainer4.XamlChildren.Add(control);
			control = boxContainer4;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer6 = new BoxContainer();
			boxContainer6.Name = "CMarkingColors";
			control = boxContainer6;
			context.RobustNameScope.Register("CMarkingColors", control);
			boxContainer6.Orientation = 1;
			boxContainer6.Visible = false;
			control = boxContainer6;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x0600124C RID: 4684 RVA: 0x0006D179 File Offset: 0x0006B379
		private static void !XamlIlPopulateTrampoline(MarkingPicker A_0)
		{
			MarkingPicker.Populate:Content.Client.Humanoid.MarkingPicker.xaml(null, A_0);
		}

		// Token: 0x040008FA RID: 2298
		[Nullable(1)]
		[Dependency]
		private readonly MarkingManager _markingManager;

		// Token: 0x040008FB RID: 2299
		[Nullable(1)]
		[Dependency]
		private readonly IPrototypeManager _prototypeManager;

		// Token: 0x040008FC RID: 2300
		[Nullable(1)]
		[Dependency]
		private readonly SponsorsManager _sponsorsManager;

		// Token: 0x040008FD RID: 2301
		[Nullable(new byte[]
		{
			2,
			1
		})]
		public Action<MarkingSet> OnMarkingAdded;

		// Token: 0x040008FE RID: 2302
		[Nullable(new byte[]
		{
			2,
			1
		})]
		public Action<MarkingSet> OnMarkingRemoved;

		// Token: 0x040008FF RID: 2303
		[Nullable(new byte[]
		{
			2,
			1
		})]
		public Action<MarkingSet> OnMarkingColorChange;

		// Token: 0x04000900 RID: 2304
		[Nullable(new byte[]
		{
			2,
			1
		})]
		public Action<MarkingSet> OnMarkingRankChange;

		// Token: 0x04000901 RID: 2305
		[Nullable(1)]
		private List<Color> _currentMarkingColors = new List<Color>();

		// Token: 0x04000902 RID: 2306
		[Nullable(2)]
		private ItemList.Item _selectedMarking;

		// Token: 0x04000903 RID: 2307
		[Nullable(2)]
		private ItemList.Item _selectedUnusedMarking;

		// Token: 0x04000904 RID: 2308
		private MarkingCategories _selectedMarkingCategory = MarkingCategories.Chest;

		// Token: 0x04000905 RID: 2309
		[Nullable(1)]
		private MarkingSet _currentMarkings = new MarkingSet();

		// Token: 0x04000906 RID: 2310
		[Nullable(1)]
		private List<MarkingCategories> _markingCategories = Enum.GetValues<MarkingCategories>().ToList<MarkingCategories>();

		// Token: 0x04000907 RID: 2311
		[Nullable(1)]
		private string _currentSpecies = "Human";

		// Token: 0x04000908 RID: 2312
		public Color CurrentSkinColor = Color.White;

		// Token: 0x04000909 RID: 2313
		[Nullable(1)]
		private readonly HashSet<MarkingCategories> _ignoreCategories = new HashSet<MarkingCategories>();

		// Token: 0x0400090B RID: 2315
		private bool _ignoreSpecies;
	}
}
