using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.Message;
using Content.Shared.Actions.ActionTypes;
using Content.Shared.FixedPoint;
using Content.Shared.Store;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;
using Robust.Shared.Prototypes;

namespace Content.Client.Store.Ui
{
	// Token: 0x0200011B RID: 283
	[GenerateTypedNameReferences]
	public sealed class StoreMenu : DefaultWindow
	{
		// Token: 0x1400003B RID: 59
		// (add) Token: 0x060007CF RID: 1999 RVA: 0x0002D520 File Offset: 0x0002B720
		// (remove) Token: 0x060007D0 RID: 2000 RVA: 0x0002D558 File Offset: 0x0002B758
		[Nullable(new byte[]
		{
			2,
			1,
			1
		})]
		[Nullable(new byte[]
		{
			2,
			1,
			1
		})]
		public event Action<BaseButton.ButtonEventArgs, ListingData> OnListingButtonPressed;

		// Token: 0x1400003C RID: 60
		// (add) Token: 0x060007D1 RID: 2001 RVA: 0x0002D590 File Offset: 0x0002B790
		// (remove) Token: 0x060007D2 RID: 2002 RVA: 0x0002D5C8 File Offset: 0x0002B7C8
		[Nullable(new byte[]
		{
			2,
			1,
			1
		})]
		[Nullable(new byte[]
		{
			2,
			1,
			1
		})]
		public event Action<BaseButton.ButtonEventArgs, string> OnCategoryButtonPressed;

		// Token: 0x1400003D RID: 61
		// (add) Token: 0x060007D3 RID: 2003 RVA: 0x0002D600 File Offset: 0x0002B800
		// (remove) Token: 0x060007D4 RID: 2004 RVA: 0x0002D638 File Offset: 0x0002B838
		[Nullable(new byte[]
		{
			2,
			1,
			1
		})]
		[Nullable(new byte[]
		{
			2,
			1,
			1
		})]
		public event Action<BaseButton.ButtonEventArgs, string, int> OnWithdrawAttempt;

		// Token: 0x060007D5 RID: 2005 RVA: 0x0002D670 File Offset: 0x0002B870
		[NullableContext(1)]
		public StoreMenu(string name)
		{
			StoreMenu.!XamlIlPopulateTrampoline(this);
			IoCManager.InjectDependencies<StoreMenu>(this);
			this.WithdrawButton.OnButtonDown += this.OnWithdrawButtonDown;
			if (this.Window != null)
			{
				this.Window.Title = name;
			}
		}

		// Token: 0x060007D6 RID: 2006 RVA: 0x0002D6D4 File Offset: 0x0002B8D4
		[NullableContext(1)]
		public void UpdateBalance(Dictionary<string, FixedPoint2> balance)
		{
			this.Balance = balance;
			Dictionary<ValueTuple<string, FixedPoint2>, CurrencyPrototype> dictionary = balance.ToDictionary((KeyValuePair<string, FixedPoint2> type) => new ValueTuple<string, FixedPoint2>(type.Key, type.Value), (KeyValuePair<string, FixedPoint2> type) => this._prototypeManager.Index<CurrencyPrototype>(type.Key));
			string text = string.Empty;
			foreach (KeyValuePair<ValueTuple<string, FixedPoint2>, CurrencyPrototype> keyValuePair in dictionary)
			{
				ValueTuple<string, FixedPoint2> valueTuple;
				CurrencyPrototype currencyPrototype;
				keyValuePair.Deconstruct(out valueTuple, out currencyPrototype);
				FixedPoint2 item = valueTuple.Item2;
				CurrencyPrototype currencyPrototype2 = currencyPrototype;
				text += Loc.GetString("store-ui-balance-display", new ValueTuple<string, object>[]
				{
					new ValueTuple<string, object>("amount", item),
					new ValueTuple<string, object>("currency", Loc.GetString(currencyPrototype2.DisplayName, new ValueTuple<string, object>[]
					{
						new ValueTuple<string, object>("amount", 1)
					}))
				});
			}
			this.BalanceInfo.SetMarkup(text.TrimEnd());
			bool flag = true;
			foreach (KeyValuePair<ValueTuple<string, FixedPoint2>, CurrencyPrototype> keyValuePair2 in dictionary)
			{
				if (keyValuePair2.Value.CanWithdraw && keyValuePair2.Value.Cash != null && keyValuePair2.Key.Item2 > 0)
				{
					flag = false;
				}
			}
			this.WithdrawButton.Visible = !flag;
		}

		// Token: 0x060007D7 RID: 2007 RVA: 0x0002D870 File Offset: 0x0002BA70
		[NullableContext(1)]
		public void UpdateListing(List<ListingData> listings)
		{
			IEnumerable<ListingData> enumerable = from l in listings
			orderby l.Priority, l.Cost.Values.Sum()
			select l;
			this.ClearListings();
			foreach (ListingData listing in enumerable)
			{
				this.AddListingGui(listing);
			}
		}

		// Token: 0x060007D8 RID: 2008 RVA: 0x0002D908 File Offset: 0x0002BB08
		[NullableContext(1)]
		private void OnWithdrawButtonDown(BaseButton.ButtonEventArgs args)
		{
			if (this._withdrawWindow != null && this._withdrawWindow.IsOpen)
			{
				this._withdrawWindow.MoveToFront();
				return;
			}
			this._withdrawWindow = new StoreWithdrawWindow();
			this._withdrawWindow.OpenCentered();
			this._withdrawWindow.CreateCurrencyButtons(this.Balance);
			this._withdrawWindow.OnWithdrawAttempt += this.OnWithdrawAttempt;
		}

		// Token: 0x060007D9 RID: 2009 RVA: 0x0002D970 File Offset: 0x0002BB70
		[NullableContext(1)]
		private void AddListingGui(ListingData listing)
		{
			if (!listing.Categories.Contains(this.CurrentCategory))
			{
				return;
			}
			string text = Loc.GetString(listing.Name);
			string text2 = Loc.GetString(listing.Description);
			Dictionary<string, FixedPoint2> cost = listing.Cost;
			bool canBuy = this.CanBuyListing(this.Balance, cost);
			SpriteSystem entitySystem = this._entityManager.EntitySysManager.GetEntitySystem<SpriteSystem>();
			Texture texture = null;
			if (listing.Icon != null)
			{
				texture = entitySystem.Frame0(listing.Icon);
			}
			if (listing.ProductEntity != null)
			{
				if (texture == null)
				{
					texture = entitySystem.GetPrototypeIcon(listing.ProductEntity).Default;
				}
				EntityPrototype entityPrototype = this._prototypeManager.Index<EntityPrototype>(listing.ProductEntity);
				if (text == string.Empty)
				{
					text = entityPrototype.Name;
				}
				if (text2 == string.Empty)
				{
					text2 = entityPrototype.Description;
				}
			}
			else if (listing.ProductAction != null)
			{
				InstantActionPrototype instantActionPrototype = this._prototypeManager.Index<InstantActionPrototype>(listing.ProductAction);
				if (instantActionPrototype.Icon != null)
				{
					texture = entitySystem.Frame0(instantActionPrototype.Icon);
				}
			}
			StoreListingControl storeListingControl = new StoreListingControl(text, text2, this.GetListingPriceString(listing), canBuy, texture);
			storeListingControl.StoreItemBuyButton.OnButtonDown += delegate(BaseButton.ButtonEventArgs args)
			{
				Action<BaseButton.ButtonEventArgs, ListingData> onListingButtonPressed = this.OnListingButtonPressed;
				if (onListingButtonPressed == null)
				{
					return;
				}
				onListingButtonPressed(args, listing);
			};
			this.StoreListingsContainer.AddChild(storeListingControl);
		}

		// Token: 0x060007DA RID: 2010 RVA: 0x0002DB08 File Offset: 0x0002BD08
		[NullableContext(1)]
		public bool CanBuyListing(Dictionary<string, FixedPoint2> currency, Dictionary<string, FixedPoint2> price)
		{
			foreach (KeyValuePair<string, FixedPoint2> keyValuePair in price)
			{
				if (!currency.ContainsKey(keyValuePair.Key))
				{
					return false;
				}
				if (currency[keyValuePair.Key] < keyValuePair.Value)
				{
					return false;
				}
			}
			return true;
		}

		// Token: 0x060007DB RID: 2011 RVA: 0x0002DB84 File Offset: 0x0002BD84
		[NullableContext(1)]
		public string GetListingPriceString(ListingData listing)
		{
			string text = string.Empty;
			if (listing.Cost.Count < 1)
			{
				text = Loc.GetString("store-currency-free");
			}
			else
			{
				foreach (KeyValuePair<string, FixedPoint2> keyValuePair in listing.Cost)
				{
					string text2;
					FixedPoint2 fixedPoint;
					keyValuePair.Deconstruct(out text2, out fixedPoint);
					string text3 = text2;
					FixedPoint2 fixedPoint2 = fixedPoint;
					CurrencyPrototype currencyPrototype = this._prototypeManager.Index<CurrencyPrototype>(text3);
					text += Loc.GetString("store-ui-price-display", new ValueTuple<string, object>[]
					{
						new ValueTuple<string, object>("amount", fixedPoint2),
						new ValueTuple<string, object>("currency", Loc.GetString(currencyPrototype.DisplayName, new ValueTuple<string, object>[]
						{
							new ValueTuple<string, object>("amount", fixedPoint2)
						}))
					});
				}
			}
			return text.TrimEnd();
		}

		// Token: 0x060007DC RID: 2012 RVA: 0x0002DC88 File Offset: 0x0002BE88
		private void ClearListings()
		{
			this.StoreListingsContainer.Children.Clear();
		}

		// Token: 0x060007DD RID: 2013 RVA: 0x0002DC9C File Offset: 0x0002BE9C
		[NullableContext(1)]
		public void PopulateStoreCategoryButtons(HashSet<ListingData> listings)
		{
			List<StoreCategoryPrototype> list = new List<StoreCategoryPrototype>();
			foreach (ListingData listingData in listings)
			{
				foreach (string text in listingData.Categories)
				{
					StoreCategoryPrototype item = this._prototypeManager.Index<StoreCategoryPrototype>(text);
					if (!list.Contains(item))
					{
						list.Add(item);
					}
				}
			}
			list = (from c in list
			orderby c.Priority
			select c).ToList<StoreCategoryPrototype>();
			if (this.CurrentCategory == string.Empty && list.Count > 0)
			{
				this.CurrentCategory = list.First<StoreCategoryPrototype>().ID;
			}
			if (list.Count <= 1)
			{
				return;
			}
			this.CategoryListContainer.Children.Clear();
			foreach (StoreCategoryPrototype storeCategoryPrototype in list)
			{
				StoreMenu.StoreCategoryButton catButton = new StoreMenu.StoreCategoryButton
				{
					Text = Loc.GetString(storeCategoryPrototype.Name),
					Id = storeCategoryPrototype.ID
				};
				catButton.OnPressed += delegate(BaseButton.ButtonEventArgs args)
				{
					Action<BaseButton.ButtonEventArgs, string> onCategoryButtonPressed = this.OnCategoryButtonPressed;
					if (onCategoryButtonPressed == null)
					{
						return;
					}
					onCategoryButtonPressed(args, catButton.Id);
				};
				this.CategoryListContainer.AddChild(catButton);
			}
		}

		// Token: 0x060007DE RID: 2014 RVA: 0x0002DE50 File Offset: 0x0002C050
		public override void Close()
		{
			base.Close();
			StoreWithdrawWindow withdrawWindow = this._withdrawWindow;
			if (withdrawWindow == null)
			{
				return;
			}
			withdrawWindow.Close();
		}

		// Token: 0x17000168 RID: 360
		// (get) Token: 0x060007DF RID: 2015 RVA: 0x0002DE68 File Offset: 0x0002C068
		public RichTextLabel BalanceInfo
		{
			get
			{
				return base.FindControl<RichTextLabel>("BalanceInfo");
			}
		}

		// Token: 0x17000169 RID: 361
		// (get) Token: 0x060007E0 RID: 2016 RVA: 0x0002DE75 File Offset: 0x0002C075
		private Button WithdrawButton
		{
			get
			{
				return base.FindControl<Button>("WithdrawButton");
			}
		}

		// Token: 0x1700016A RID: 362
		// (get) Token: 0x060007E1 RID: 2017 RVA: 0x0002DE82 File Offset: 0x0002C082
		private BoxContainer CategoryListContainer
		{
			get
			{
				return base.FindControl<BoxContainer>("CategoryListContainer");
			}
		}

		// Token: 0x1700016B RID: 363
		// (get) Token: 0x060007E2 RID: 2018 RVA: 0x0002DE8F File Offset: 0x0002C08F
		private ScrollContainer StoreListingsScroll
		{
			get
			{
				return base.FindControl<ScrollContainer>("StoreListingsScroll");
			}
		}

		// Token: 0x1700016C RID: 364
		// (get) Token: 0x060007E3 RID: 2019 RVA: 0x0002DE9C File Offset: 0x0002C09C
		private BoxContainer StoreListingsContainer
		{
			get
			{
				return base.FindControl<BoxContainer>("StoreListingsContainer");
			}
		}

		// Token: 0x060007E5 RID: 2021 RVA: 0x0002DEC0 File Offset: 0x0002C0C0
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.Store.Ui.StoreMenu.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Title = (string)new LocExtension("store-ui-default-title").ProvideValue();
			A_1.MinSize = new Vector2(512f, 512f);
			A_1.SetSize = new Vector2(512f, 512f);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 1;
			boxContainer2.VerticalExpand = true;
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Margin = new Thickness(4f, 4f, 4f, 4f);
			boxContainer3.Orientation = 0;
			RichTextLabel richTextLabel = new RichTextLabel();
			richTextLabel.Name = "BalanceInfo";
			Control control = richTextLabel;
			context.RobustNameScope.Register("BalanceInfo", control);
			richTextLabel.HorizontalAlignment = 1;
			richTextLabel.Access = new AccessLevel?(0);
			richTextLabel.HorizontalExpand = true;
			control = richTextLabel;
			boxContainer3.XamlChildren.Add(control);
			Button button = new Button();
			button.Name = "WithdrawButton";
			control = button;
			context.RobustNameScope.Register("WithdrawButton", control);
			button.MinWidth = 64f;
			button.HorizontalAlignment = 3;
			button.Text = (string)new LocExtension("store-ui-default-withdraw-text").ProvideValue();
			control = button;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer2.XamlChildren.Add(control);
			PanelContainer panelContainer = new PanelContainer();
			panelContainer.VerticalExpand = true;
			panelContainer.PanelOverride = new StyleBoxFlat
			{
				BackgroundColor = Color.FromXaml("#000000FF")
			};
			BoxContainer boxContainer4 = new BoxContainer();
			boxContainer4.Orientation = 0;
			boxContainer4.VerticalExpand = true;
			PanelContainer panelContainer2 = new PanelContainer();
			panelContainer2.VerticalExpand = true;
			panelContainer2.PanelOverride = new StyleBoxFlat
			{
				BackgroundColor = Color.FromXaml("#80808005")
			};
			BoxContainer boxContainer5 = new BoxContainer();
			boxContainer5.Name = "CategoryListContainer";
			control = boxContainer5;
			context.RobustNameScope.Register("CategoryListContainer", control);
			boxContainer5.Orientation = 1;
			control = boxContainer5;
			panelContainer2.XamlChildren.Add(control);
			control = panelContainer2;
			boxContainer4.XamlChildren.Add(control);
			ScrollContainer scrollContainer = new ScrollContainer();
			scrollContainer.Name = "StoreListingsScroll";
			control = scrollContainer;
			context.RobustNameScope.Register("StoreListingsScroll", control);
			scrollContainer.HScrollEnabled = false;
			scrollContainer.HorizontalExpand = true;
			scrollContainer.MinSize = new Vector2(100f, 256f);
			scrollContainer.SizeFlagsStretchRatio = 2f;
			scrollContainer.VerticalExpand = true;
			BoxContainer boxContainer6 = new BoxContainer();
			boxContainer6.Name = "StoreListingsContainer";
			control = boxContainer6;
			context.RobustNameScope.Register("StoreListingsContainer", control);
			boxContainer6.MinSize = new Vector2(100f, 256f);
			boxContainer6.Orientation = 1;
			boxContainer6.SizeFlagsStretchRatio = 2f;
			boxContainer6.VerticalExpand = true;
			control = boxContainer6;
			scrollContainer.XamlChildren.Add(control);
			control = scrollContainer;
			boxContainer4.XamlChildren.Add(control);
			control = boxContainer4;
			panelContainer.XamlChildren.Add(control);
			control = panelContainer;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x060007E6 RID: 2022 RVA: 0x0002E2D0 File Offset: 0x0002C4D0
		private static void !XamlIlPopulateTrampoline(StoreMenu A_0)
		{
			StoreMenu.Populate:Content.Client.Store.Ui.StoreMenu.xaml(null, A_0);
		}

		// Token: 0x040003F4 RID: 1012
		[Nullable(1)]
		[Dependency]
		private readonly IEntityManager _entityManager;

		// Token: 0x040003F5 RID: 1013
		[Nullable(1)]
		[Dependency]
		private readonly IPrototypeManager _prototypeManager;

		// Token: 0x040003F6 RID: 1014
		[Nullable(2)]
		private StoreWithdrawWindow _withdrawWindow;

		// Token: 0x040003FA RID: 1018
		[Nullable(1)]
		public Dictionary<string, FixedPoint2> Balance = new Dictionary<string, FixedPoint2>();

		// Token: 0x040003FB RID: 1019
		[Nullable(1)]
		public string CurrentCategory = string.Empty;

		// Token: 0x0200011C RID: 284
		private sealed class StoreCategoryButton : Button
		{
			// Token: 0x040003FC RID: 1020
			[Nullable(2)]
			public string Id;
		}
	}
}
