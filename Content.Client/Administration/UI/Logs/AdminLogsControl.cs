using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using CompiledRobustXaml;
using Content.Client.Administration.UI.CustomControls;
using Content.Shared.Administration.Logs;
using Content.Shared.Database;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.Localization;
using Robust.Shared.Maths;

namespace Content.Client.Administration.UI.Logs
{
	// Token: 0x020004C0 RID: 1216
	[GenerateTypedNameReferences]
	public sealed class AdminLogsControl : Control
	{
		// Token: 0x06001EB6 RID: 7862 RVA: 0x000B437C File Offset: 0x000B257C
		public AdminLogsControl()
		{
			AdminLogsControl.!XamlIlPopulateTrampoline(this);
			this.TypeSearch.OnTextChanged += this.TypeSearchChanged;
			this.PlayerSearch.OnTextChanged += this.PlayerSearchChanged;
			this.LogSearch.OnTextChanged += this.LogSearchChanged;
			this.SelectAllTypesButton.OnPressed += this.SelectAllTypes;
			this.SelectNoTypesButton.OnPressed += this.SelectNoTypes;
			this.SelectAllPlayersButton.OnPressed += this.SelectAllPlayers;
			this.SelectNoPlayersButton.OnPressed += this.SelectNoPlayers;
			this.RoundSpinBox.IsValid = ((int i) => i > 0 && i <= this.CurrentRound);
			this.RoundSpinBox.ValueChanged += this.RoundSpinBoxChanged;
			this.RoundSpinBox.InitDefaultButtons();
			this.ResetRoundButton.OnPressed += this.ResetRoundPressed;
			this.SetImpacts((from impact in Enum.GetValues<LogImpact>()
			orderby impact
			select impact).ToArray<LogImpact>());
			this.SetTypes(Enum.GetValues<LogType>());
		}

		// Token: 0x170006A5 RID: 1701
		// (get) Token: 0x06001EB7 RID: 7863 RVA: 0x000B453A File Offset: 0x000B273A
		// (set) Token: 0x06001EB8 RID: 7864 RVA: 0x000B4542 File Offset: 0x000B2742
		private int CurrentRound { get; set; }

		// Token: 0x170006A6 RID: 1702
		// (get) Token: 0x06001EB9 RID: 7865 RVA: 0x000B454B File Offset: 0x000B274B
		public int SelectedRoundId
		{
			get
			{
				return this.RoundSpinBox.Value;
			}
		}

		// Token: 0x170006A7 RID: 1703
		// (get) Token: 0x06001EBA RID: 7866 RVA: 0x000B4558 File Offset: 0x000B2758
		[Nullable(1)]
		public string Search
		{
			[NullableContext(1)]
			get
			{
				return this.LogSearch.Text;
			}
		}

		// Token: 0x170006A8 RID: 1704
		// (get) Token: 0x06001EBB RID: 7867 RVA: 0x000B4565 File Offset: 0x000B2765
		// (set) Token: 0x06001EBC RID: 7868 RVA: 0x000B456D File Offset: 0x000B276D
		private int ShownLogs { get; set; }

		// Token: 0x170006A9 RID: 1705
		// (get) Token: 0x06001EBD RID: 7869 RVA: 0x000B4576 File Offset: 0x000B2776
		// (set) Token: 0x06001EBE RID: 7870 RVA: 0x000B457E File Offset: 0x000B277E
		private int TotalLogs { get; set; }

		// Token: 0x170006AA RID: 1706
		// (get) Token: 0x06001EBF RID: 7871 RVA: 0x000B4587 File Offset: 0x000B2787
		[Nullable(1)]
		public HashSet<LogType> SelectedTypes { [NullableContext(1)] get; } = new HashSet<LogType>();

		// Token: 0x170006AB RID: 1707
		// (get) Token: 0x06001EC0 RID: 7872 RVA: 0x000B458F File Offset: 0x000B278F
		[Nullable(1)]
		public HashSet<Guid> SelectedPlayers { [NullableContext(1)] get; } = new HashSet<Guid>();

		// Token: 0x170006AC RID: 1708
		// (get) Token: 0x06001EC1 RID: 7873 RVA: 0x000B4597 File Offset: 0x000B2797
		[Nullable(1)]
		public HashSet<LogImpact> SelectedImpacts { [NullableContext(1)] get; } = new HashSet<LogImpact>();

		// Token: 0x06001EC2 RID: 7874 RVA: 0x000B45A0 File Offset: 0x000B27A0
		public void SetCurrentRound(int round)
		{
			this.CurrentRound = round;
			this.ResetRoundButton.Text = Loc.GetString("admin-logs-reset-with-id", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("id", round)
			});
			this.UpdateResetButton();
		}

		// Token: 0x06001EC3 RID: 7875 RVA: 0x000B45EC File Offset: 0x000B27EC
		public void SetRoundSpinBox(int round)
		{
			this.RoundSpinBox.Value = round;
			this.UpdateResetButton();
		}

		// Token: 0x06001EC4 RID: 7876 RVA: 0x000B4600 File Offset: 0x000B2800
		[NullableContext(1)]
		private void RoundSpinBoxChanged([Nullable(2)] object sender, ValueChangedEventArgs args)
		{
			this.UpdateResetButton();
		}

		// Token: 0x06001EC5 RID: 7877 RVA: 0x000B4608 File Offset: 0x000B2808
		private void UpdateResetButton()
		{
			this.ResetRoundButton.Disabled = (this.RoundSpinBox.Value == this.CurrentRound);
		}

		// Token: 0x06001EC6 RID: 7878 RVA: 0x000B4628 File Offset: 0x000B2828
		[NullableContext(1)]
		private void ResetRoundPressed(BaseButton.ButtonEventArgs args)
		{
			this.RoundSpinBox.Value = this.CurrentRound;
		}

		// Token: 0x06001EC7 RID: 7879 RVA: 0x000B463B File Offset: 0x000B283B
		[NullableContext(1)]
		private void TypeSearchChanged(LineEdit.LineEditEventArgs args)
		{
			this.UpdateTypes();
		}

		// Token: 0x06001EC8 RID: 7880 RVA: 0x000B4643 File Offset: 0x000B2843
		[NullableContext(1)]
		private void PlayerSearchChanged(LineEdit.LineEditEventArgs args)
		{
			this.UpdatePlayers();
		}

		// Token: 0x06001EC9 RID: 7881 RVA: 0x000B464B File Offset: 0x000B284B
		[NullableContext(1)]
		private void LogSearchChanged(LineEdit.LineEditEventArgs args)
		{
			this.UpdateLogs();
		}

		// Token: 0x06001ECA RID: 7882 RVA: 0x000B4654 File Offset: 0x000B2854
		[NullableContext(1)]
		private void SelectAllTypes(BaseButton.ButtonEventArgs args)
		{
			this.SelectedTypes.Clear();
			foreach (Control control in this.TypesContainer.Children)
			{
				AdminLogTypeButton adminLogTypeButton = control as AdminLogTypeButton;
				if (adminLogTypeButton != null)
				{
					adminLogTypeButton.Pressed = true;
					this.SelectedTypes.Add(adminLogTypeButton.Type);
				}
			}
			this.UpdateLogs();
		}

		// Token: 0x06001ECB RID: 7883 RVA: 0x000B46D8 File Offset: 0x000B28D8
		[NullableContext(1)]
		private void SelectNoTypes(BaseButton.ButtonEventArgs args)
		{
			this.SelectedTypes.Clear();
			foreach (Control control in this.TypesContainer.Children)
			{
				AdminLogTypeButton adminLogTypeButton = control as AdminLogTypeButton;
				if (adminLogTypeButton != null)
				{
					adminLogTypeButton.Pressed = false;
					adminLogTypeButton.Visible = this.ShouldShowType(adminLogTypeButton);
				}
			}
			this.UpdateLogs();
		}

		// Token: 0x06001ECC RID: 7884 RVA: 0x000B4758 File Offset: 0x000B2958
		[NullableContext(1)]
		private void SelectAllPlayers(BaseButton.ButtonEventArgs args)
		{
			this.SelectedPlayers.Clear();
			foreach (Control control in this.PlayersContainer.Children)
			{
				AdminLogPlayerButton adminLogPlayerButton = control as AdminLogPlayerButton;
				if (adminLogPlayerButton != null)
				{
					adminLogPlayerButton.Pressed = true;
					this.SelectedPlayers.Add(adminLogPlayerButton.Id);
				}
			}
			this.UpdateLogs();
		}

		// Token: 0x06001ECD RID: 7885 RVA: 0x000B47DC File Offset: 0x000B29DC
		[NullableContext(1)]
		private void SelectNoPlayers(BaseButton.ButtonEventArgs args)
		{
			this.SelectedPlayers.Clear();
			foreach (Control control in this.PlayersContainer.Children)
			{
				AdminLogPlayerButton adminLogPlayerButton = control as AdminLogPlayerButton;
				if (adminLogPlayerButton != null)
				{
					adminLogPlayerButton.Pressed = false;
				}
			}
			this.UpdateLogs();
		}

		// Token: 0x06001ECE RID: 7886 RVA: 0x000B4850 File Offset: 0x000B2A50
		[NullableContext(1)]
		public void SetTypesSelection(HashSet<LogType> selectedTypes, bool invert = false)
		{
			this.SelectedTypes.Clear();
			foreach (Control control in this.TypesContainer.Children)
			{
				AdminLogTypeButton adminLogTypeButton = control as AdminLogTypeButton;
				if (adminLogTypeButton != null)
				{
					if (selectedTypes.Contains(adminLogTypeButton.Type) ^ invert)
					{
						adminLogTypeButton.Pressed = true;
						this.SelectedTypes.Add(adminLogTypeButton.Type);
					}
					else
					{
						adminLogTypeButton.Pressed = false;
						adminLogTypeButton.Visible = this.ShouldShowType(adminLogTypeButton);
					}
				}
			}
			this.UpdateLogs();
		}

		// Token: 0x06001ECF RID: 7887 RVA: 0x000B48FC File Offset: 0x000B2AFC
		public void UpdateTypes()
		{
			foreach (Control control in this.TypesContainer.Children)
			{
				AdminLogTypeButton adminLogTypeButton = control as AdminLogTypeButton;
				if (adminLogTypeButton != null)
				{
					adminLogTypeButton.Visible = this.ShouldShowType(adminLogTypeButton);
				}
			}
		}

		// Token: 0x06001ED0 RID: 7888 RVA: 0x000B4964 File Offset: 0x000B2B64
		private void UpdatePlayers()
		{
			foreach (Control control in this.PlayersContainer.Children)
			{
				AdminLogPlayerButton adminLogPlayerButton = control as AdminLogPlayerButton;
				if (adminLogPlayerButton != null)
				{
					adminLogPlayerButton.Visible = this.ShouldShowPlayer(adminLogPlayerButton);
				}
			}
		}

		// Token: 0x06001ED1 RID: 7889 RVA: 0x000B49CC File Offset: 0x000B2BCC
		private void UpdateLogs()
		{
			this.ShownLogs = 0;
			foreach (Control control in this.LogsContainer.Children)
			{
				AdminLogLabel adminLogLabel = control as AdminLogLabel;
				if (adminLogLabel != null)
				{
					control.Visible = this.ShouldShowLog(adminLogLabel);
					if (control.Visible)
					{
						int shownLogs = this.ShownLogs;
						this.ShownLogs = shownLogs + 1;
					}
				}
			}
			this.UpdateCount(null, null);
		}

		// Token: 0x06001ED2 RID: 7890 RVA: 0x000B4A70 File Offset: 0x000B2C70
		[NullableContext(1)]
		private bool ShouldShowType(AdminLogTypeButton button)
		{
			return button.Text != null && button.Text.Contains(this.TypeSearch.Text, StringComparison.OrdinalIgnoreCase);
		}

		// Token: 0x06001ED3 RID: 7891 RVA: 0x000B4A93 File Offset: 0x000B2C93
		[NullableContext(1)]
		private bool ShouldShowPlayer(AdminLogPlayerButton button)
		{
			return button.Text != null && button.Text.Contains(this.PlayerSearch.Text, StringComparison.OrdinalIgnoreCase);
		}

		// Token: 0x06001ED4 RID: 7892 RVA: 0x000B4AB8 File Offset: 0x000B2CB8
		[NullableContext(1)]
		private bool ShouldShowLog(AdminLogLabel label)
		{
			return this.SelectedTypes.Contains(label.Log.Type) && (this.SelectedPlayers.Count + label.Log.Players.Length == 0 || this.SelectedPlayers.Overlaps(label.Log.Players)) && this.SelectedImpacts.Contains(label.Log.Impact) && label.Log.Message.Contains(this.LogSearch.Text, StringComparison.OrdinalIgnoreCase);
		}

		// Token: 0x06001ED5 RID: 7893 RVA: 0x000B4B58 File Offset: 0x000B2D58
		[NullableContext(1)]
		private void TypeButtonPressed(BaseButton.ButtonEventArgs args)
		{
			AdminLogTypeButton adminLogTypeButton = (AdminLogTypeButton)args.Button;
			if (adminLogTypeButton.Pressed)
			{
				this.SelectedTypes.Add(adminLogTypeButton.Type);
			}
			else
			{
				this.SelectedTypes.Remove(adminLogTypeButton.Type);
			}
			this.UpdateLogs();
		}

		// Token: 0x06001ED6 RID: 7894 RVA: 0x000B4BA8 File Offset: 0x000B2DA8
		[NullableContext(1)]
		private void PlayerButtonPressed(BaseButton.ButtonEventArgs args)
		{
			AdminLogPlayerButton adminLogPlayerButton = (AdminLogPlayerButton)args.Button;
			if (adminLogPlayerButton.Pressed)
			{
				this.SelectedPlayers.Add(adminLogPlayerButton.Id);
			}
			else
			{
				this.SelectedPlayers.Remove(adminLogPlayerButton.Id);
			}
			this.UpdateLogs();
		}

		// Token: 0x06001ED7 RID: 7895 RVA: 0x000B4BF8 File Offset: 0x000B2DF8
		[NullableContext(1)]
		private void ImpactButtonPressed(BaseButton.ButtonEventArgs args)
		{
			AdminLogImpactButton adminLogImpactButton = (AdminLogImpactButton)args.Button;
			if (adminLogImpactButton.Pressed)
			{
				this.SelectedImpacts.Add(adminLogImpactButton.Impact);
			}
			else
			{
				this.SelectedImpacts.Remove(adminLogImpactButton.Impact);
			}
			this.UpdateLogs();
		}

		// Token: 0x06001ED8 RID: 7896 RVA: 0x000B4C48 File Offset: 0x000B2E48
		[NullableContext(1)]
		private void SetImpacts(LogImpact[] impacts)
		{
			this.LogImpactContainer.RemoveAllChildren();
			foreach (LogImpact logImpact in impacts)
			{
				AdminLogImpactButton adminLogImpactButton = new AdminLogImpactButton(logImpact)
				{
					Text = logImpact.ToString()
				};
				this.SelectedImpacts.Add(logImpact);
				adminLogImpactButton.OnPressed += this.ImpactButtonPressed;
				this.LogImpactContainer.AddChild(adminLogImpactButton);
			}
			int i = impacts.Length;
			if (i == 0)
			{
				return;
			}
			if (i != 1)
			{
				for (int j = 0; j < impacts.Length - 1; j++)
				{
					this.LogImpactContainer.GetChild(j).StyleClasses.Add("ButtonSquare");
				}
				this.LogImpactContainer.GetChild(this.LogImpactContainer.ChildCount - 1).StyleClasses.Add("OpenLeft");
				return;
			}
			this.LogImpactContainer.GetChild(0).StyleClasses.Add("OpenRight");
		}

		// Token: 0x06001ED9 RID: 7897 RVA: 0x000B4D3C File Offset: 0x000B2F3C
		[NullableContext(1)]
		private void SetTypes(LogType[] types)
		{
			HashSet<LogType> hashSet = types.ToHashSet<LogType>();
			SortedSet<AdminLogTypeButton> sortedSet = new SortedSet<AdminLogTypeButton>(this._adminLogTypeButtonComparer);
			Control[] array = this.TypesContainer.Children.ToArray<Control>();
			for (int i = 0; i < array.Length; i++)
			{
				AdminLogTypeButton adminLogTypeButton = array[i] as AdminLogTypeButton;
				if (adminLogTypeButton != null && hashSet.Remove(adminLogTypeButton.Type))
				{
					sortedSet.Add(adminLogTypeButton);
				}
			}
			foreach (LogType logType in hashSet)
			{
				AdminLogTypeButton adminLogTypeButton2 = new AdminLogTypeButton(logType)
				{
					Text = logType.ToString(),
					Pressed = true
				};
				this.SelectedTypes.Add(logType);
				adminLogTypeButton2.OnPressed += this.TypeButtonPressed;
				sortedSet.Add(adminLogTypeButton2);
			}
			this.TypesContainer.RemoveAllChildren();
			foreach (AdminLogTypeButton adminLogTypeButton3 in sortedSet)
			{
				this.TypesContainer.AddChild(adminLogTypeButton3);
			}
			this.UpdateLogs();
		}

		// Token: 0x06001EDA RID: 7898 RVA: 0x000B4E80 File Offset: 0x000B3080
		[NullableContext(1)]
		public void SetPlayers(Dictionary<Guid, string> players)
		{
			SortedSet<AdminLogPlayerButton> sortedSet = new SortedSet<AdminLogPlayerButton>(this._adminLogPlayerButtonComparer);
			Control[] array = this.PlayersContainer.Children.ToArray<Control>();
			for (int i = 0; i < array.Length; i++)
			{
				AdminLogPlayerButton adminLogPlayerButton = array[i] as AdminLogPlayerButton;
				if (adminLogPlayerButton != null && players.Remove(adminLogPlayerButton.Id))
				{
					sortedSet.Add(adminLogPlayerButton);
				}
			}
			foreach (KeyValuePair<Guid, string> keyValuePair in players)
			{
				Guid guid;
				string text;
				keyValuePair.Deconstruct(out guid, out text);
				Guid guid2 = guid;
				string text2 = text;
				AdminLogPlayerButton adminLogPlayerButton2 = new AdminLogPlayerButton(guid2)
				{
					Text = text2,
					Pressed = true
				};
				this.SelectedPlayers.Add(guid2);
				adminLogPlayerButton2.OnPressed += this.PlayerButtonPressed;
				sortedSet.Add(adminLogPlayerButton2);
			}
			this.PlayersContainer.RemoveAllChildren();
			foreach (AdminLogPlayerButton adminLogPlayerButton3 in sortedSet)
			{
				this.PlayersContainer.AddChild(adminLogPlayerButton3);
			}
			this.UpdateLogs();
		}

		// Token: 0x06001EDB RID: 7899 RVA: 0x000B4FC4 File Offset: 0x000B31C4
		[NullableContext(1)]
		public void AddLogs(List<SharedAdminLog> logs)
		{
			Span<SharedAdminLog> span = CollectionsMarshal.AsSpan<SharedAdminLog>(logs);
			for (int i = 0; i < span.Length; i++)
			{
				ref SharedAdminLog log = ref span[i];
				HSeparator hseparator = new HSeparator();
				AdminLogLabel adminLogLabel = new AdminLogLabel(ref log, hseparator);
				adminLogLabel.Visible = this.ShouldShowLog(adminLogLabel);
				int num = this.TotalLogs;
				this.TotalLogs = num + 1;
				if (adminLogLabel.Visible)
				{
					num = this.ShownLogs;
					this.ShownLogs = num + 1;
				}
				this.LogsContainer.AddChild(adminLogLabel);
				this.LogsContainer.AddChild(hseparator);
			}
			this.UpdateCount(null, null);
		}

		// Token: 0x06001EDC RID: 7900 RVA: 0x000B506A File Offset: 0x000B326A
		[NullableContext(1)]
		public void SetLogs(List<SharedAdminLog> logs)
		{
			this.LogsContainer.RemoveAllChildren();
			this.UpdateCount(new int?(0), new int?(0));
			this.AddLogs(logs);
		}

		// Token: 0x06001EDD RID: 7901 RVA: 0x000B5090 File Offset: 0x000B3290
		private void UpdateCount(int? shown = null, int? total = null)
		{
			if (shown != null)
			{
				this.ShownLogs = shown.Value;
			}
			if (total != null)
			{
				this.TotalLogs = total.Value;
			}
			this.Count.Text = Loc.GetString("admin-logs-count", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("showing", this.ShownLogs),
				new ValueTuple<string, object>("total", this.TotalLogs)
			});
		}

		// Token: 0x06001EDE RID: 7902 RVA: 0x000B511C File Offset: 0x000B331C
		protected override void Dispose(bool disposing)
		{
			base.Dispose(disposing);
			this.TypeSearch.OnTextChanged -= this.TypeSearchChanged;
			this.PlayerSearch.OnTextChanged -= this.PlayerSearchChanged;
			this.LogSearch.OnTextChanged -= this.LogSearchChanged;
			this.SelectAllTypesButton.OnPressed -= this.SelectAllTypes;
			this.SelectNoTypesButton.OnPressed -= this.SelectNoTypes;
			this.SelectAllPlayersButton.OnPressed -= this.SelectAllPlayers;
			this.SelectNoPlayersButton.OnPressed -= this.SelectNoPlayers;
			this.RoundSpinBox.IsValid = null;
			this.RoundSpinBox.ValueChanged -= this.RoundSpinBoxChanged;
			this.ResetRoundButton.OnPressed -= this.ResetRoundPressed;
		}

		// Token: 0x170006AD RID: 1709
		// (get) Token: 0x06001EDF RID: 7903 RVA: 0x000B520B File Offset: 0x000B340B
		private SpinBox RoundSpinBox
		{
			get
			{
				return base.FindControl<SpinBox>("RoundSpinBox");
			}
		}

		// Token: 0x170006AE RID: 1710
		// (get) Token: 0x06001EE0 RID: 7904 RVA: 0x000B5218 File Offset: 0x000B3418
		private Button ResetRoundButton
		{
			get
			{
				return base.FindControl<Button>("ResetRoundButton");
			}
		}

		// Token: 0x170006AF RID: 1711
		// (get) Token: 0x06001EE1 RID: 7905 RVA: 0x000B5225 File Offset: 0x000B3425
		public LineEdit TypeSearch
		{
			get
			{
				return base.FindControl<LineEdit>("TypeSearch");
			}
		}

		// Token: 0x170006B0 RID: 1712
		// (get) Token: 0x06001EE2 RID: 7906 RVA: 0x000B5232 File Offset: 0x000B3432
		private Button SelectAllTypesButton
		{
			get
			{
				return base.FindControl<Button>("SelectAllTypesButton");
			}
		}

		// Token: 0x170006B1 RID: 1713
		// (get) Token: 0x06001EE3 RID: 7907 RVA: 0x000B523F File Offset: 0x000B343F
		private Button SelectNoTypesButton
		{
			get
			{
				return base.FindControl<Button>("SelectNoTypesButton");
			}
		}

		// Token: 0x170006B2 RID: 1714
		// (get) Token: 0x06001EE4 RID: 7908 RVA: 0x000B524C File Offset: 0x000B344C
		public BoxContainer TypesContainer
		{
			get
			{
				return base.FindControl<BoxContainer>("TypesContainer");
			}
		}

		// Token: 0x170006B3 RID: 1715
		// (get) Token: 0x06001EE5 RID: 7909 RVA: 0x000B5259 File Offset: 0x000B3459
		public LineEdit PlayerSearch
		{
			get
			{
				return base.FindControl<LineEdit>("PlayerSearch");
			}
		}

		// Token: 0x170006B4 RID: 1716
		// (get) Token: 0x06001EE6 RID: 7910 RVA: 0x000B5266 File Offset: 0x000B3466
		private Button SelectAllPlayersButton
		{
			get
			{
				return base.FindControl<Button>("SelectAllPlayersButton");
			}
		}

		// Token: 0x170006B5 RID: 1717
		// (get) Token: 0x06001EE7 RID: 7911 RVA: 0x000B5273 File Offset: 0x000B3473
		private Button SelectNoPlayersButton
		{
			get
			{
				return base.FindControl<Button>("SelectNoPlayersButton");
			}
		}

		// Token: 0x170006B6 RID: 1718
		// (get) Token: 0x06001EE8 RID: 7912 RVA: 0x000B5280 File Offset: 0x000B3480
		public BoxContainer PlayersContainer
		{
			get
			{
				return base.FindControl<BoxContainer>("PlayersContainer");
			}
		}

		// Token: 0x170006B7 RID: 1719
		// (get) Token: 0x06001EE9 RID: 7913 RVA: 0x000B528D File Offset: 0x000B348D
		private BoxContainer TopRightContainer
		{
			get
			{
				return base.FindControl<BoxContainer>("TopRightContainer");
			}
		}

		// Token: 0x170006B8 RID: 1720
		// (get) Token: 0x06001EEA RID: 7914 RVA: 0x000B529A File Offset: 0x000B349A
		private BoxContainer LogImpactContainer
		{
			get
			{
				return base.FindControl<BoxContainer>("LogImpactContainer");
			}
		}

		// Token: 0x170006B9 RID: 1721
		// (get) Token: 0x06001EEB RID: 7915 RVA: 0x00055A0D File Offset: 0x00053C0D
		public Label Count
		{
			get
			{
				return base.FindControl<Label>("Count");
			}
		}

		// Token: 0x170006BA RID: 1722
		// (get) Token: 0x06001EEC RID: 7916 RVA: 0x000B52A7 File Offset: 0x000B34A7
		public Button PopOutButton
		{
			get
			{
				return base.FindControl<Button>("PopOutButton");
			}
		}

		// Token: 0x170006BB RID: 1723
		// (get) Token: 0x06001EED RID: 7917 RVA: 0x000B52B4 File Offset: 0x000B34B4
		public LineEdit LogSearch
		{
			get
			{
				return base.FindControl<LineEdit>("LogSearch");
			}
		}

		// Token: 0x170006BC RID: 1724
		// (get) Token: 0x06001EEE RID: 7918 RVA: 0x000758FC File Offset: 0x00073AFC
		public Button RefreshButton
		{
			get
			{
				return base.FindControl<Button>("RefreshButton");
			}
		}

		// Token: 0x170006BD RID: 1725
		// (get) Token: 0x06001EEF RID: 7919 RVA: 0x000B52C1 File Offset: 0x000B34C1
		public Button NextButton
		{
			get
			{
				return base.FindControl<Button>("NextButton");
			}
		}

		// Token: 0x170006BE RID: 1726
		// (get) Token: 0x06001EF0 RID: 7920 RVA: 0x000B52CE File Offset: 0x000B34CE
		public BoxContainer LogsContainer
		{
			get
			{
				return base.FindControl<BoxContainer>("LogsContainer");
			}
		}

		// Token: 0x06001EF2 RID: 7922 RVA: 0x000B52F0 File Offset: 0x000B34F0
		static void xaml(IServiceProvider A_0, Control A_1)
		{
			XamlIlContext.Context<Control> context = new XamlIlContext.Context<Control>(A_0, null, "resm:Content.Client.Administration.UI.Logs.AdminLogsControl.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			PanelContainer panelContainer = new PanelContainer();
			panelContainer.PanelOverride = new StyleBoxFlat
			{
				BackgroundColor = Color.FromXaml("#252525")
			};
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 0;
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 1;
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 0;
			boxContainer3.MinWidth = 400f;
			Control control = new Label
			{
				Text = (string)new LocExtension("admin-logs-round").ProvideValue()
			};
			boxContainer3.XamlChildren.Add(control);
			SpinBox spinBox = new SpinBox();
			spinBox.Name = "RoundSpinBox";
			control = spinBox;
			context.RobustNameScope.Register("RoundSpinBox", control);
			spinBox.Value = 0;
			spinBox.MinWidth = 150f;
			control = spinBox;
			boxContainer3.XamlChildren.Add(control);
			control = new Control
			{
				HorizontalExpand = true
			};
			boxContainer3.XamlChildren.Add(control);
			Button button = new Button();
			button.Name = "ResetRoundButton";
			control = button;
			context.RobustNameScope.Register("ResetRoundButton", control);
			button.Text = (string)new LocExtension("admin-logs-reset").ProvideValue();
			button.HorizontalAlignment = 3;
			string item = "OpenRight";
			button.StyleClasses.Add(item);
			control = button;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer2.XamlChildren.Add(control);
			BoxContainer boxContainer4 = new BoxContainer();
			boxContainer4.Orientation = 0;
			boxContainer4.VerticalExpand = true;
			BoxContainer boxContainer5 = new BoxContainer();
			boxContainer5.Orientation = 1;
			boxContainer5.MinWidth = 200f;
			LineEdit lineEdit = new LineEdit();
			lineEdit.Name = "TypeSearch";
			control = lineEdit;
			context.RobustNameScope.Register("TypeSearch", control);
			lineEdit.Access = new AccessLevel?(0);
			item = "actionSearchBox";
			lineEdit.StyleClasses.Add(item);
			lineEdit.HorizontalExpand = true;
			lineEdit.PlaceHolder = (string)new LocExtension("admin-logs-search-types-placeholder").ProvideValue();
			control = lineEdit;
			boxContainer5.XamlChildren.Add(control);
			BoxContainer boxContainer6 = new BoxContainer();
			boxContainer6.Orientation = 0;
			Button button2 = new Button();
			button2.Name = "SelectAllTypesButton";
			control = button2;
			context.RobustNameScope.Register("SelectAllTypesButton", control);
			button2.Text = (string)new LocExtension("admin-logs-select-all").ProvideValue();
			button2.MinWidth = 100f;
			item = "ButtonSquare";
			button2.StyleClasses.Add(item);
			control = button2;
			boxContainer6.XamlChildren.Add(control);
			Button button3 = new Button();
			button3.Name = "SelectNoTypesButton";
			control = button3;
			context.RobustNameScope.Register("SelectNoTypesButton", control);
			button3.Text = (string)new LocExtension("admin-logs-select-none").ProvideValue();
			button3.MinWidth = 100f;
			item = "ButtonSquare";
			button3.StyleClasses.Add(item);
			control = button3;
			boxContainer6.XamlChildren.Add(control);
			control = boxContainer6;
			boxContainer5.XamlChildren.Add(control);
			ScrollContainer scrollContainer = new ScrollContainer();
			scrollContainer.VerticalExpand = true;
			BoxContainer boxContainer7 = new BoxContainer();
			boxContainer7.Name = "TypesContainer";
			control = boxContainer7;
			context.RobustNameScope.Register("TypesContainer", control);
			boxContainer7.Access = new AccessLevel?(0);
			boxContainer7.Orientation = 1;
			control = boxContainer7;
			scrollContainer.XamlChildren.Add(control);
			control = scrollContainer;
			boxContainer5.XamlChildren.Add(control);
			control = boxContainer5;
			boxContainer4.XamlChildren.Add(control);
			control = new VSeparator();
			boxContainer4.XamlChildren.Add(control);
			BoxContainer boxContainer8 = new BoxContainer();
			boxContainer8.Orientation = 1;
			boxContainer8.MinWidth = 200f;
			LineEdit lineEdit2 = new LineEdit();
			lineEdit2.Name = "PlayerSearch";
			control = lineEdit2;
			context.RobustNameScope.Register("PlayerSearch", control);
			lineEdit2.Access = new AccessLevel?(0);
			item = "actionSearchBox";
			lineEdit2.StyleClasses.Add(item);
			lineEdit2.HorizontalExpand = true;
			lineEdit2.PlaceHolder = (string)new LocExtension("admin-logs-search-players-placeholder").ProvideValue();
			control = lineEdit2;
			boxContainer8.XamlChildren.Add(control);
			BoxContainer boxContainer9 = new BoxContainer();
			boxContainer9.Orientation = 0;
			Button button4 = new Button();
			button4.Name = "SelectAllPlayersButton";
			control = button4;
			context.RobustNameScope.Register("SelectAllPlayersButton", control);
			button4.Text = (string)new LocExtension("admin-logs-select-all").ProvideValue();
			button4.MinWidth = 100f;
			item = "ButtonSquare";
			button4.StyleClasses.Add(item);
			control = button4;
			boxContainer9.XamlChildren.Add(control);
			Button button5 = new Button();
			button5.Name = "SelectNoPlayersButton";
			control = button5;
			context.RobustNameScope.Register("SelectNoPlayersButton", control);
			button5.Text = (string)new LocExtension("admin-logs-select-none").ProvideValue();
			button5.MinWidth = 100f;
			item = "ButtonSquare";
			button5.StyleClasses.Add(item);
			control = button5;
			boxContainer9.XamlChildren.Add(control);
			control = boxContainer9;
			boxContainer8.XamlChildren.Add(control);
			ScrollContainer scrollContainer2 = new ScrollContainer();
			scrollContainer2.VerticalExpand = true;
			BoxContainer boxContainer10 = new BoxContainer();
			boxContainer10.Name = "PlayersContainer";
			control = boxContainer10;
			context.RobustNameScope.Register("PlayersContainer", control);
			boxContainer10.Access = new AccessLevel?(0);
			boxContainer10.Orientation = 1;
			control = boxContainer10;
			scrollContainer2.XamlChildren.Add(control);
			control = scrollContainer2;
			boxContainer8.XamlChildren.Add(control);
			control = boxContainer8;
			boxContainer4.XamlChildren.Add(control);
			control = new VSeparator();
			boxContainer4.XamlChildren.Add(control);
			control = boxContainer4;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer11 = new BoxContainer();
			boxContainer11.Orientation = 1;
			boxContainer11.HorizontalExpand = true;
			BoxContainer boxContainer12 = new BoxContainer();
			boxContainer12.Name = "TopRightContainer";
			control = boxContainer12;
			context.RobustNameScope.Register("TopRightContainer", control);
			BoxContainer boxContainer13 = new BoxContainer();
			boxContainer13.Name = "LogImpactContainer";
			control = boxContainer13;
			context.RobustNameScope.Register("LogImpactContainer", control);
			boxContainer13.Orientation = 0;
			control = boxContainer13;
			boxContainer12.XamlChildren.Add(control);
			control = new Control
			{
				HorizontalExpand = true
			};
			boxContainer12.XamlChildren.Add(control);
			Label label = new Label();
			label.Name = "Count";
			control = label;
			context.RobustNameScope.Register("Count", control);
			label.Access = new AccessLevel?(0);
			control = label;
			boxContainer12.XamlChildren.Add(control);
			control = new Control
			{
				HorizontalExpand = true
			};
			boxContainer12.XamlChildren.Add(control);
			Button button6 = new Button();
			button6.Name = "PopOutButton";
			control = button6;
			context.RobustNameScope.Register("PopOutButton", control);
			button6.Access = new AccessLevel?(0);
			button6.Text = (string)new LocExtension("admin-logs-pop-out").ProvideValue();
			control = button6;
			boxContainer12.XamlChildren.Add(control);
			control = boxContainer12;
			boxContainer11.XamlChildren.Add(control);
			BoxContainer boxContainer14 = new BoxContainer();
			boxContainer14.Orientation = 0;
			LineEdit lineEdit3 = new LineEdit();
			lineEdit3.Name = "LogSearch";
			control = lineEdit3;
			context.RobustNameScope.Register("LogSearch", control);
			lineEdit3.Access = new AccessLevel?(0);
			item = "actionSearchBox";
			lineEdit3.StyleClasses.Add(item);
			lineEdit3.HorizontalExpand = true;
			lineEdit3.PlaceHolder = (string)new LocExtension("admin-logs-search-logs-placeholder").ProvideValue();
			control = lineEdit3;
			boxContainer14.XamlChildren.Add(control);
			Button button7 = new Button();
			button7.Name = "RefreshButton";
			control = button7;
			context.RobustNameScope.Register("RefreshButton", control);
			button7.Access = new AccessLevel?(0);
			button7.Text = (string)new LocExtension("admin-logs-refresh").ProvideValue();
			item = "ButtonSquare";
			button7.StyleClasses.Add(item);
			control = button7;
			boxContainer14.XamlChildren.Add(control);
			Button button8 = new Button();
			button8.Name = "NextButton";
			control = button8;
			context.RobustNameScope.Register("NextButton", control);
			button8.Access = new AccessLevel?(0);
			button8.Text = (string)new LocExtension("admin-logs-next").ProvideValue();
			item = "OpenLeft";
			button8.StyleClasses.Add(item);
			control = button8;
			boxContainer14.XamlChildren.Add(control);
			control = boxContainer14;
			boxContainer11.XamlChildren.Add(control);
			ScrollContainer scrollContainer3 = new ScrollContainer();
			scrollContainer3.VerticalExpand = true;
			scrollContainer3.HorizontalExpand = true;
			scrollContainer3.HScrollEnabled = false;
			BoxContainer boxContainer15 = new BoxContainer();
			boxContainer15.Name = "LogsContainer";
			control = boxContainer15;
			context.RobustNameScope.Register("LogsContainer", control);
			boxContainer15.Access = new AccessLevel?(0);
			boxContainer15.Orientation = 1;
			boxContainer15.VerticalExpand = true;
			control = boxContainer15;
			scrollContainer3.XamlChildren.Add(control);
			control = scrollContainer3;
			boxContainer11.XamlChildren.Add(control);
			control = boxContainer11;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			panelContainer.XamlChildren.Add(control);
			control = panelContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06001EF3 RID: 7923 RVA: 0x000B5E57 File Offset: 0x000B4057
		private static void !XamlIlPopulateTrampoline(AdminLogsControl A_0)
		{
			AdminLogsControl.Populate:Content.Client.Administration.UI.Logs.AdminLogsControl.xaml(null, A_0);
		}

		// Token: 0x04000EE7 RID: 3815
		[Nullable(1)]
		private readonly Comparer<AdminLogTypeButton> _adminLogTypeButtonComparer = Comparer<AdminLogTypeButton>.Create((AdminLogTypeButton a, AdminLogTypeButton b) => string.Compare(a.Type.ToString(), b.Type.ToString(), StringComparison.Ordinal));

		// Token: 0x04000EE8 RID: 3816
		[Nullable(1)]
		private readonly Comparer<AdminLogPlayerButton> _adminLogPlayerButtonComparer = Comparer<AdminLogPlayerButton>.Create((AdminLogPlayerButton a, AdminLogPlayerButton b) => string.Compare(a.Text, b.Text, StringComparison.Ordinal));
	}
}
