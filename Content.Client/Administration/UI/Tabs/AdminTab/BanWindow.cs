using System;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.Administration.UI.CustomControls;
using Content.Shared.Administration;
using Robust.Client.AutoGenerated;
using Robust.Client.Console;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.Console;
using Robust.Shared.IoC;
using Robust.Shared.Maths;
using Robust.Shared.Utility;

namespace Content.Client.Administration.UI.Tabs.AdminTab
{
	// Token: 0x020004AA RID: 1194
	[GenerateTypedNameReferences]
	public sealed class BanWindow : DefaultWindow
	{
		// Token: 0x06001D61 RID: 7521 RVA: 0x000ABB6C File Offset: 0x000A9D6C
		public BanWindow()
		{
			BanWindow.!XamlIlPopulateTrampoline(this);
			this.PlayerNameLine.OnTextChanged += delegate(LineEdit.LineEditEventArgs _)
			{
				this.OnPlayerNameChanged();
			};
			this.PlayerList.OnSelectionChanged += this.OnPlayerSelectionChanged;
			this.SubmitButton.OnPressed += this.SubmitButtonOnOnPressed;
			this.MinutesLine.OnTextChanged += this.UpdateButtonsText;
			this.HourButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this.AddMinutes(60U);
			};
			this.DayButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this.AddMinutes(1440U);
			};
			this.WeekButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this.AddMinutes(10080U);
			};
			this.MonthButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this.AddMinutes(43200U);
			};
		}

		// Token: 0x06001D62 RID: 7522 RVA: 0x000ABC3D File Offset: 0x000A9E3D
		[NullableContext(1)]
		private bool TryGetMinutes(string str, out uint minutes)
		{
			if (string.IsNullOrWhiteSpace(str))
			{
				minutes = 0U;
				return true;
			}
			return uint.TryParse(str, out minutes);
		}

		// Token: 0x06001D63 RID: 7523 RVA: 0x000ABC54 File Offset: 0x000A9E54
		private void AddMinutes(uint add)
		{
			uint num;
			if (!this.TryGetMinutes(this.MinutesLine.Text, out num))
			{
				return;
			}
			LineEdit minutesLine = this.MinutesLine;
			DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(0, 1);
			defaultInterpolatedStringHandler.AppendFormatted<uint>(num + add);
			minutesLine.Text = defaultInterpolatedStringHandler.ToStringAndClear();
			this.UpdateButtons(num + add);
		}

		// Token: 0x06001D64 RID: 7524 RVA: 0x000ABCA8 File Offset: 0x000A9EA8
		[NullableContext(1)]
		private void UpdateButtonsText(LineEdit.LineEditEventArgs obj)
		{
			uint minutes;
			if (!this.TryGetMinutes(obj.Text, out minutes))
			{
				return;
			}
			this.UpdateButtons(minutes);
		}

		// Token: 0x06001D65 RID: 7525 RVA: 0x000ABCD0 File Offset: 0x000A9ED0
		private void UpdateButtons(uint minutes)
		{
			Button hourButton = this.HourButton;
			DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(6, 1);
			defaultInterpolatedStringHandler.AppendLiteral("+1h (");
			defaultInterpolatedStringHandler.AppendFormatted<uint>(minutes / 60U);
			defaultInterpolatedStringHandler.AppendLiteral(")");
			hourButton.Text = defaultInterpolatedStringHandler.ToStringAndClear();
			Button dayButton = this.DayButton;
			defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(6, 1);
			defaultInterpolatedStringHandler.AppendLiteral("+1d (");
			defaultInterpolatedStringHandler.AppendFormatted<uint>(minutes / 1440U);
			defaultInterpolatedStringHandler.AppendLiteral(")");
			dayButton.Text = defaultInterpolatedStringHandler.ToStringAndClear();
			Button weekButton = this.WeekButton;
			defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(6, 1);
			defaultInterpolatedStringHandler.AppendLiteral("+1w (");
			defaultInterpolatedStringHandler.AppendFormatted<uint>(minutes / 10080U);
			defaultInterpolatedStringHandler.AppendLiteral(")");
			weekButton.Text = defaultInterpolatedStringHandler.ToStringAndClear();
			Button monthButton = this.MonthButton;
			defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(6, 1);
			defaultInterpolatedStringHandler.AppendLiteral("+1M (");
			defaultInterpolatedStringHandler.AppendFormatted<uint>(minutes / 43200U);
			defaultInterpolatedStringHandler.AppendLiteral(")");
			monthButton.Text = defaultInterpolatedStringHandler.ToStringAndClear();
		}

		// Token: 0x06001D66 RID: 7526 RVA: 0x000ABDDE File Offset: 0x000A9FDE
		private void OnPlayerNameChanged()
		{
			this.SubmitButton.Disabled = string.IsNullOrEmpty(this.PlayerNameLine.Text);
		}

		// Token: 0x06001D67 RID: 7527 RVA: 0x000ABDFB File Offset: 0x000A9FFB
		[NullableContext(2)]
		public void OnPlayerSelectionChanged(PlayerInfo player)
		{
			this.PlayerNameLine.Text = (((player != null) ? player.Username : null) ?? string.Empty);
			this.OnPlayerNameChanged();
		}

		// Token: 0x06001D68 RID: 7528 RVA: 0x000ABE24 File Offset: 0x000AA024
		[NullableContext(1)]
		private void SubmitButtonOnOnPressed(BaseButton.ButtonEventArgs obj)
		{
			IConsoleHost consoleHost = IoCManager.Resolve<IClientConsoleHost>();
			DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(13, 4);
			defaultInterpolatedStringHandler.AppendLiteral("ban \"");
			defaultInterpolatedStringHandler.AppendFormatted(this.PlayerNameLine.Text);
			defaultInterpolatedStringHandler.AppendLiteral("\" \"");
			defaultInterpolatedStringHandler.AppendFormatted(CommandParsing.Escape(this.ReasonLine.Text));
			defaultInterpolatedStringHandler.AppendLiteral("\" \"");
			defaultInterpolatedStringHandler.AppendFormatted(this.MinutesLine.Text);
			defaultInterpolatedStringHandler.AppendLiteral("\" ");
			defaultInterpolatedStringHandler.AppendFormatted<bool>(this.KickCheckBox.Pressed);
			consoleHost.ExecuteCommand(defaultInterpolatedStringHandler.ToStringAndClear());
		}

		// Token: 0x17000622 RID: 1570
		// (get) Token: 0x06001D69 RID: 7529 RVA: 0x000ABEC9 File Offset: 0x000AA0C9
		private LineEdit PlayerNameLine
		{
			get
			{
				return base.FindControl<LineEdit>("PlayerNameLine");
			}
		}

		// Token: 0x17000623 RID: 1571
		// (get) Token: 0x06001D6A RID: 7530 RVA: 0x000ABED6 File Offset: 0x000AA0D6
		private LineEdit ReasonLine
		{
			get
			{
				return base.FindControl<LineEdit>("ReasonLine");
			}
		}

		// Token: 0x17000624 RID: 1572
		// (get) Token: 0x06001D6B RID: 7531 RVA: 0x000ABEE3 File Offset: 0x000AA0E3
		private LineEdit MinutesLine
		{
			get
			{
				return base.FindControl<LineEdit>("MinutesLine");
			}
		}

		// Token: 0x17000625 RID: 1573
		// (get) Token: 0x06001D6C RID: 7532 RVA: 0x000ABEF0 File Offset: 0x000AA0F0
		private Button HourButton
		{
			get
			{
				return base.FindControl<Button>("HourButton");
			}
		}

		// Token: 0x17000626 RID: 1574
		// (get) Token: 0x06001D6D RID: 7533 RVA: 0x000ABEFD File Offset: 0x000AA0FD
		private Button DayButton
		{
			get
			{
				return base.FindControl<Button>("DayButton");
			}
		}

		// Token: 0x17000627 RID: 1575
		// (get) Token: 0x06001D6E RID: 7534 RVA: 0x000ABF0A File Offset: 0x000AA10A
		private Button WeekButton
		{
			get
			{
				return base.FindControl<Button>("WeekButton");
			}
		}

		// Token: 0x17000628 RID: 1576
		// (get) Token: 0x06001D6F RID: 7535 RVA: 0x000ABF17 File Offset: 0x000AA117
		private Button MonthButton
		{
			get
			{
				return base.FindControl<Button>("MonthButton");
			}
		}

		// Token: 0x17000629 RID: 1577
		// (get) Token: 0x06001D70 RID: 7536 RVA: 0x000ABF24 File Offset: 0x000AA124
		private CheckBox KickCheckBox
		{
			get
			{
				return base.FindControl<CheckBox>("KickCheckBox");
			}
		}

		// Token: 0x1700062A RID: 1578
		// (get) Token: 0x06001D71 RID: 7537 RVA: 0x000ABF31 File Offset: 0x000AA131
		private PlayerListControl PlayerList
		{
			get
			{
				return base.FindControl<PlayerListControl>("PlayerList");
			}
		}

		// Token: 0x1700062B RID: 1579
		// (get) Token: 0x06001D72 RID: 7538 RVA: 0x00091514 File Offset: 0x0008F714
		private Button SubmitButton
		{
			get
			{
				return base.FindControl<Button>("SubmitButton");
			}
		}

		// Token: 0x06001D78 RID: 7544 RVA: 0x000ABF78 File Offset: 0x000AA178
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.Administration.UI.Tabs.AdminTab.BanWindow.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Title = (string)new LocExtension("Ban").ProvideValue();
			A_1.MinSize = new Vector2(425f, 325f);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 0;
			Control control = new Label
			{
				Text = (string)new LocExtension("Player").ProvideValue(),
				MinWidth = 100f
			};
			boxContainer2.XamlChildren.Add(control);
			control = new Control
			{
				MinWidth = 50f
			};
			boxContainer2.XamlChildren.Add(control);
			LineEdit lineEdit = new LineEdit();
			lineEdit.Name = "PlayerNameLine";
			control = lineEdit;
			context.RobustNameScope.Register("PlayerNameLine", control);
			lineEdit.MinWidth = 100f;
			lineEdit.HorizontalExpand = true;
			control = lineEdit;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("Reason").ProvideValue(),
				MinSize = new Vector2(100f, 0f)
			};
			boxContainer3.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(50f, 0f)
			};
			boxContainer3.XamlChildren.Add(control);
			LineEdit lineEdit2 = new LineEdit();
			lineEdit2.Name = "ReasonLine";
			control = lineEdit2;
			context.RobustNameScope.Register("ReasonLine", control);
			lineEdit2.MinSize = new Vector2(100f, 0f);
			lineEdit2.HorizontalExpand = true;
			control = lineEdit2;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer4 = new BoxContainer();
			boxContainer4.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("Minutes").ProvideValue(),
				MinWidth = 100f
			};
			boxContainer4.XamlChildren.Add(control);
			control = new Control
			{
				MinWidth = 50f
			};
			boxContainer4.XamlChildren.Add(control);
			LineEdit lineEdit3 = new LineEdit();
			lineEdit3.Name = "MinutesLine";
			control = lineEdit3;
			context.RobustNameScope.Register("MinutesLine", control);
			lineEdit3.MinWidth = 100f;
			lineEdit3.HorizontalExpand = true;
			lineEdit3.PlaceHolder = (string)new LocExtension("0 minutes for a permanent ban").ProvideValue();
			control = lineEdit3;
			boxContainer4.XamlChildren.Add(control);
			Button button = new Button();
			button.Name = "HourButton";
			control = button;
			context.RobustNameScope.Register("HourButton", control);
			button.Text = "+1h (0)";
			control = button;
			boxContainer4.XamlChildren.Add(control);
			Button button2 = new Button();
			button2.Name = "DayButton";
			control = button2;
			context.RobustNameScope.Register("DayButton", control);
			button2.Text = "+1d (0)";
			control = button2;
			boxContainer4.XamlChildren.Add(control);
			Button button3 = new Button();
			button3.Name = "WeekButton";
			control = button3;
			context.RobustNameScope.Register("WeekButton", control);
			button3.Text = "+1w (0)";
			control = button3;
			boxContainer4.XamlChildren.Add(control);
			Button button4 = new Button();
			button4.Name = "MonthButton";
			control = button4;
			context.RobustNameScope.Register("MonthButton", control);
			button4.Text = "+1M (0)";
			control = button4;
			boxContainer4.XamlChildren.Add(control);
			control = boxContainer4;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer5 = new BoxContainer();
			boxContainer5.Orientation = 0;
			CheckBox checkBox = new CheckBox();
			checkBox.Name = "KickCheckBox";
			control = checkBox;
			context.RobustNameScope.Register("KickCheckBox", control);
			checkBox.Text = "Kick";
			control = checkBox;
			boxContainer5.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(50f, 0f)
			};
			boxContainer5.XamlChildren.Add(control);
			control = boxContainer5;
			boxContainer.XamlChildren.Add(control);
			PlayerListControl playerListControl = new PlayerListControl();
			playerListControl.Name = "PlayerList";
			control = playerListControl;
			context.RobustNameScope.Register("PlayerList", control);
			playerListControl.VerticalExpand = true;
			control = playerListControl;
			boxContainer.XamlChildren.Add(control);
			control = new Control
			{
				MinWidth = 50f
			};
			boxContainer.XamlChildren.Add(control);
			Button button5 = new Button();
			button5.Name = "SubmitButton";
			control = button5;
			context.RobustNameScope.Register("SubmitButton", control);
			button5.Text = (string)new LocExtension("Ban").ProvideValue();
			control = button5;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06001D79 RID: 7545 RVA: 0x000AC596 File Offset: 0x000AA796
		private static void !XamlIlPopulateTrampoline(BanWindow A_0)
		{
			BanWindow.Populate:Content.Client.Administration.UI.Tabs.AdminTab.BanWindow.xaml(null, A_0);
		}
	}
}
