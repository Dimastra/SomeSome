using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.Administration.Systems;
using Content.Client.Administration.UI.CustomControls;
using Content.Shared.Administration;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Maths;

namespace Content.Client.Administration.UI.Tabs.PlayerTab
{
	// Token: 0x02000496 RID: 1174
	[GenerateTypedNameReferences]
	public sealed class PlayerTab : Control
	{
		// Token: 0x140000B3 RID: 179
		// (add) Token: 0x06001CD7 RID: 7383 RVA: 0x000A7AE4 File Offset: 0x000A5CE4
		// (remove) Token: 0x06001CD8 RID: 7384 RVA: 0x000A7B1C File Offset: 0x000A5D1C
		[Nullable(new byte[]
		{
			2,
			1
		})]
		[Nullable(new byte[]
		{
			2,
			1
		})]
		public event Action<BaseButton.ButtonEventArgs> OnEntryPressed;

		// Token: 0x06001CD9 RID: 7385 RVA: 0x000A7B54 File Offset: 0x000A5D54
		public PlayerTab()
		{
			this._adminSystem = EntitySystem.Get<AdminSystem>();
			PlayerTab.!XamlIlPopulateTrampoline(this);
			this.RefreshPlayerList(this._adminSystem.PlayerList);
			this._adminSystem.PlayerListChanged += new Action<List<PlayerInfo>>(this.RefreshPlayerList);
			this._adminSystem.OverlayEnabled += this.OverlayEnabled;
			this._adminSystem.OverlayDisabled += this.OverlayDisabled;
			this.OverlayButton.OnPressed += this.OverlayButtonPressed;
			this.ListHeader.BackgroundColorPanel.PanelOverride = new StyleBoxFlat(this._altColor);
			this.ListHeader.OnHeaderClicked += this.HeaderClicked;
		}

		// Token: 0x06001CDA RID: 7386 RVA: 0x000A7C65 File Offset: 0x000A5E65
		private void OverlayEnabled()
		{
			this.OverlayButton.Pressed = true;
		}

		// Token: 0x06001CDB RID: 7387 RVA: 0x000A7C73 File Offset: 0x000A5E73
		private void OverlayDisabled()
		{
			this.OverlayButton.Pressed = false;
		}

		// Token: 0x06001CDC RID: 7388 RVA: 0x000A7C81 File Offset: 0x000A5E81
		[NullableContext(1)]
		private void OverlayButtonPressed(BaseButton.ButtonEventArgs args)
		{
			if (args.Button.Pressed)
			{
				this._adminSystem.AdminOverlayOn();
				return;
			}
			this._adminSystem.AdminOverlayOff();
		}

		// Token: 0x06001CDD RID: 7389 RVA: 0x000A7CA8 File Offset: 0x000A5EA8
		protected override void Dispose(bool disposing)
		{
			base.Dispose(disposing);
			if (disposing)
			{
				this._adminSystem.PlayerListChanged -= new Action<List<PlayerInfo>>(this.RefreshPlayerList);
				this._adminSystem.OverlayEnabled -= this.OverlayEnabled;
				this._adminSystem.OverlayDisabled -= this.OverlayDisabled;
				this.OverlayButton.OnPressed -= this.OverlayButtonPressed;
				this.ListHeader.OnHeaderClicked -= this.HeaderClicked;
			}
		}

		// Token: 0x06001CDE RID: 7390 RVA: 0x000A7D34 File Offset: 0x000A5F34
		[NullableContext(1)]
		private void RefreshPlayerList(IReadOnlyList<PlayerInfo> players)
		{
			foreach (PlayerTabEntry playerTabEntry in this._players)
			{
				this.PlayerList.RemoveChild(playerTabEntry);
			}
			this._players.Clear();
			IPlayerManager playerManager = IoCManager.Resolve<IPlayerManager>();
			Label playerCount = this.PlayerCount;
			DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(9, 1);
			defaultInterpolatedStringHandler.AppendLiteral("Players: ");
			defaultInterpolatedStringHandler.AppendFormatted<int>(playerManager.PlayerCount);
			playerCount.Text = defaultInterpolatedStringHandler.ToStringAndClear();
			List<PlayerInfo> list = new List<PlayerInfo>(players);
			list.Sort(new Comparison<PlayerInfo>(this.Compare));
			this.UpdateHeaderSymbols();
			bool flag = false;
			foreach (PlayerInfo playerInfo in list)
			{
				PlayerTabEntry playerTabEntry2 = new PlayerTabEntry(playerInfo.Username, playerInfo.CharacterName, playerInfo.IdentityName, playerInfo.StartingJob, playerInfo.Antag ? "YES" : "NO", new StyleBoxFlat(flag ? this._altColor : this._defaultColor), playerInfo.Connected);
				playerTabEntry2.PlayerUid = playerInfo.EntityUid;
				playerTabEntry2.OnPressed += delegate(BaseButton.ButtonEventArgs args)
				{
					Action<BaseButton.ButtonEventArgs> onEntryPressed = this.OnEntryPressed;
					if (onEntryPressed == null)
					{
						return;
					}
					onEntryPressed(args);
				};
				this.PlayerList.AddChild(playerTabEntry2);
				this._players.Add(playerTabEntry2);
				flag = !flag;
			}
		}

		// Token: 0x06001CDF RID: 7391 RVA: 0x000A7EC4 File Offset: 0x000A60C4
		private void UpdateHeaderSymbols()
		{
			this.ListHeader.ResetHeaderText();
			Label header = this.ListHeader.GetHeader(this._headerClicked);
			header.Text = header.Text + " " + (this._ascending ? "↑" : "↓");
		}

		// Token: 0x06001CE0 RID: 7392 RVA: 0x000A7F18 File Offset: 0x000A6118
		[NullableContext(1)]
		private int Compare(PlayerInfo x, PlayerInfo y)
		{
			if (!this._ascending)
			{
				PlayerInfo playerInfo = y;
				y = x;
				x = playerInfo;
			}
			int result;
			switch (this._headerClicked)
			{
			case PlayerTabHeader.Header.Username:
				result = this.Compare(x.Username, y.Username);
				break;
			case PlayerTabHeader.Header.Character:
				result = this.Compare(x.CharacterName, y.CharacterName);
				break;
			case PlayerTabHeader.Header.Job:
				result = this.Compare(x.StartingJob, y.StartingJob);
				break;
			case PlayerTabHeader.Header.Antagonist:
				result = x.Antag.CompareTo(y.Antag);
				break;
			default:
				result = 1;
				break;
			}
			return result;
		}

		// Token: 0x06001CE1 RID: 7393 RVA: 0x000A7FAB File Offset: 0x000A61AB
		[NullableContext(1)]
		private int Compare(string x, string y)
		{
			return string.Compare(x, y, StringComparison.OrdinalIgnoreCase);
		}

		// Token: 0x06001CE2 RID: 7394 RVA: 0x000A7FB5 File Offset: 0x000A61B5
		private void HeaderClicked(PlayerTabHeader.Header header)
		{
			if (this._headerClicked == header)
			{
				this._ascending = !this._ascending;
			}
			else
			{
				this._headerClicked = header;
				this._ascending = true;
			}
			this.RefreshPlayerList(this._adminSystem.PlayerList);
		}

		// Token: 0x170005F9 RID: 1529
		// (get) Token: 0x06001CE3 RID: 7395 RVA: 0x000A7FF0 File Offset: 0x000A61F0
		private Label PlayerCount
		{
			get
			{
				return base.FindControl<Label>("PlayerCount");
			}
		}

		// Token: 0x170005FA RID: 1530
		// (get) Token: 0x06001CE4 RID: 7396 RVA: 0x000A7FFD File Offset: 0x000A61FD
		private Button OverlayButton
		{
			get
			{
				return base.FindControl<Button>("OverlayButton");
			}
		}

		// Token: 0x170005FB RID: 1531
		// (get) Token: 0x06001CE5 RID: 7397 RVA: 0x000A800A File Offset: 0x000A620A
		private BoxContainer PlayerList
		{
			get
			{
				return base.FindControl<BoxContainer>("PlayerList");
			}
		}

		// Token: 0x170005FC RID: 1532
		// (get) Token: 0x06001CE6 RID: 7398 RVA: 0x000A8017 File Offset: 0x000A6217
		private PlayerTabHeader ListHeader
		{
			get
			{
				return base.FindControl<PlayerTabHeader>("ListHeader");
			}
		}

		// Token: 0x06001CE8 RID: 7400 RVA: 0x000A8038 File Offset: 0x000A6238
		static void xaml(IServiceProvider A_0, Control A_1)
		{
			XamlIlContext.Context<Control> context = new XamlIlContext.Context<Control>(A_0, null, "resm:Content.Client.Administration.UI.Tabs.PlayerTab.PlayerTab.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 0;
			Label label = new Label();
			label.Name = "PlayerCount";
			Control control = label;
			context.RobustNameScope.Register("PlayerCount", control);
			label.HorizontalExpand = true;
			label.SizeFlagsStretchRatio = 0.5f;
			label.Text = (string)new LocExtension("Player Count").ProvideValue();
			control = label;
			boxContainer2.XamlChildren.Add(control);
			Button button = new Button();
			button.Name = "OverlayButton";
			control = button;
			context.RobustNameScope.Register("OverlayButton", control);
			button.HorizontalExpand = true;
			button.SizeFlagsStretchRatio = 0.25f;
			button.Text = (string)new LocExtension("player-tab-overlay").ProvideValue();
			button.ToggleMode = true;
			control = button;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(0f, 5f)
			};
			boxContainer.XamlChildren.Add(control);
			ScrollContainer scrollContainer = new ScrollContainer();
			scrollContainer.HorizontalExpand = true;
			scrollContainer.VerticalExpand = true;
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 1;
			boxContainer3.Name = "PlayerList";
			control = boxContainer3;
			context.RobustNameScope.Register("PlayerList", control);
			PlayerTabHeader playerTabHeader = new PlayerTabHeader();
			playerTabHeader.Name = "ListHeader";
			control = playerTabHeader;
			context.RobustNameScope.Register("ListHeader", control);
			control = playerTabHeader;
			boxContainer3.XamlChildren.Add(control);
			control = new HSeparator();
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			scrollContainer.XamlChildren.Add(control);
			control = scrollContainer;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06001CE9 RID: 7401 RVA: 0x000A82E1 File Offset: 0x000A64E1
		private static void !XamlIlPopulateTrampoline(PlayerTab A_0)
		{
			PlayerTab.Populate:Content.Client.Administration.UI.Tabs.PlayerTab.PlayerTab.xaml(null, A_0);
		}

		// Token: 0x04000E72 RID: 3698
		[Nullable(1)]
		private const string ArrowUp = "↑";

		// Token: 0x04000E73 RID: 3699
		[Nullable(1)]
		private const string ArrowDown = "↓";

		// Token: 0x04000E74 RID: 3700
		private readonly Color _altColor = Color.FromHex("#292B38", null);

		// Token: 0x04000E75 RID: 3701
		private readonly Color _defaultColor = Color.FromHex("#2F2F3B", null);

		// Token: 0x04000E76 RID: 3702
		[Nullable(1)]
		private readonly AdminSystem _adminSystem;

		// Token: 0x04000E77 RID: 3703
		[Nullable(1)]
		private readonly List<PlayerTabEntry> _players = new List<PlayerTabEntry>();

		// Token: 0x04000E78 RID: 3704
		private PlayerTabHeader.Header _headerClicked;

		// Token: 0x04000E79 RID: 3705
		private bool _ascending = true;
	}
}
