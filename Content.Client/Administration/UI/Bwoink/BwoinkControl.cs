using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;
using CompiledRobustXaml;
using Content.Client.Administration.Managers;
using Content.Client.Administration.UI.CustomControls;
using Content.Client.Administration.UI.Tabs.AdminTab;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Client.UserInterface.Systems.Bwoink;
using Content.Shared.Administration;
using Robust.Client.AutoGenerated;
using Robust.Client.Console;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.Console;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;
using Robust.Shared.Network;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Client.Administration.UI.Bwoink
{
	// Token: 0x020004CF RID: 1231
	[GenerateTypedNameReferences]
	public sealed class BwoinkControl : Control
	{
		// Token: 0x06001F52 RID: 8018 RVA: 0x000B6F68 File Offset: 0x000B5168
		public BwoinkControl()
		{
			BwoinkControl.!XamlIlPopulateTrampoline(this);
			IoCManager.InjectDependencies<BwoinkControl>(this);
			AHelpUIController uiController = this._ui.GetUIController<AHelpUIController>();
			AdminAHelpUIHandler adminAHelpUIHandler = uiController.UIHelper as AdminAHelpUIHandler;
			if (adminAHelpUIHandler == null)
			{
				return;
			}
			this.AHelpHelper = adminAHelpUIHandler;
			this._adminManager.AdminStatusUpdated += this.FixButtons;
			this.FixButtons();
			this.ChannelSelector.OnSelectionChanged += delegate(PlayerInfo sel)
			{
				this._currentPlayer = sel;
				if (sel != null)
				{
					this.SwitchToChannel(sel.SessionId);
				}
				this.ChannelSelector.PlayerListContainer.DirtyList();
			};
			PlayerListControl channelSelector = this.ChannelSelector;
			channelSelector.OverrideText = (Func<PlayerInfo, string, string>)Delegate.Combine(channelSelector.OverrideText, new Func<PlayerInfo, string, string>(delegate(PlayerInfo info, string text)
			{
				StringBuilder stringBuilder = new StringBuilder();
				if (info.Connected)
				{
					stringBuilder.Append('●');
				}
				else
				{
					stringBuilder.Append(info.ActiveThisRound ? '○' : '·');
				}
				stringBuilder.Append(' ');
				BwoinkPanel bwoinkPanel;
				if (this.AHelpHelper.TryGetChannel(info.SessionId, out bwoinkPanel) && bwoinkPanel.Unread > 0)
				{
					if (bwoinkPanel.Unread < 11)
					{
						stringBuilder.Append(new Rune(10112 + (bwoinkPanel.Unread - 1)));
					}
					else
					{
						stringBuilder.Append(new Rune(9785));
					}
					stringBuilder.Append(' ');
				}
				if (info.Antag && info.ActiveThisRound)
				{
					stringBuilder.Append(new Rune(128481));
				}
				stringBuilder.AppendFormat("\"{0}\"", text);
				return stringBuilder.ToString();
			}));
			this.ChannelSelector.Comparison = delegate(PlayerInfo a, PlayerInfo b)
			{
				BwoinkPanel bwoinkPanel = this.AHelpHelper.EnsurePanel(a.SessionId);
				BwoinkPanel bwoinkPanel2 = this.AHelpHelper.EnsurePanel(b.SessionId);
				bool flag = bwoinkPanel.Unread > 0;
				bool flag2 = bwoinkPanel2.Unread > 0;
				if (flag != flag2)
				{
					if (!flag)
					{
						return 1;
					}
					return -1;
				}
				else if (a.Connected != b.Connected)
				{
					if (!a.Connected)
					{
						return 1;
					}
					return -1;
				}
				else
				{
					if (a.ActiveThisRound == b.ActiveThisRound)
					{
						return bwoinkPanel2.LastMessage.CompareTo(bwoinkPanel.LastMessage);
					}
					if (!a.ActiveThisRound)
					{
						return 1;
					}
					return -1;
				}
			};
			this.Bans.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				if (this._currentPlayer != null)
				{
					IConsoleHost console = this._console;
					DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(10, 1);
					defaultInterpolatedStringHandler.AppendLiteral("banlist \"");
					defaultInterpolatedStringHandler.AppendFormatted<NetUserId>(this._currentPlayer.SessionId);
					defaultInterpolatedStringHandler.AppendLiteral("\"");
					console.ExecuteCommand(defaultInterpolatedStringHandler.ToStringAndClear());
				}
			};
			this.Notes.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				if (this._currentPlayer != null)
				{
					IConsoleHost console = this._console;
					DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(13, 1);
					defaultInterpolatedStringHandler.AppendLiteral("adminnotes \"");
					defaultInterpolatedStringHandler.AppendFormatted<NetUserId>(this._currentPlayer.SessionId);
					defaultInterpolatedStringHandler.AppendLiteral("\"");
					console.ExecuteCommand(defaultInterpolatedStringHandler.ToStringAndClear());
				}
			};
			this.Ban.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				BanWindow banWindow = new BanWindow();
				banWindow.OnPlayerSelectionChanged(this._currentPlayer);
				banWindow.Open();
			};
			this.Kick.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				if (!this.TryConfirm(this.Kick))
				{
					return;
				}
				if (this._currentPlayer != null)
				{
					this._console.ExecuteCommand("kick \"" + this._currentPlayer.Username + "\"");
				}
			};
			this.Teleport.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				if (this._currentPlayer != null)
				{
					this._console.ExecuteCommand("tpto \"" + this._currentPlayer.Username + "\"");
				}
			};
			this.Respawn.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				if (!this.TryConfirm(this.Respawn))
				{
					return;
				}
				if (this._currentPlayer != null)
				{
					this._console.ExecuteCommand("respawn \"" + this._currentPlayer.Username + "\"");
				}
			};
			this.PopOut.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				uiController.PopOut();
			};
		}

		// Token: 0x170006D2 RID: 1746
		// (get) Token: 0x06001F53 RID: 8019 RVA: 0x000B70D9 File Offset: 0x000B52D9
		[TupleElementNames(new string[]
		{
			"cancellation",
			"originalText"
		})]
		[Nullable(new byte[]
		{
			1,
			1,
			0,
			1,
			2
		})]
		private Dictionary<Control, ValueTuple<CancellationTokenSource, string>> Confirmations { [return: TupleElementNames(new string[]
		{
			"cancellation",
			"originalText"
		})] [return: Nullable(new byte[]
		{
			1,
			1,
			0,
			1,
			2
		})] get; } = new Dictionary<Control, ValueTuple<CancellationTokenSource, string>>();

		// Token: 0x06001F54 RID: 8020 RVA: 0x000B70E1 File Offset: 0x000B52E1
		public void OnBwoink(NetUserId channel)
		{
			this.ChannelSelector.PopulateList(null);
		}

		// Token: 0x06001F55 RID: 8021 RVA: 0x000B70F0 File Offset: 0x000B52F0
		public void SelectChannel(NetUserId channel)
		{
			PlayerInfo info;
			if (!Extensions.TryFirstOrDefault<PlayerInfo>(this.ChannelSelector.PlayerInfo, (PlayerInfo i) => i.SessionId == channel, ref info))
			{
				return;
			}
			PlayerListData playerListData = new PlayerListData(info);
			if (!this.ChannelSelector.PlayerListContainer.Data.Contains(playerListData))
			{
				this.ChannelSelector.StopFiltering();
			}
			this.ChannelSelector.PopulateList(null);
			this.ChannelSelector.PlayerListContainer.Select(playerListData);
		}

		// Token: 0x06001F56 RID: 8022 RVA: 0x000B7174 File Offset: 0x000B5374
		private void FixButtons()
		{
			this.Bans.Visible = this._adminManager.HasFlag(AdminFlags.Ban);
			this.Bans.Disabled = !this.Bans.Visible;
			this.Notes.Visible = this._adminManager.HasFlag(AdminFlags.ViewNotes);
			this.Notes.Disabled = !this.Notes.Visible;
			this.Ban.Visible = this._adminManager.HasFlag(AdminFlags.Ban);
			this.Ban.Disabled = !this.Ban.Visible;
			this.Kick.Visible = this._adminManager.CanCommand("kick");
			this.Kick.Disabled = !this.Kick.Visible;
			this.Teleport.Visible = this._adminManager.CanCommand("tpto");
			this.Teleport.Disabled = !this.Teleport.Visible;
			this.Respawn.Visible = this._adminManager.CanCommand("respawn");
			this.Respawn.Disabled = !this.Respawn.Visible;
		}

		// Token: 0x06001F57 RID: 8023 RVA: 0x000B72B4 File Offset: 0x000B54B4
		[NullableContext(1)]
		private string FormatTabTitle(ItemList.Item li, [Nullable(2)] PlayerInfo pl = null)
		{
			if (pl == null)
			{
				pl = (PlayerInfo)li.Metadata;
			}
			StringBuilder stringBuilder = new StringBuilder();
			stringBuilder.Append(pl.Connected ? '●' : '○');
			stringBuilder.Append(' ');
			BwoinkPanel bwoinkPanel;
			if (this.AHelpHelper.TryGetChannel(pl.SessionId, out bwoinkPanel) && bwoinkPanel.Unread > 0)
			{
				if (bwoinkPanel.Unread < 11)
				{
					stringBuilder.Append(new Rune(10112 + (bwoinkPanel.Unread - 1)));
				}
				else
				{
					stringBuilder.Append(new Rune(9785));
				}
				stringBuilder.Append(' ');
			}
			if (pl.Antag)
			{
				stringBuilder.Append(new Rune(128481));
			}
			stringBuilder.AppendFormat("\"{0}\"", pl.CharacterName);
			if (pl.IdentityName != pl.CharacterName && pl.IdentityName != string.Empty)
			{
				stringBuilder.Append(' ').AppendFormat("[{0}]", pl.IdentityName);
			}
			stringBuilder.Append(' ').Append(pl.Username);
			return stringBuilder.ToString();
		}

		// Token: 0x06001F58 RID: 8024 RVA: 0x000B73EC File Offset: 0x000B55EC
		private void SwitchToChannel(NetUserId ch)
		{
			foreach (Control control in this.BwoinkArea.Children)
			{
				control.Visible = false;
			}
			this.AHelpHelper.EnsurePanel(ch).Visible = true;
		}

		// Token: 0x06001F59 RID: 8025 RVA: 0x000B7454 File Offset: 0x000B5654
		[NullableContext(1)]
		private bool TryConfirm(Button button)
		{
			ValueTuple<CancellationTokenSource, string> tuple;
			if (this.Confirmations.Remove(button, out tuple))
			{
				tuple.Item1.Cancel();
				button.ModulateSelfOverride = null;
				button.Text = tuple.Item2;
				return true;
			}
			tuple = new ValueTuple<CancellationTokenSource, string>(new CancellationTokenSource(), button.Text);
			this.Confirmations[button] = tuple;
			Timer.Spawn(TimeSpan.FromSeconds(5.0), delegate()
			{
				this.Confirmations.Remove(button);
				button.ModulateSelfOverride = null;
				button.Text = tuple.Item2;
			}, tuple.Item1.Token);
			button.ModulateSelfOverride = new Color?(StyleNano.ButtonColorCautionDefault);
			button.Text = Loc.GetString("admin-player-actions-confirm");
			return false;
		}

		// Token: 0x170006D3 RID: 1747
		// (get) Token: 0x06001F5A RID: 8026 RVA: 0x000B7556 File Offset: 0x000B5756
		public PlayerListControl ChannelSelector
		{
			get
			{
				return base.FindControl<PlayerListControl>("ChannelSelector");
			}
		}

		// Token: 0x170006D4 RID: 1748
		// (get) Token: 0x06001F5B RID: 8027 RVA: 0x000B7563 File Offset: 0x000B5763
		public BoxContainer BwoinkArea
		{
			get
			{
				return base.FindControl<BoxContainer>("BwoinkArea");
			}
		}

		// Token: 0x170006D5 RID: 1749
		// (get) Token: 0x06001F5C RID: 8028 RVA: 0x000B7570 File Offset: 0x000B5770
		public Button PopOut
		{
			get
			{
				return base.FindControl<Button>("PopOut");
			}
		}

		// Token: 0x170006D6 RID: 1750
		// (get) Token: 0x06001F5D RID: 8029 RVA: 0x000B757D File Offset: 0x000B577D
		private Button Bans
		{
			get
			{
				return base.FindControl<Button>("Bans");
			}
		}

		// Token: 0x170006D7 RID: 1751
		// (get) Token: 0x06001F5E RID: 8030 RVA: 0x000B758A File Offset: 0x000B578A
		private Button Notes
		{
			get
			{
				return base.FindControl<Button>("Notes");
			}
		}

		// Token: 0x170006D8 RID: 1752
		// (get) Token: 0x06001F5F RID: 8031 RVA: 0x000B7597 File Offset: 0x000B5797
		private Button Kick
		{
			get
			{
				return base.FindControl<Button>("Kick");
			}
		}

		// Token: 0x170006D9 RID: 1753
		// (get) Token: 0x06001F60 RID: 8032 RVA: 0x000B75A4 File Offset: 0x000B57A4
		private Button Ban
		{
			get
			{
				return base.FindControl<Button>("Ban");
			}
		}

		// Token: 0x170006DA RID: 1754
		// (get) Token: 0x06001F61 RID: 8033 RVA: 0x000B75B1 File Offset: 0x000B57B1
		private Button Respawn
		{
			get
			{
				return base.FindControl<Button>("Respawn");
			}
		}

		// Token: 0x170006DB RID: 1755
		// (get) Token: 0x06001F62 RID: 8034 RVA: 0x000B75BE File Offset: 0x000B57BE
		private Button Teleport
		{
			get
			{
				return base.FindControl<Button>("Teleport");
			}
		}

		// Token: 0x06001F6C RID: 8044 RVA: 0x000B78FC File Offset: 0x000B5AFC
		static void xaml(IServiceProvider A_0, Control A_1)
		{
			XamlIlContext.Context<Control> context = new XamlIlContext.Context<Control>(A_0, null, "resm:Content.Client.Administration.UI.Bwoink.BwoinkControl.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			PanelContainer panelContainer = new PanelContainer();
			panelContainer.PanelOverride = new StyleBoxFlat
			{
				BackgroundColor = Color.FromXaml("#25252A")
			};
			SplitContainer splitContainer = new SplitContainer();
			splitContainer.Orientation = 0;
			splitContainer.VerticalExpand = true;
			PlayerListControl playerListControl = new PlayerListControl();
			playerListControl.Access = new AccessLevel?(0);
			playerListControl.Name = "ChannelSelector";
			Control control = playerListControl;
			context.RobustNameScope.Register("ChannelSelector", control);
			playerListControl.HorizontalExpand = true;
			playerListControl.SizeFlagsStretchRatio = 1f;
			control = playerListControl;
			splitContainer.XamlChildren.Add(control);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			boxContainer.HorizontalExpand = true;
			boxContainer.SizeFlagsStretchRatio = 2f;
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Access = new AccessLevel?(0);
			boxContainer2.Name = "BwoinkArea";
			control = boxContainer2;
			context.RobustNameScope.Register("BwoinkArea", control);
			boxContainer2.VerticalExpand = true;
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 0;
			boxContainer3.HorizontalAlignment = 3;
			Button button = new Button();
			button.Margin = new Thickness(0f, 0f, 10f, 0f);
			button.Visible = true;
			button.Name = "PopOut";
			control = button;
			context.RobustNameScope.Register("PopOut", control);
			button.Access = new AccessLevel?(0);
			button.Text = (string)new LocExtension("admin-logs-pop-out").ProvideValue();
			control = button;
			boxContainer3.XamlChildren.Add(control);
			Button button2 = new Button();
			button2.Visible = false;
			button2.Name = "Bans";
			control = button2;
			context.RobustNameScope.Register("Bans", control);
			button2.Text = (string)new LocExtension("admin-player-actions-bans").ProvideValue();
			control = button2;
			boxContainer3.XamlChildren.Add(control);
			Button button3 = new Button();
			button3.Visible = false;
			button3.Name = "Notes";
			control = button3;
			context.RobustNameScope.Register("Notes", control);
			button3.Text = (string)new LocExtension("admin-player-actions-notes").ProvideValue();
			control = button3;
			boxContainer3.XamlChildren.Add(control);
			Button button4 = new Button();
			button4.Visible = false;
			button4.Name = "Kick";
			control = button4;
			context.RobustNameScope.Register("Kick", control);
			button4.Text = (string)new LocExtension("admin-player-actions-kick").ProvideValue();
			control = button4;
			boxContainer3.XamlChildren.Add(control);
			Button button5 = new Button();
			button5.Visible = false;
			button5.Name = "Ban";
			control = button5;
			context.RobustNameScope.Register("Ban", control);
			button5.Text = (string)new LocExtension("admin-player-actions-ban").ProvideValue();
			control = button5;
			boxContainer3.XamlChildren.Add(control);
			Button button6 = new Button();
			button6.Visible = false;
			button6.Name = "Respawn";
			control = button6;
			context.RobustNameScope.Register("Respawn", control);
			button6.Text = (string)new LocExtension("admin-player-actions-respawn").ProvideValue();
			control = button6;
			boxContainer3.XamlChildren.Add(control);
			Button button7 = new Button();
			button7.Visible = false;
			button7.Name = "Teleport";
			control = button7;
			context.RobustNameScope.Register("Teleport", control);
			button7.Text = (string)new LocExtension("admin-player-actions-teleport").ProvideValue();
			control = button7;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			splitContainer.XamlChildren.Add(control);
			control = splitContainer;
			panelContainer.XamlChildren.Add(control);
			control = panelContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06001F6D RID: 8045 RVA: 0x000B7DF4 File Offset: 0x000B5FF4
		private static void !XamlIlPopulateTrampoline(BwoinkControl A_0)
		{
			BwoinkControl.Populate:Content.Client.Administration.UI.Bwoink.BwoinkControl.xaml(null, A_0);
		}

		// Token: 0x04000F0E RID: 3854
		[Nullable(1)]
		[Dependency]
		private readonly IClientAdminManager _adminManager;

		// Token: 0x04000F0F RID: 3855
		[Nullable(1)]
		[Dependency]
		private readonly IClientConsoleHost _console;

		// Token: 0x04000F10 RID: 3856
		[Nullable(1)]
		[Dependency]
		private readonly IUserInterfaceManager _ui;

		// Token: 0x04000F11 RID: 3857
		[Nullable(1)]
		public AdminAHelpUIHandler AHelpHelper;

		// Token: 0x04000F12 RID: 3858
		[Nullable(2)]
		private PlayerInfo _currentPlayer;
	}
}
