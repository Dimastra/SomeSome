using System;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Shared.Administration.Notes;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.Localization;
using Robust.Shared.Maths;

namespace Content.Client.Administration.UI.Notes
{
	// Token: 0x020004BA RID: 1210
	[GenerateTypedNameReferences]
	public sealed class AdminNotesLinePopup : Popup
	{
		// Token: 0x140000BB RID: 187
		// (add) Token: 0x06001E6F RID: 7791 RVA: 0x000B246C File Offset: 0x000B066C
		// (remove) Token: 0x06001E70 RID: 7792 RVA: 0x000B24A4 File Offset: 0x000B06A4
		[Nullable(2)]
		[method: NullableContext(2)]
		[Nullable(2)]
		public event Action<int> OnEditPressed;

		// Token: 0x140000BC RID: 188
		// (add) Token: 0x06001E71 RID: 7793 RVA: 0x000B24DC File Offset: 0x000B06DC
		// (remove) Token: 0x06001E72 RID: 7794 RVA: 0x000B2514 File Offset: 0x000B0714
		[Nullable(2)]
		[method: NullableContext(2)]
		[Nullable(2)]
		public event Action<int> OnDeletePressed;

		// Token: 0x06001E73 RID: 7795 RVA: 0x000B254C File Offset: 0x000B074C
		[NullableContext(1)]
		public AdminNotesLinePopup(SharedAdminNote note, bool showDelete, bool showEdit)
		{
			AdminNotesLinePopup.!XamlIlPopulateTrampoline(this);
			this.NoteId = note.Id;
			this.DeleteButton.Visible = showDelete;
			this.EditButton.Visible = showEdit;
			base.UserInterfaceManager.ModalRoot.AddChild(this);
			this.IdLabel.Text = Loc.GetString("admin-notes-id", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("id", note.Id)
			});
			this.RoundIdLabel.Text = ((note.Round == null) ? Loc.GetString("admin-notes-round-id-unknown") : Loc.GetString("admin-notes-round-id", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("id", note.Round)
			}));
			this.CreatedByLabel.Text = Loc.GetString("admin-notes-created-by", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("author", note.CreatedByName)
			});
			this.CreatedAtLabel.Text = Loc.GetString("admin-notes-created-at", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("date", note.CreatedAt.ToString("dd MMM yyyy HH:mm:ss"))
			});
			this.EditedByLabel.Text = Loc.GetString("admin-notes-last-edited-by", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("author", note.EditedByName)
			});
			this.EditedAtLabel.Text = Loc.GetString("admin-notes-last-edited-at", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("date", note.LastEditedAt.ToString("dd MMM yyyy HH:mm:ss"))
			});
			this.EditButton.OnPressed += this.EditPressed;
			this.DeleteButton.OnPressed += this.DeletePressed;
		}

		// Token: 0x17000690 RID: 1680
		// (get) Token: 0x06001E74 RID: 7796 RVA: 0x000B2734 File Offset: 0x000B0934
		private int NoteId { get; }

		// Token: 0x17000691 RID: 1681
		// (get) Token: 0x06001E75 RID: 7797 RVA: 0x000B273C File Offset: 0x000B093C
		// (set) Token: 0x06001E76 RID: 7798 RVA: 0x000B2744 File Offset: 0x000B0944
		private bool ConfirmingDelete { get; set; }

		// Token: 0x06001E77 RID: 7799 RVA: 0x000B274D File Offset: 0x000B094D
		[NullableContext(1)]
		private void EditPressed(BaseButton.ButtonEventArgs args)
		{
			Action<int> onEditPressed = this.OnEditPressed;
			if (onEditPressed != null)
			{
				onEditPressed(this.NoteId);
			}
			this.Close();
		}

		// Token: 0x06001E78 RID: 7800 RVA: 0x000B276C File Offset: 0x000B096C
		[NullableContext(1)]
		private void DeletePressed(BaseButton.ButtonEventArgs args)
		{
			if (!this.ConfirmingDelete)
			{
				this.ConfirmingDelete = true;
				this.DeleteButton.Text = Loc.GetString("admin-notes-delete-confirm");
				this.DeleteButton.ModulateSelfOverride = new Color?(Color.Red);
				return;
			}
			this.ConfirmingDelete = false;
			this.DeleteButton.ModulateSelfOverride = null;
			Action<int> onDeletePressed = this.OnDeletePressed;
			if (onDeletePressed != null)
			{
				onDeletePressed(this.NoteId);
			}
			this.Close();
		}

		// Token: 0x06001E79 RID: 7801 RVA: 0x000B27EC File Offset: 0x000B09EC
		protected override void Dispose(bool disposing)
		{
			base.Dispose(disposing);
			if (!disposing)
			{
				return;
			}
			this.EditButton.OnPressed -= this.EditPressed;
			this.DeleteButton.OnPressed -= this.DeletePressed;
			this.OnEditPressed = null;
			this.OnDeletePressed = null;
		}

		// Token: 0x17000692 RID: 1682
		// (get) Token: 0x06001E7A RID: 7802 RVA: 0x000B2840 File Offset: 0x000B0A40
		private Label IdLabel
		{
			get
			{
				return base.FindControl<Label>("IdLabel");
			}
		}

		// Token: 0x17000693 RID: 1683
		// (get) Token: 0x06001E7B RID: 7803 RVA: 0x000B284D File Offset: 0x000B0A4D
		private Label RoundIdLabel
		{
			get
			{
				return base.FindControl<Label>("RoundIdLabel");
			}
		}

		// Token: 0x17000694 RID: 1684
		// (get) Token: 0x06001E7C RID: 7804 RVA: 0x000B285A File Offset: 0x000B0A5A
		private Label CreatedByLabel
		{
			get
			{
				return base.FindControl<Label>("CreatedByLabel");
			}
		}

		// Token: 0x17000695 RID: 1685
		// (get) Token: 0x06001E7D RID: 7805 RVA: 0x000B2867 File Offset: 0x000B0A67
		private Label CreatedAtLabel
		{
			get
			{
				return base.FindControl<Label>("CreatedAtLabel");
			}
		}

		// Token: 0x17000696 RID: 1686
		// (get) Token: 0x06001E7E RID: 7806 RVA: 0x000B2874 File Offset: 0x000B0A74
		private Label EditedByLabel
		{
			get
			{
				return base.FindControl<Label>("EditedByLabel");
			}
		}

		// Token: 0x17000697 RID: 1687
		// (get) Token: 0x06001E7F RID: 7807 RVA: 0x000B2881 File Offset: 0x000B0A81
		private Label EditedAtLabel
		{
			get
			{
				return base.FindControl<Label>("EditedAtLabel");
			}
		}

		// Token: 0x17000698 RID: 1688
		// (get) Token: 0x06001E80 RID: 7808 RVA: 0x000B288E File Offset: 0x000B0A8E
		private Button EditButton
		{
			get
			{
				return base.FindControl<Button>("EditButton");
			}
		}

		// Token: 0x17000699 RID: 1689
		// (get) Token: 0x06001E81 RID: 7809 RVA: 0x000B289B File Offset: 0x000B0A9B
		private Button DeleteButton
		{
			get
			{
				return base.FindControl<Button>("DeleteButton");
			}
		}

		// Token: 0x06001E82 RID: 7810 RVA: 0x000B28A8 File Offset: 0x000B0AA8
		static void xaml(IServiceProvider A_0, Popup A_1)
		{
			XamlIlContext.Context<Popup> context = new XamlIlContext.Context<Popup>(A_0, null, "resm:Content.Client.Administration.UI.Notes.AdminNotesLinePopup.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			PanelContainer panelContainer = new PanelContainer();
			panelContainer.PanelOverride = new StyleBoxFlat
			{
				BackgroundColor = Color.FromXaml("#252525")
			};
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			Label label = new Label();
			label.Name = "IdLabel";
			Control control = label;
			context.RobustNameScope.Register("IdLabel", control);
			control = label;
			boxContainer.XamlChildren.Add(control);
			Label label2 = new Label();
			label2.Name = "RoundIdLabel";
			control = label2;
			context.RobustNameScope.Register("RoundIdLabel", control);
			control = label2;
			boxContainer.XamlChildren.Add(control);
			Label label3 = new Label();
			label3.Name = "CreatedByLabel";
			control = label3;
			context.RobustNameScope.Register("CreatedByLabel", control);
			control = label3;
			boxContainer.XamlChildren.Add(control);
			Label label4 = new Label();
			label4.Name = "CreatedAtLabel";
			control = label4;
			context.RobustNameScope.Register("CreatedAtLabel", control);
			control = label4;
			boxContainer.XamlChildren.Add(control);
			Label label5 = new Label();
			label5.Name = "EditedByLabel";
			control = label5;
			context.RobustNameScope.Register("EditedByLabel", control);
			control = label5;
			boxContainer.XamlChildren.Add(control);
			Label label6 = new Label();
			label6.Name = "EditedAtLabel";
			control = label6;
			context.RobustNameScope.Register("EditedAtLabel", control);
			control = label6;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 0;
			Button button = new Button();
			button.Name = "EditButton";
			control = button;
			context.RobustNameScope.Register("EditButton", control);
			button.Text = (string)new LocExtension("admin-notes-edit").ProvideValue();
			control = button;
			boxContainer2.XamlChildren.Add(control);
			control = new Control
			{
				HorizontalExpand = true
			};
			boxContainer2.XamlChildren.Add(control);
			Button button2 = new Button();
			button2.Name = "DeleteButton";
			control = button2;
			context.RobustNameScope.Register("DeleteButton", control);
			button2.Text = (string)new LocExtension("admin-notes-delete").ProvideValue();
			button2.HorizontalAlignment = 3;
			control = button2;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			panelContainer.XamlChildren.Add(control);
			control = panelContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06001E83 RID: 7811 RVA: 0x000B2BF7 File Offset: 0x000B0DF7
		private static void !XamlIlPopulateTrampoline(AdminNotesLinePopup A_0)
		{
			AdminNotesLinePopup.Populate:Content.Client.Administration.UI.Notes.AdminNotesLinePopup.xaml(null, A_0);
		}
	}
}
