using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.Administration.UI.CustomControls;
using Content.Shared.Administration.BanList;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.Localization;
using Robust.Shared.Maths;

namespace Content.Client.Administration.UI.BanList
{
	// Token: 0x020004D5 RID: 1237
	[GenerateTypedNameReferences]
	public sealed class BanListControl : Control
	{
		// Token: 0x06001F86 RID: 8070 RVA: 0x000B825F File Offset: 0x000B645F
		public BanListControl()
		{
			BanListControl.!XamlIlPopulateTrampoline(this);
		}

		// Token: 0x06001F87 RID: 8071 RVA: 0x000B8270 File Offset: 0x000B6470
		[NullableContext(1)]
		public void SetBans(List<SharedServerBan> bans)
		{
			Control[] subArray = RuntimeHelpers.GetSubArray<Control>(this.Bans.Children.ToArray<Control>(), Range.StartAt(1));
			for (int i = 0; i < subArray.Length; i++)
			{
				subArray[i].Orphan();
			}
			foreach (SharedServerBan ban in bans)
			{
				this.Bans.AddChild(new HSeparator());
				BanListLine banListLine = new BanListLine(ban);
				banListLine.OnIdsClicked += this.LineIdsClicked;
				this.Bans.AddChild(banListLine);
			}
		}

		// Token: 0x06001F88 RID: 8072 RVA: 0x000B8324 File Offset: 0x000B6524
		private void ClosePopup()
		{
			BanListIdsPopup popup = this._popup;
			if (popup != null)
			{
				popup.Close();
			}
			this._popup = null;
		}

		// Token: 0x06001F89 RID: 8073 RVA: 0x000B8340 File Offset: 0x000B6540
		[NullableContext(1)]
		private bool LineIdsClicked(BanListLine line)
		{
			this.ClosePopup();
			SharedServerBan ban = line.Ban;
			string id = (ban.Id == null) ? string.Empty : Loc.GetString("ban-list-id", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("id", ban.Id.Value)
			});
			string ip = (ban.Address == null) ? string.Empty : Loc.GetString("ban-list-ip", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("ip", ban.Address.Value.Item1)
			});
			string hwid = (ban.HWId == null) ? string.Empty : Loc.GetString("ban-list-hwid", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("hwid", ban.HWId)
			});
			string guid = (ban.UserId == null) ? string.Empty : Loc.GetString("ban-list-guid", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("guid", ban.UserId.Value.ToString())
			});
			this._popup = new BanListIdsPopup(id, ip, hwid, guid);
			UIBox2 value = UIBox2.FromDimensions(base.UserInterfaceManager.MousePositionScaled.Position, new ValueTuple<float, float>(1f, 1f));
			this._popup.Open(new UIBox2?(value), null);
			return true;
		}

		// Token: 0x06001F8A RID: 8074 RVA: 0x000B84DE File Offset: 0x000B66DE
		protected override void Dispose(bool disposing)
		{
			base.Dispose(disposing);
			if (this._popup != null)
			{
				base.UserInterfaceManager.PopupRoot.RemoveChild(this._popup);
			}
		}

		// Token: 0x170006E1 RID: 1761
		// (get) Token: 0x06001F8B RID: 8075 RVA: 0x000B8505 File Offset: 0x000B6705
		public BoxContainer Bans
		{
			get
			{
				return base.FindControl<BoxContainer>("Bans");
			}
		}

		// Token: 0x170006E2 RID: 1762
		// (get) Token: 0x06001F8C RID: 8076 RVA: 0x000B8512 File Offset: 0x000B6712
		private BanListHeader BansHeader
		{
			get
			{
				return base.FindControl<BanListHeader>("BansHeader");
			}
		}

		// Token: 0x06001F8D RID: 8077 RVA: 0x000B8520 File Offset: 0x000B6720
		static void xaml(IServiceProvider A_0, BanListControl A_1)
		{
			XamlIlContext.Context<BanListControl> context = new XamlIlContext.Context<BanListControl>(A_0, null, "resm:Content.Client.Administration.UI.BanList.BanListControl.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			PanelContainer panelContainer = new PanelContainer();
			panelContainer.PanelOverride = new StyleBoxFlat
			{
				BackgroundColor = Color.FromXaml("#252525")
			};
			ScrollContainer scrollContainer = new ScrollContainer();
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Name = "Bans";
			Control control = boxContainer;
			context.RobustNameScope.Register("Bans", control);
			boxContainer.Access = new AccessLevel?(0);
			boxContainer.Orientation = 1;
			BanListHeader banListHeader = new BanListHeader();
			banListHeader.Name = "BansHeader";
			control = banListHeader;
			context.RobustNameScope.Register("BansHeader", control);
			control = banListHeader;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			scrollContainer.XamlChildren.Add(control);
			control = scrollContainer;
			panelContainer.XamlChildren.Add(control);
			control = panelContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06001F8E RID: 8078 RVA: 0x000B867C File Offset: 0x000B687C
		private static void !XamlIlPopulateTrampoline(BanListControl A_0)
		{
			BanListControl.Populate:Content.Client.Administration.UI.BanList.BanListControl.xaml(null, A_0);
		}

		// Token: 0x04000F1C RID: 3868
		[Nullable(2)]
		private BanListIdsPopup _popup;
	}
}
