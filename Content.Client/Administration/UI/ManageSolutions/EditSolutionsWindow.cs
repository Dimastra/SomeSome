using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Shared.Chemistry.Components;
using Content.Shared.FixedPoint;
using Robust.Client.AutoGenerated;
using Robust.Client.Console;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;

namespace Content.Client.Administration.UI.ManageSolutions
{
	// Token: 0x020004BE RID: 1214
	[GenerateTypedNameReferences]
	public sealed class EditSolutionsWindow : DefaultWindow
	{
		// Token: 0x06001E9E RID: 7838 RVA: 0x000B34B4 File Offset: 0x000B16B4
		public EditSolutionsWindow()
		{
			IoCManager.InjectDependencies<EditSolutionsWindow>(this);
			EditSolutionsWindow.!XamlIlPopulateTrampoline(this);
			this.SolutionOption.OnItemSelected += this.SolutionSelected;
			this.AddButton.OnPressed += this.OpenAddReagentWindow;
		}

		// Token: 0x06001E9F RID: 7839 RVA: 0x000B350D File Offset: 0x000B170D
		public override void Close()
		{
			base.Close();
			AddReagentWindow addReagentWindow = this._addReagentWindow;
			if (addReagentWindow != null)
			{
				addReagentWindow.Close();
			}
			AddReagentWindow addReagentWindow2 = this._addReagentWindow;
			if (addReagentWindow2 == null)
			{
				return;
			}
			addReagentWindow2.Dispose();
		}

		// Token: 0x06001EA0 RID: 7840 RVA: 0x000B3538 File Offset: 0x000B1738
		public void SetTargetEntity(EntityUid target)
		{
			this._target = target;
			string item = this._entityManager.EntityExists(target) ? IoCManager.Resolve<IEntityManager>().GetComponent<MetaDataComponent>(target).EntityName : string.Empty;
			base.Title = Loc.GetString("admin-solutions-window-title", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("targetName", item)
			});
		}

		// Token: 0x06001EA1 RID: 7841 RVA: 0x000B359C File Offset: 0x000B179C
		public void UpdateReagents()
		{
			this.ReagentList.DisposeAllChildren();
			if (this._selectedSolution == null || this._solutions == null)
			{
				return;
			}
			Solution solution;
			if (!this._solutions.TryGetValue(this._selectedSolution, out solution))
			{
				return;
			}
			this.UpdateVolumeBox(solution);
			this.UpdateThermalBox(solution);
			foreach (Solution.ReagentQuantity reagent in solution)
			{
				this.AddReagentEntry(reagent);
			}
		}

		// Token: 0x06001EA2 RID: 7842 RVA: 0x000B3624 File Offset: 0x000B1824
		[NullableContext(1)]
		private void UpdateVolumeBox(Solution solution)
		{
			this.VolumeBox.DisposeAllChildren();
			Label label = new Label();
			label.HorizontalExpand = true;
			label.Margin = new Thickness(0f, 4f);
			label.Text = Loc.GetString("admin-solutions-window-volume-label", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("currentVolume", solution.Volume),
				new ValueTuple<string, object>("maxVolume", solution.MaxVolume)
			});
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 0;
			boxContainer.HorizontalExpand = true;
			boxContainer.Margin = new Thickness(0f, 4f);
			Label label2 = new Label();
			label2.HorizontalExpand = true;
			label2.Margin = new Thickness(0f, 1f);
			label2.Text = Loc.GetString("admin-solutions-window-capacity-label");
			FloatSpinBox floatSpinBox = new FloatSpinBox(1f, 2);
			floatSpinBox.HorizontalExpand = true;
			floatSpinBox.Margin = new Thickness(0f, 1f);
			floatSpinBox.Value = (float)solution.MaxVolume;
			floatSpinBox.OnValueChanged += this.SetCapacity;
			boxContainer.AddChild(label2);
			boxContainer.AddChild(floatSpinBox);
			this.VolumeBox.AddChild(label);
			this.VolumeBox.AddChild(boxContainer);
		}

		// Token: 0x06001EA3 RID: 7843 RVA: 0x000B377C File Offset: 0x000B197C
		[NullableContext(1)]
		private void UpdateThermalBox(Solution solution)
		{
			this.ThermalBox.DisposeAllChildren();
			float heatCapacity = solution.GetHeatCapacity(null);
			Label label = new Label();
			label.HorizontalExpand = true;
			label.Margin = new Thickness(0f, 1f);
			label.Text = Loc.GetString("admin-solutions-window-specific-heat-label", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("specificHeat", heatCapacity.ToString("G3"))
			});
			Label label2 = new Label();
			label2.HorizontalExpand = true;
			label2.Margin = new Thickness(0f, 1f);
			label2.Text = Loc.GetString("admin-solutions-window-heat-capacity-label", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("heatCapacity", (heatCapacity / solution.Volume.Float()).ToString("G3"))
			});
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 0;
			boxContainer.HorizontalExpand = true;
			boxContainer.Margin = new Thickness(0f, 1f);
			Label label3 = new Label();
			label3.HorizontalExpand = true;
			label3.Margin = new Thickness(0f, 1f);
			label3.Text = Loc.GetString("admin-solutions-window-temperature-label");
			FloatSpinBox floatSpinBox = new FloatSpinBox(1f, 2);
			floatSpinBox.HorizontalExpand = true;
			floatSpinBox.Margin = new Thickness(0f, 1f);
			floatSpinBox.Value = solution.Temperature;
			floatSpinBox.OnValueChanged += this.SetTemperature;
			boxContainer.AddChild(label3);
			boxContainer.AddChild(floatSpinBox);
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 0;
			boxContainer2.HorizontalExpand = true;
			boxContainer2.Margin = new Thickness(0f, 1f);
			Label label4 = new Label();
			label4.HorizontalExpand = true;
			label4.Margin = new Thickness(0f, 1f);
			label4.Text = Loc.GetString("admin-solutions-window-thermal-energy-label");
			FloatSpinBox floatSpinBox2 = new FloatSpinBox(1f, 2);
			floatSpinBox2.HorizontalExpand = true;
			floatSpinBox2.Margin = new Thickness(0f, 1f);
			floatSpinBox2.Value = solution.Temperature * heatCapacity;
			floatSpinBox2.OnValueChanged += this.SetThermalEnergy;
			boxContainer2.AddChild(label4);
			boxContainer2.AddChild(floatSpinBox2);
			this.ThermalBox.AddChild(label);
			this.ThermalBox.AddChild(label2);
			this.ThermalBox.AddChild(boxContainer);
			this.ThermalBox.AddChild(boxContainer2);
		}

		// Token: 0x06001EA4 RID: 7844 RVA: 0x000B3A08 File Offset: 0x000B1C08
		private void AddReagentEntry(Solution.ReagentQuantity reagent)
		{
			BoxContainer boxContainer = new BoxContainer();
			FloatSpinBox floatSpinBox = new FloatSpinBox(1f, 2);
			floatSpinBox.Value = reagent.Quantity.Float();
			floatSpinBox.OnValueChanged += delegate(FloatSpinBox.FloatSpinBoxEventArgs args)
			{
				this.SetReagent(args, reagent.ReagentId);
			};
			floatSpinBox.HorizontalExpand = true;
			boxContainer.AddChild(new Label
			{
				Text = reagent.ReagentId,
				HorizontalExpand = true
			});
			boxContainer.AddChild(floatSpinBox);
			this.ReagentList.AddChild(boxContainer);
		}

		// Token: 0x06001EA5 RID: 7845 RVA: 0x000B3AA0 File Offset: 0x000B1CA0
		[NullableContext(1)]
		private void SetReagent(FloatSpinBox.FloatSpinBoxEventArgs args, string reagentId)
		{
			if (this._solutions == null || this._selectedSolution == null)
			{
				return;
			}
			FixedPoint2 reagentQuantity = this._solutions[this._selectedSolution].GetReagentQuantity(reagentId);
			float num = args.Value - reagentQuantity.Float();
			if ((double)MathF.Abs(num) < 0.01)
			{
				return;
			}
			DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(14, 4);
			defaultInterpolatedStringHandler.AppendLiteral("addreagent ");
			defaultInterpolatedStringHandler.AppendFormatted<EntityUid>(this._target);
			defaultInterpolatedStringHandler.AppendLiteral(" ");
			defaultInterpolatedStringHandler.AppendFormatted(this._selectedSolution);
			defaultInterpolatedStringHandler.AppendLiteral(" ");
			defaultInterpolatedStringHandler.AppendFormatted(reagentId);
			defaultInterpolatedStringHandler.AppendLiteral(" ");
			defaultInterpolatedStringHandler.AppendFormatted<float>(num);
			string text = defaultInterpolatedStringHandler.ToStringAndClear();
			this._consoleHost.ExecuteCommand(text);
		}

		// Token: 0x06001EA6 RID: 7846 RVA: 0x000B3B70 File Offset: 0x000B1D70
		[NullableContext(1)]
		private void SetCapacity(FloatSpinBox.FloatSpinBoxEventArgs args)
		{
			if (this._solutions == null || this._selectedSolution == null)
			{
				return;
			}
			DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(22, 3);
			defaultInterpolatedStringHandler.AppendLiteral("setsolutioncapacity ");
			defaultInterpolatedStringHandler.AppendFormatted<EntityUid>(this._target);
			defaultInterpolatedStringHandler.AppendLiteral(" ");
			defaultInterpolatedStringHandler.AppendFormatted(this._selectedSolution);
			defaultInterpolatedStringHandler.AppendLiteral(" ");
			defaultInterpolatedStringHandler.AppendFormatted<float>(args.Value);
			string text = defaultInterpolatedStringHandler.ToStringAndClear();
			this._consoleHost.ExecuteCommand(text);
		}

		// Token: 0x06001EA7 RID: 7847 RVA: 0x000B3BF8 File Offset: 0x000B1DF8
		[NullableContext(1)]
		private void SetTemperature(FloatSpinBox.FloatSpinBoxEventArgs args)
		{
			if (this._solutions == null || this._selectedSolution == null)
			{
				return;
			}
			DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(25, 3);
			defaultInterpolatedStringHandler.AppendLiteral("setsolutiontemperature ");
			defaultInterpolatedStringHandler.AppendFormatted<EntityUid>(this._target);
			defaultInterpolatedStringHandler.AppendLiteral(" ");
			defaultInterpolatedStringHandler.AppendFormatted(this._selectedSolution);
			defaultInterpolatedStringHandler.AppendLiteral(" ");
			defaultInterpolatedStringHandler.AppendFormatted<float>(args.Value);
			string text = defaultInterpolatedStringHandler.ToStringAndClear();
			this._consoleHost.ExecuteCommand(text);
		}

		// Token: 0x06001EA8 RID: 7848 RVA: 0x000B3C80 File Offset: 0x000B1E80
		[NullableContext(1)]
		private void SetThermalEnergy(FloatSpinBox.FloatSpinBoxEventArgs args)
		{
			if (this._solutions == null || this._selectedSolution == null)
			{
				return;
			}
			DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(27, 3);
			defaultInterpolatedStringHandler.AppendLiteral("setsolutionthermalenergy ");
			defaultInterpolatedStringHandler.AppendFormatted<EntityUid>(this._target);
			defaultInterpolatedStringHandler.AppendLiteral(" ");
			defaultInterpolatedStringHandler.AppendFormatted(this._selectedSolution);
			defaultInterpolatedStringHandler.AppendLiteral(" ");
			defaultInterpolatedStringHandler.AppendFormatted<float>(args.Value);
			string text = defaultInterpolatedStringHandler.ToStringAndClear();
			this._consoleHost.ExecuteCommand(text);
		}

		// Token: 0x06001EA9 RID: 7849 RVA: 0x000B3D08 File Offset: 0x000B1F08
		[NullableContext(1)]
		private void OpenAddReagentWindow(BaseButton.ButtonEventArgs obj)
		{
			if (string.IsNullOrEmpty(this._selectedSolution))
			{
				return;
			}
			AddReagentWindow addReagentWindow = this._addReagentWindow;
			if (addReagentWindow != null)
			{
				addReagentWindow.Close();
			}
			AddReagentWindow addReagentWindow2 = this._addReagentWindow;
			if (addReagentWindow2 != null)
			{
				addReagentWindow2.Dispose();
			}
			this._addReagentWindow = new AddReagentWindow(this._target, this._selectedSolution);
			this._addReagentWindow.OpenCentered();
		}

		// Token: 0x06001EAA RID: 7850 RVA: 0x000B3D68 File Offset: 0x000B1F68
		[NullableContext(1)]
		private void SolutionSelected(OptionButton.ItemSelectedEventArgs args)
		{
			this.SolutionOption.SelectId(args.Id);
			this._selectedSolution = (string)this.SolutionOption.SelectedMetadata;
			AddReagentWindow addReagentWindow = this._addReagentWindow;
			if (addReagentWindow != null)
			{
				addReagentWindow.UpdateSolution(this._selectedSolution);
			}
			this.UpdateReagents();
		}

		// Token: 0x06001EAB RID: 7851 RVA: 0x000B3DBC File Offset: 0x000B1FBC
		public void UpdateSolutions([Nullable(new byte[]
		{
			2,
			1,
			1
		})] Dictionary<string, Solution> solutions)
		{
			this.SolutionOption.Clear();
			this._solutions = solutions;
			if (this._solutions == null)
			{
				return;
			}
			int num = 0;
			foreach (string text in this._solutions.Keys)
			{
				this.SolutionOption.AddItem(text, new int?(num));
				this.SolutionOption.SetItemMetadata(num, text);
				if (text == this._selectedSolution)
				{
					this.SolutionOption.Select(num);
				}
				num++;
			}
			if (this.SolutionOption.ItemCount == 0)
			{
				this.Close();
				base.Dispose();
			}
			if (this._selectedSolution == null || !this._solutions.ContainsKey(this._selectedSolution))
			{
				this.SolutionOption.Select(0);
				this._selectedSolution = (string)this.SolutionOption.SelectedMetadata;
			}
		}

		// Token: 0x1700069F RID: 1695
		// (get) Token: 0x06001EAC RID: 7852 RVA: 0x000B3EC0 File Offset: 0x000B20C0
		private OptionButton SolutionOption
		{
			get
			{
				return base.FindControl<OptionButton>("SolutionOption");
			}
		}

		// Token: 0x170006A0 RID: 1696
		// (get) Token: 0x06001EAD RID: 7853 RVA: 0x000B3ECD File Offset: 0x000B20CD
		private BoxContainer VolumeBox
		{
			get
			{
				return base.FindControl<BoxContainer>("VolumeBox");
			}
		}

		// Token: 0x170006A1 RID: 1697
		// (get) Token: 0x06001EAE RID: 7854 RVA: 0x000B3EDA File Offset: 0x000B20DA
		private CollapsibleHeading ThermalHeading
		{
			get
			{
				return base.FindControl<CollapsibleHeading>("ThermalHeading");
			}
		}

		// Token: 0x170006A2 RID: 1698
		// (get) Token: 0x06001EAF RID: 7855 RVA: 0x000B3EE7 File Offset: 0x000B20E7
		private BoxContainer ThermalBox
		{
			get
			{
				return base.FindControl<BoxContainer>("ThermalBox");
			}
		}

		// Token: 0x170006A3 RID: 1699
		// (get) Token: 0x06001EB0 RID: 7856 RVA: 0x000B3EF4 File Offset: 0x000B20F4
		private BoxContainer ReagentList
		{
			get
			{
				return base.FindControl<BoxContainer>("ReagentList");
			}
		}

		// Token: 0x170006A4 RID: 1700
		// (get) Token: 0x06001EB1 RID: 7857 RVA: 0x0006D910 File Offset: 0x0006BB10
		private Button AddButton
		{
			get
			{
				return base.FindControl<Button>("AddButton");
			}
		}

		// Token: 0x06001EB2 RID: 7858 RVA: 0x000B3F04 File Offset: 0x000B2104
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.Administration.UI.ManageSolutions.EditSolutionsWindow.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.SetSize = new Vector2(300f, 400f);
			A_1.Margin = new Thickness(4f, 0f, 4f, 0f);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 0;
			boxContainer2.HorizontalExpand = true;
			boxContainer2.Margin = new Thickness(0f, 4f, 0f, 4f);
			Control control = new Label
			{
				Text = (string)new LocExtension("admin-solutions-window-solution-label").ProvideValue(),
				Margin = new Thickness(0f, 0f, 10f, 0f)
			};
			boxContainer2.XamlChildren.Add(control);
			OptionButton optionButton = new OptionButton();
			optionButton.Name = "SolutionOption";
			control = optionButton;
			context.RobustNameScope.Register("SolutionOption", control);
			optionButton.HorizontalExpand = true;
			control = optionButton;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Name = "VolumeBox";
			control = boxContainer3;
			context.RobustNameScope.Register("VolumeBox", control);
			boxContainer3.Orientation = 1;
			boxContainer3.HorizontalExpand = true;
			boxContainer3.Margin = new Thickness(0f, 4f, 0f, 4f);
			control = boxContainer3;
			boxContainer.XamlChildren.Add(control);
			Collapsible collapsible = new Collapsible();
			collapsible.Orientation = 1;
			CollapsibleHeading collapsibleHeading = new CollapsibleHeading();
			collapsibleHeading.Name = "ThermalHeading";
			control = collapsibleHeading;
			context.RobustNameScope.Register("ThermalHeading", control);
			collapsibleHeading.Title = (string)new LocExtension("admin-solutions-window-thermals").ProvideValue();
			control = collapsibleHeading;
			collapsible.XamlChildren.Add(control);
			CollapsibleBody collapsibleBody = new CollapsibleBody();
			BoxContainer boxContainer4 = new BoxContainer();
			boxContainer4.Name = "ThermalBox";
			control = boxContainer4;
			context.RobustNameScope.Register("ThermalBox", control);
			boxContainer4.Orientation = 1;
			boxContainer4.HorizontalExpand = true;
			boxContainer4.Margin = new Thickness(0f, 4f, 0f, 4f);
			control = boxContainer4;
			collapsibleBody.XamlChildren.Add(control);
			control = collapsibleBody;
			collapsible.XamlChildren.Add(control);
			control = collapsible;
			boxContainer.XamlChildren.Add(control);
			ScrollContainer scrollContainer = new ScrollContainer();
			scrollContainer.HorizontalExpand = true;
			scrollContainer.VerticalExpand = true;
			scrollContainer.Margin = new Thickness(0f, 4f, 0f, 4f);
			BoxContainer boxContainer5 = new BoxContainer();
			boxContainer5.Name = "ReagentList";
			control = boxContainer5;
			context.RobustNameScope.Register("ReagentList", control);
			boxContainer5.Orientation = 1;
			control = boxContainer5;
			scrollContainer.XamlChildren.Add(control);
			control = scrollContainer;
			boxContainer.XamlChildren.Add(control);
			Button button = new Button();
			button.Name = "AddButton";
			control = button;
			context.RobustNameScope.Register("AddButton", control);
			button.Text = (string)new LocExtension("admin-solutions-window-add-new-button").ProvideValue();
			button.HorizontalExpand = true;
			button.Margin = new Thickness(0f, 4f, 0f, 4f);
			control = button;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06001EB3 RID: 7859 RVA: 0x000B4357 File Offset: 0x000B2557
		private static void !XamlIlPopulateTrampoline(EditSolutionsWindow A_0)
		{
			EditSolutionsWindow.Populate:Content.Client.Administration.UI.ManageSolutions.EditSolutionsWindow.xaml(null, A_0);
		}

		// Token: 0x04000EDF RID: 3807
		[Nullable(1)]
		[Dependency]
		private readonly IClientConsoleHost _consoleHost;

		// Token: 0x04000EE0 RID: 3808
		[Nullable(1)]
		[Dependency]
		private readonly IEntityManager _entityManager;

		// Token: 0x04000EE1 RID: 3809
		private EntityUid _target = EntityUid.Invalid;

		// Token: 0x04000EE2 RID: 3810
		[Nullable(2)]
		private string _selectedSolution;

		// Token: 0x04000EE3 RID: 3811
		[Nullable(2)]
		private AddReagentWindow _addReagentWindow;

		// Token: 0x04000EE4 RID: 3812
		[Nullable(new byte[]
		{
			2,
			1,
			1
		})]
		private Dictionary<string, Solution> _solutions;
	}
}
