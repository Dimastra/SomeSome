using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Shared.Explosion;
using Robust.Client.AutoGenerated;
using Robust.Client.Console;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Map;
using Robust.Shared.Maths;
using Robust.Shared.Prototypes;

namespace Content.Client.Administration.UI.SpawnExplosion
{
	// Token: 0x020004B3 RID: 1203
	[GenerateTypedNameReferences]
	public sealed class SpawnExplosionWindow : DefaultWindow
	{
		// Token: 0x06001E04 RID: 7684 RVA: 0x000B03B0 File Offset: 0x000AE5B0
		[NullableContext(1)]
		public SpawnExplosionWindow(SpawnExplosionEui eui)
		{
			SpawnExplosionWindow.!XamlIlPopulateTrampoline(this);
			IoCManager.InjectDependencies<SpawnExplosionWindow>(this);
			this._eui = eui;
			this.ExplosionOption.OnItemSelected += this.ExplosionSelected;
			this.MapOptions.OnItemSelected += this.MapSelected;
			this.Recentre.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this.SetLocation();
			};
			this.Spawn.OnPressed += this.SubmitButtonOnOnPressed;
			this.Preview.OnToggled += delegate(BaseButton.ButtonToggledEventArgs _)
			{
				this.UpdatePreview();
			};
			this.MapX.OnValueChanged += delegate(FloatSpinBox.FloatSpinBoxEventArgs _)
			{
				this.UpdatePreview();
			};
			this.MapY.OnValueChanged += delegate(FloatSpinBox.FloatSpinBoxEventArgs _)
			{
				this.UpdatePreview();
			};
			this.Intensity.OnValueChanged += delegate(FloatSpinBox.FloatSpinBoxEventArgs _)
			{
				this.UpdatePreview();
			};
			this.Slope.OnValueChanged += delegate(FloatSpinBox.FloatSpinBoxEventArgs _)
			{
				this.UpdatePreview();
			};
			this.MaxIntensity.OnValueChanged += delegate(FloatSpinBox.FloatSpinBoxEventArgs _)
			{
				this.UpdatePreview();
			};
		}

		// Token: 0x06001E05 RID: 7685 RVA: 0x000B04D3 File Offset: 0x000AE6D3
		[NullableContext(1)]
		private void ExplosionSelected(OptionButton.ItemSelectedEventArgs args)
		{
			this.ExplosionOption.SelectId(args.Id);
			this.UpdatePreview();
		}

		// Token: 0x06001E06 RID: 7686 RVA: 0x000B04EC File Offset: 0x000AE6EC
		[NullableContext(1)]
		private void MapSelected(OptionButton.ItemSelectedEventArgs args)
		{
			this.MapOptions.SelectId(args.Id);
			this.UpdatePreview();
		}

		// Token: 0x06001E07 RID: 7687 RVA: 0x000B0505 File Offset: 0x000AE705
		protected override void EnteredTree()
		{
			this.SetLocation();
			this.UpdateExplosionTypeOptions();
		}

		// Token: 0x06001E08 RID: 7688 RVA: 0x000B0514 File Offset: 0x000AE714
		private void UpdateExplosionTypeOptions()
		{
			this._explosionTypes.Clear();
			this.ExplosionOption.Clear();
			foreach (ExplosionPrototype explosionPrototype in this._prototypeManager.EnumeratePrototypes<ExplosionPrototype>())
			{
				this._explosionTypes.Add(explosionPrototype.ID);
				this.ExplosionOption.AddItem(explosionPrototype.ID, null);
			}
		}

		// Token: 0x06001E09 RID: 7689 RVA: 0x000B05A0 File Offset: 0x000AE7A0
		private void UpdateMapOptions()
		{
			this._mapData.Clear();
			this.MapOptions.Clear();
			foreach (MapId item in this._mapManager.GetAllMapIds())
			{
				this._mapData.Add(item);
				this.MapOptions.AddItem(item.ToString(), null);
			}
		}

		// Token: 0x06001E0A RID: 7690 RVA: 0x000B0630 File Offset: 0x000AE830
		private void SetLocation()
		{
			this.UpdateMapOptions();
			IEntityManager entMan = this._entMan;
			LocalPlayer localPlayer = this._playerManager.LocalPlayer;
			TransformComponent transformComponent;
			if (!entMan.TryGetComponent<TransformComponent>((localPlayer != null) ? localPlayer.ControlledEntity : null, ref transformComponent))
			{
				return;
			}
			this._pausePreview = true;
			this.MapOptions.Select(this._mapData.IndexOf(transformComponent.MapID));
			FloatSpinBox mapX = this.MapX;
			FloatSpinBox mapY = this.MapY;
			Vector2 position = transformComponent.MapPosition.Position;
			float value;
			float value2;
			position.Deconstruct(ref value, ref value2);
			mapX.Value = value;
			mapY.Value = value2;
			this._pausePreview = false;
			this.UpdatePreview();
		}

		// Token: 0x06001E0B RID: 7691 RVA: 0x000B06D8 File Offset: 0x000AE8D8
		private void UpdatePreview()
		{
			if (this._pausePreview)
			{
				return;
			}
			if (!this.Preview.Pressed)
			{
				this._eui.ClearOverlay();
				return;
			}
			MapCoordinates epicenter;
			epicenter..ctor(new ValueTuple<float, float>(this.MapX.Value, this.MapY.Value), this._mapData[this.MapOptions.SelectedId]);
			string typeId = this._explosionTypes[this.ExplosionOption.SelectedId];
			this._eui.RequestPreviewData(epicenter, typeId, this.Intensity.Value, this.Slope.Value, this.MaxIntensity.Value);
		}

		// Token: 0x06001E0C RID: 7692 RVA: 0x000B078C File Offset: 0x000AE98C
		[NullableContext(1)]
		private void SubmitButtonOnOnPressed(BaseButton.ButtonEventArgs args)
		{
			this.Preview.Pressed = false;
			this._eui.ClearOverlay();
			MapId value = this._mapData[this.MapOptions.SelectedId];
			string value2 = this._explosionTypes[this.ExplosionOption.SelectedId];
			DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(16, 7);
			defaultInterpolatedStringHandler.AppendLiteral("explosion ");
			defaultInterpolatedStringHandler.AppendFormatted<float>(this.Intensity.Value);
			defaultInterpolatedStringHandler.AppendLiteral(" ");
			defaultInterpolatedStringHandler.AppendFormatted<float>(this.Slope.Value);
			defaultInterpolatedStringHandler.AppendLiteral(" ");
			defaultInterpolatedStringHandler.AppendFormatted<float>(this.MaxIntensity.Value);
			defaultInterpolatedStringHandler.AppendLiteral(" ");
			defaultInterpolatedStringHandler.AppendFormatted<float>(this.MapX.Value);
			defaultInterpolatedStringHandler.AppendLiteral(" ");
			defaultInterpolatedStringHandler.AppendFormatted<float>(this.MapY.Value);
			defaultInterpolatedStringHandler.AppendLiteral(" ");
			defaultInterpolatedStringHandler.AppendFormatted<MapId>(value);
			defaultInterpolatedStringHandler.AppendLiteral(" ");
			defaultInterpolatedStringHandler.AppendFormatted(value2);
			string text = defaultInterpolatedStringHandler.ToStringAndClear();
			this._conHost.ExecuteCommand(text);
		}

		// Token: 0x17000673 RID: 1651
		// (get) Token: 0x06001E0D RID: 7693 RVA: 0x0005CCDB File Offset: 0x0005AEDB
		private BoxContainer MainContainer
		{
			get
			{
				return base.FindControl<BoxContainer>("MainContainer");
			}
		}

		// Token: 0x17000674 RID: 1652
		// (get) Token: 0x06001E0E RID: 7694 RVA: 0x000B08BA File Offset: 0x000AEABA
		private OptionButton ExplosionOption
		{
			get
			{
				return base.FindControl<OptionButton>("ExplosionOption");
			}
		}

		// Token: 0x17000675 RID: 1653
		// (get) Token: 0x06001E0F RID: 7695 RVA: 0x000AF461 File Offset: 0x000AD661
		private OptionButton MapOptions
		{
			get
			{
				return base.FindControl<OptionButton>("MapOptions");
			}
		}

		// Token: 0x17000676 RID: 1654
		// (get) Token: 0x06001E10 RID: 7696 RVA: 0x000B08C7 File Offset: 0x000AEAC7
		private FloatSpinBox MapX
		{
			get
			{
				return base.FindControl<FloatSpinBox>("MapX");
			}
		}

		// Token: 0x17000677 RID: 1655
		// (get) Token: 0x06001E11 RID: 7697 RVA: 0x000B08D4 File Offset: 0x000AEAD4
		private FloatSpinBox MapY
		{
			get
			{
				return base.FindControl<FloatSpinBox>("MapY");
			}
		}

		// Token: 0x17000678 RID: 1656
		// (get) Token: 0x06001E12 RID: 7698 RVA: 0x000B08E1 File Offset: 0x000AEAE1
		private Button Recentre
		{
			get
			{
				return base.FindControl<Button>("Recentre");
			}
		}

		// Token: 0x17000679 RID: 1657
		// (get) Token: 0x06001E13 RID: 7699 RVA: 0x000B08EE File Offset: 0x000AEAEE
		private CheckBox Preview
		{
			get
			{
				return base.FindControl<CheckBox>("Preview");
			}
		}

		// Token: 0x1700067A RID: 1658
		// (get) Token: 0x06001E14 RID: 7700 RVA: 0x000B08FB File Offset: 0x000AEAFB
		private FloatSpinBox Intensity
		{
			get
			{
				return base.FindControl<FloatSpinBox>("Intensity");
			}
		}

		// Token: 0x1700067B RID: 1659
		// (get) Token: 0x06001E15 RID: 7701 RVA: 0x000B0908 File Offset: 0x000AEB08
		private FloatSpinBox Slope
		{
			get
			{
				return base.FindControl<FloatSpinBox>("Slope");
			}
		}

		// Token: 0x1700067C RID: 1660
		// (get) Token: 0x06001E16 RID: 7702 RVA: 0x000B0915 File Offset: 0x000AEB15
		private FloatSpinBox MaxIntensity
		{
			get
			{
				return base.FindControl<FloatSpinBox>("MaxIntensity");
			}
		}

		// Token: 0x1700067D RID: 1661
		// (get) Token: 0x06001E17 RID: 7703 RVA: 0x000B0922 File Offset: 0x000AEB22
		private Button Spawn
		{
			get
			{
				return base.FindControl<Button>("Spawn");
			}
		}

		// Token: 0x06001E1F RID: 7711 RVA: 0x000B0940 File Offset: 0x000AEB40
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.Administration.UI.SpawnExplosion.SpawnExplosionWindow.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Title = (string)new LocExtension("admin-explosion-eui-title").ProvideValue();
			A_1.SetHeight = 380f;
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Name = "MainContainer";
			Control control = boxContainer;
			context.RobustNameScope.Register("MainContainer", control);
			boxContainer.Orientation = 1;
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("admin-explosion-eui-label-type").ProvideValue(),
				MinSize = new Vector2(120f, 0f)
			};
			boxContainer2.XamlChildren.Add(control);
			OptionButton optionButton = new OptionButton();
			optionButton.Name = "ExplosionOption";
			control = optionButton;
			context.RobustNameScope.Register("ExplosionOption", control);
			optionButton.MinSize = new Vector2(70f, 0f);
			optionButton.HorizontalExpand = true;
			control = optionButton;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("admin-explosion-eui-label-mapid").ProvideValue(),
				MinSize = new Vector2(120f, 0f)
			};
			boxContainer3.XamlChildren.Add(control);
			OptionButton optionButton2 = new OptionButton();
			optionButton2.Name = "MapOptions";
			control = optionButton2;
			context.RobustNameScope.Register("MapOptions", control);
			optionButton2.MinSize = new Vector2(70f, 0f);
			optionButton2.HorizontalExpand = true;
			control = optionButton2;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer4 = new BoxContainer();
			boxContainer4.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("admin-explosion-eui-label-xmap").ProvideValue(),
				MinSize = new Vector2(120f, 0f)
			};
			boxContainer4.XamlChildren.Add(control);
			FloatSpinBox floatSpinBox = new FloatSpinBox();
			floatSpinBox.Name = "MapX";
			control = floatSpinBox;
			context.RobustNameScope.Register("MapX", control);
			floatSpinBox.MinSize = new Vector2(70f, 0f);
			floatSpinBox.HorizontalExpand = true;
			control = floatSpinBox;
			boxContainer4.XamlChildren.Add(control);
			control = boxContainer4;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer5 = new BoxContainer();
			boxContainer5.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("admin-explosion-eui-label-ymap").ProvideValue(),
				MinSize = new Vector2(120f, 0f)
			};
			boxContainer5.XamlChildren.Add(control);
			FloatSpinBox floatSpinBox2 = new FloatSpinBox();
			floatSpinBox2.Name = "MapY";
			control = floatSpinBox2;
			context.RobustNameScope.Register("MapY", control);
			floatSpinBox2.MinSize = new Vector2(70f, 0f);
			floatSpinBox2.HorizontalExpand = true;
			control = floatSpinBox2;
			boxContainer5.XamlChildren.Add(control);
			control = boxContainer5;
			boxContainer.XamlChildren.Add(control);
			Button button = new Button();
			button.Name = "Recentre";
			control = button;
			context.RobustNameScope.Register("Recentre", control);
			button.Text = (string)new LocExtension("admin-explosion-eui-label-current").ProvideValue();
			control = button;
			boxContainer.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(0f, 20f)
			};
			boxContainer.XamlChildren.Add(control);
			CheckBox checkBox = new CheckBox();
			checkBox.Name = "Preview";
			control = checkBox;
			context.RobustNameScope.Register("Preview", control);
			checkBox.Text = (string)new LocExtension("admin-explosion-eui-label-preview").ProvideValue();
			control = checkBox;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer6 = new BoxContainer();
			boxContainer6.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("admin-explosion-eui-label-total").ProvideValue(),
				MinSize = new Vector2(120f, 0f)
			};
			boxContainer6.XamlChildren.Add(control);
			FloatSpinBox floatSpinBox3 = new FloatSpinBox();
			floatSpinBox3.Name = "Intensity";
			control = floatSpinBox3;
			context.RobustNameScope.Register("Intensity", control);
			floatSpinBox3.MinSize = new Vector2(130f, 0f);
			floatSpinBox3.HorizontalExpand = true;
			floatSpinBox3.Value = 200f;
			control = floatSpinBox3;
			boxContainer6.XamlChildren.Add(control);
			control = boxContainer6;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer7 = new BoxContainer();
			boxContainer7.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("admin-explosion-eui-label-slope").ProvideValue(),
				MinSize = new Vector2(120f, 0f)
			};
			boxContainer7.XamlChildren.Add(control);
			FloatSpinBox floatSpinBox4 = new FloatSpinBox();
			floatSpinBox4.Name = "Slope";
			control = floatSpinBox4;
			context.RobustNameScope.Register("Slope", control);
			floatSpinBox4.MinSize = new Vector2(130f, 0f);
			floatSpinBox4.HorizontalExpand = true;
			floatSpinBox4.Value = 5f;
			control = floatSpinBox4;
			boxContainer7.XamlChildren.Add(control);
			control = boxContainer7;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer8 = new BoxContainer();
			boxContainer8.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("admin-explosion-eui-label-max").ProvideValue(),
				MinSize = new Vector2(120f, 0f)
			};
			boxContainer8.XamlChildren.Add(control);
			FloatSpinBox floatSpinBox5 = new FloatSpinBox();
			floatSpinBox5.Name = "MaxIntensity";
			control = floatSpinBox5;
			context.RobustNameScope.Register("MaxIntensity", control);
			floatSpinBox5.MinSize = new Vector2(130f, 0f);
			floatSpinBox5.HorizontalExpand = true;
			floatSpinBox5.Value = 100f;
			control = floatSpinBox5;
			boxContainer8.XamlChildren.Add(control);
			control = boxContainer8;
			boxContainer.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(0f, 20f)
			};
			boxContainer.XamlChildren.Add(control);
			Button button2 = new Button();
			button2.Name = "Spawn";
			control = button2;
			context.RobustNameScope.Register("Spawn", control);
			button2.Text = (string)new LocExtension("admin-explosion-eui-label-spawn").ProvideValue();
			control = button2;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06001E20 RID: 7712 RVA: 0x000B1142 File Offset: 0x000AF342
		private static void !XamlIlPopulateTrampoline(SpawnExplosionWindow A_0)
		{
			SpawnExplosionWindow.Populate:Content.Client.Administration.UI.SpawnExplosion.SpawnExplosionWindow.xaml(null, A_0);
		}

		// Token: 0x04000EB5 RID: 3765
		[Nullable(1)]
		[Dependency]
		private readonly IClientConsoleHost _conHost;

		// Token: 0x04000EB6 RID: 3766
		[Nullable(1)]
		[Dependency]
		private readonly IMapManager _mapManager;

		// Token: 0x04000EB7 RID: 3767
		[Nullable(1)]
		[Dependency]
		private readonly IPlayerManager _playerManager;

		// Token: 0x04000EB8 RID: 3768
		[Nullable(1)]
		[Dependency]
		private readonly IPrototypeManager _prototypeManager;

		// Token: 0x04000EB9 RID: 3769
		[Nullable(1)]
		[Dependency]
		private readonly IEntityManager _entMan;

		// Token: 0x04000EBA RID: 3770
		[Nullable(1)]
		private readonly SpawnExplosionEui _eui;

		// Token: 0x04000EBB RID: 3771
		[Nullable(1)]
		private List<MapId> _mapData = new List<MapId>();

		// Token: 0x04000EBC RID: 3772
		[Nullable(1)]
		private List<string> _explosionTypes = new List<string>();

		// Token: 0x04000EBD RID: 3773
		private bool _pausePreview;
	}
}
