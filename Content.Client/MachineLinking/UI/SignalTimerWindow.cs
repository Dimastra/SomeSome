using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.TextScreen;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.Localization;
using Robust.Shared.Timing;

namespace Content.Client.MachineLinking.UI
{
	// Token: 0x02000259 RID: 601
	[GenerateTypedNameReferences]
	public sealed class SignalTimerWindow : DefaultWindow
	{
		// Token: 0x14000054 RID: 84
		// (add) Token: 0x06000F39 RID: 3897 RVA: 0x0005B560 File Offset: 0x00059760
		// (remove) Token: 0x06000F3A RID: 3898 RVA: 0x0005B598 File Offset: 0x00059798
		[Nullable(new byte[]
		{
			2,
			1
		})]
		[Nullable(new byte[]
		{
			2,
			1
		})]
		public event Action<string> OnCurrentTextChanged;

		// Token: 0x14000055 RID: 85
		// (add) Token: 0x06000F3B RID: 3899 RVA: 0x0005B5D0 File Offset: 0x000597D0
		// (remove) Token: 0x06000F3C RID: 3900 RVA: 0x0005B608 File Offset: 0x00059808
		[Nullable(new byte[]
		{
			2,
			1
		})]
		[Nullable(new byte[]
		{
			2,
			1
		})]
		public event Action<string> OnCurrentDelayMinutesChanged;

		// Token: 0x14000056 RID: 86
		// (add) Token: 0x06000F3D RID: 3901 RVA: 0x0005B640 File Offset: 0x00059840
		// (remove) Token: 0x06000F3E RID: 3902 RVA: 0x0005B678 File Offset: 0x00059878
		[Nullable(new byte[]
		{
			2,
			1
		})]
		[Nullable(new byte[]
		{
			2,
			1
		})]
		public event Action<string> OnCurrentDelaySecondsChanged;

		// Token: 0x06000F3F RID: 3903 RVA: 0x0005B6B0 File Offset: 0x000598B0
		[NullableContext(1)]
		public SignalTimerWindow(SignalTimerBoundUserInterface owner)
		{
			SignalTimerWindow.!XamlIlPopulateTrampoline(this);
			this._owner = owner;
			this.CurrentTextEdit.OnTextChanged += delegate(LineEdit.LineEditEventArgs e)
			{
				this.OnCurrentTextChange(e.Text);
			};
			this.CurrentDelayEditMinutes.OnTextChanged += delegate(LineEdit.LineEditEventArgs e)
			{
				this.OnCurrentDelayMinutesChange(e.Text);
			};
			this.CurrentDelayEditSeconds.OnTextChanged += delegate(LineEdit.LineEditEventArgs e)
			{
				this.OnCurrentDelaySecondsChange(e.Text);
			};
			this.StartTimer.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this.OnStartTimer();
			};
		}

		// Token: 0x06000F40 RID: 3904 RVA: 0x0005B72C File Offset: 0x0005992C
		public void OnStartTimer()
		{
			if (!this._timerStarted)
			{
				this._timerStarted = true;
				this._triggerTime = new TimeSpan?(this._owner.GetCurrentTime() + this.GetDelay());
			}
			else
			{
				this.SetTimerStarted(false);
			}
			this._owner.OnStartTimer();
		}

		// Token: 0x06000F41 RID: 3905 RVA: 0x0005B780 File Offset: 0x00059980
		protected override void FrameUpdate(FrameEventArgs args)
		{
			base.FrameUpdate(args);
			if (this._timerStarted && this._triggerTime != null)
			{
				if (this._owner.GetCurrentTime() < this._triggerTime.Value)
				{
					this.StartTimer.Text = TextScreenSystem.TimeToString(this._triggerTime.Value - this._owner.GetCurrentTime(), true);
					return;
				}
				this.SetTimerStarted(false);
			}
		}

		// Token: 0x06000F42 RID: 3906 RVA: 0x0005B7FC File Offset: 0x000599FC
		[NullableContext(1)]
		public void OnCurrentTextChange(string text)
		{
			if (this.CurrentTextEdit.Text.Length > 5)
			{
				this.CurrentTextEdit.Text = this.CurrentTextEdit.Text.Remove(5);
				this.CurrentTextEdit.CursorPosition = 5;
			}
			Action<string> onCurrentTextChanged = this.OnCurrentTextChanged;
			if (onCurrentTextChanged == null)
			{
				return;
			}
			onCurrentTextChanged(text);
		}

		// Token: 0x06000F43 RID: 3907 RVA: 0x0005B858 File Offset: 0x00059A58
		[NullableContext(1)]
		public void OnCurrentDelayMinutesChange(string text)
		{
			List<char> list = new List<char>();
			foreach (char c in text)
			{
				if (!char.IsDigit(c))
				{
					list.Add(c);
				}
			}
			foreach (char c2 in list)
			{
				this.CurrentDelayEditMinutes.Text = text.Replace(c2.ToString(), "");
			}
			if (this.CurrentDelayEditMinutes.Text == "")
			{
				return;
			}
			while (this.CurrentDelayEditMinutes.Text[0] == '0' && this.CurrentDelayEditMinutes.Text.Length > 2)
			{
				this.CurrentDelayEditMinutes.Text = this.CurrentDelayEditMinutes.Text.Remove(0, 1);
			}
			if (this.CurrentDelayEditMinutes.Text.Length > 2)
			{
				this.CurrentDelayEditMinutes.Text = this.CurrentDelayEditMinutes.Text.Remove(2);
			}
			Action<string> onCurrentDelayMinutesChanged = this.OnCurrentDelayMinutesChanged;
			if (onCurrentDelayMinutesChanged == null)
			{
				return;
			}
			onCurrentDelayMinutesChanged(this.CurrentDelayEditMinutes.Text);
		}

		// Token: 0x06000F44 RID: 3908 RVA: 0x0005B998 File Offset: 0x00059B98
		[NullableContext(1)]
		public void OnCurrentDelaySecondsChange(string text)
		{
			List<char> list = new List<char>();
			foreach (char c in text)
			{
				if (!char.IsDigit(c))
				{
					list.Add(c);
				}
			}
			foreach (char c2 in list)
			{
				this.CurrentDelayEditSeconds.Text = text.Replace(c2.ToString(), "");
			}
			if (this.CurrentDelayEditSeconds.Text == "")
			{
				return;
			}
			while (this.CurrentDelayEditSeconds.Text[0] == '0' && this.CurrentDelayEditSeconds.Text.Length > 2)
			{
				this.CurrentDelayEditSeconds.Text = this.CurrentDelayEditSeconds.Text.Remove(0, 1);
			}
			if (this.CurrentDelayEditSeconds.Text.Length > 2)
			{
				this.CurrentDelayEditSeconds.Text = this.CurrentDelayEditSeconds.Text.Remove(2);
			}
			Action<string> onCurrentDelaySecondsChanged = this.OnCurrentDelaySecondsChanged;
			if (onCurrentDelaySecondsChanged == null)
			{
				return;
			}
			onCurrentDelaySecondsChanged(this.CurrentDelayEditSeconds.Text);
		}

		// Token: 0x06000F45 RID: 3909 RVA: 0x0005BAD8 File Offset: 0x00059CD8
		[NullableContext(1)]
		public void SetCurrentText(string text)
		{
			this.CurrentTextEdit.Text = text;
		}

		// Token: 0x06000F46 RID: 3910 RVA: 0x0005BAE6 File Offset: 0x00059CE6
		[NullableContext(1)]
		public void SetCurrentDelayMinutes(string delay)
		{
			this.CurrentDelayEditMinutes.Text = delay;
		}

		// Token: 0x06000F47 RID: 3911 RVA: 0x0005BAF4 File Offset: 0x00059CF4
		[NullableContext(1)]
		public void SetCurrentDelaySeconds(string delay)
		{
			this.CurrentDelayEditSeconds.Text = delay;
		}

		// Token: 0x06000F48 RID: 3912 RVA: 0x0005BB02 File Offset: 0x00059D02
		public void SetShowText(bool showTime)
		{
			this.TextEdit.Visible = showTime;
		}

		// Token: 0x06000F49 RID: 3913 RVA: 0x0005BB10 File Offset: 0x00059D10
		public void SetTriggerTime(TimeSpan timeSpan)
		{
			this._triggerTime = new TimeSpan?(timeSpan);
		}

		// Token: 0x06000F4A RID: 3914 RVA: 0x0005BB1E File Offset: 0x00059D1E
		public void SetTimerStarted(bool timerStarted)
		{
			this._timerStarted = timerStarted;
			if (!timerStarted)
			{
				this.StartTimer.Text = Loc.GetString("signal-timer-menu-start");
			}
		}

		// Token: 0x06000F4B RID: 3915 RVA: 0x0005BB40 File Offset: 0x00059D40
		public void SetHasAccess(bool? hasAccess)
		{
			if (hasAccess != null)
			{
				this.CurrentTextEdit.Editable = hasAccess.Value;
				this.CurrentDelayEditMinutes.Editable = hasAccess.Value;
				this.CurrentDelayEditSeconds.Editable = hasAccess.Value;
				this.StartTimer.Disabled = !hasAccess.Value;
			}
		}

		// Token: 0x06000F4C RID: 3916 RVA: 0x0005BBA4 File Offset: 0x00059DA4
		public TimeSpan GetDelay()
		{
			double value;
			if (!double.TryParse(this.CurrentDelayEditMinutes.Text, out value))
			{
				value = 0.0;
			}
			double value2;
			if (!double.TryParse(this.CurrentDelayEditSeconds.Text, out value2))
			{
				value2 = 0.0;
			}
			return TimeSpan.FromMinutes(value) + TimeSpan.FromSeconds(value2);
		}

		// Token: 0x17000336 RID: 822
		// (get) Token: 0x06000F4D RID: 3917 RVA: 0x0005BBFE File Offset: 0x00059DFE
		private BoxContainer TextEdit
		{
			get
			{
				return base.FindControl<BoxContainer>("TextEdit");
			}
		}

		// Token: 0x17000337 RID: 823
		// (get) Token: 0x06000F4E RID: 3918 RVA: 0x0005BC0B File Offset: 0x00059E0B
		private Label CurrentLabel
		{
			get
			{
				return base.FindControl<Label>("CurrentLabel");
			}
		}

		// Token: 0x17000338 RID: 824
		// (get) Token: 0x06000F4F RID: 3919 RVA: 0x0005BC18 File Offset: 0x00059E18
		private LineEdit CurrentTextEdit
		{
			get
			{
				return base.FindControl<LineEdit>("CurrentTextEdit");
			}
		}

		// Token: 0x17000339 RID: 825
		// (get) Token: 0x06000F50 RID: 3920 RVA: 0x0005BC25 File Offset: 0x00059E25
		private BoxContainer DelayEdit
		{
			get
			{
				return base.FindControl<BoxContainer>("DelayEdit");
			}
		}

		// Token: 0x1700033A RID: 826
		// (get) Token: 0x06000F51 RID: 3921 RVA: 0x0005BC32 File Offset: 0x00059E32
		private Label CurrentDelay
		{
			get
			{
				return base.FindControl<Label>("CurrentDelay");
			}
		}

		// Token: 0x1700033B RID: 827
		// (get) Token: 0x06000F52 RID: 3922 RVA: 0x0005BC3F File Offset: 0x00059E3F
		private LineEdit CurrentDelayEditMinutes
		{
			get
			{
				return base.FindControl<LineEdit>("CurrentDelayEditMinutes");
			}
		}

		// Token: 0x1700033C RID: 828
		// (get) Token: 0x06000F53 RID: 3923 RVA: 0x0005BC4C File Offset: 0x00059E4C
		private Label Colon
		{
			get
			{
				return base.FindControl<Label>("Colon");
			}
		}

		// Token: 0x1700033D RID: 829
		// (get) Token: 0x06000F54 RID: 3924 RVA: 0x0005BC59 File Offset: 0x00059E59
		private LineEdit CurrentDelayEditSeconds
		{
			get
			{
				return base.FindControl<LineEdit>("CurrentDelayEditSeconds");
			}
		}

		// Token: 0x1700033E RID: 830
		// (get) Token: 0x06000F55 RID: 3925 RVA: 0x0005BC66 File Offset: 0x00059E66
		private Label DelayInfo
		{
			get
			{
				return base.FindControl<Label>("DelayInfo");
			}
		}

		// Token: 0x1700033F RID: 831
		// (get) Token: 0x06000F56 RID: 3926 RVA: 0x0005BC73 File Offset: 0x00059E73
		private Button StartTimer
		{
			get
			{
				return base.FindControl<Button>("StartTimer");
			}
		}

		// Token: 0x06000F5B RID: 3931 RVA: 0x0005BCB4 File Offset: 0x00059EB4
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.MachineLinking.UI.SignalTimerWindow.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Title = (string)new LocExtension("signal-timer-menu-title").ProvideValue();
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			boxContainer.SeparationOverride = new int?(4);
			boxContainer.MinWidth = 150f;
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Name = "TextEdit";
			Control control = boxContainer2;
			context.RobustNameScope.Register("TextEdit", control);
			boxContainer2.Orientation = 0;
			Label label = new Label();
			label.Name = "CurrentLabel";
			control = label;
			context.RobustNameScope.Register("CurrentLabel", control);
			label.Text = (string)new LocExtension("signal-timer-menu-label").ProvideValue();
			control = label;
			boxContainer2.XamlChildren.Add(control);
			LineEdit lineEdit = new LineEdit();
			lineEdit.Name = "CurrentTextEdit";
			control = lineEdit;
			context.RobustNameScope.Register("CurrentTextEdit", control);
			lineEdit.MinWidth = 80f;
			control = lineEdit;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Name = "DelayEdit";
			control = boxContainer3;
			context.RobustNameScope.Register("DelayEdit", control);
			boxContainer3.Orientation = 0;
			Label label2 = new Label();
			label2.Name = "CurrentDelay";
			control = label2;
			context.RobustNameScope.Register("CurrentDelay", control);
			label2.Text = (string)new LocExtension("signal-timer-menu-delay").ProvideValue();
			control = label2;
			boxContainer3.XamlChildren.Add(control);
			LineEdit lineEdit2 = new LineEdit();
			lineEdit2.Name = "CurrentDelayEditMinutes";
			control = lineEdit2;
			context.RobustNameScope.Register("CurrentDelayEditMinutes", control);
			lineEdit2.MinWidth = 32f;
			control = lineEdit2;
			boxContainer3.XamlChildren.Add(control);
			Label label3 = new Label();
			label3.Name = "Colon";
			control = label3;
			context.RobustNameScope.Register("Colon", control);
			label3.Text = ":";
			control = label3;
			boxContainer3.XamlChildren.Add(control);
			LineEdit lineEdit3 = new LineEdit();
			lineEdit3.Name = "CurrentDelayEditSeconds";
			control = lineEdit3;
			context.RobustNameScope.Register("CurrentDelayEditSeconds", control);
			lineEdit3.MinWidth = 32f;
			control = lineEdit3;
			boxContainer3.XamlChildren.Add(control);
			Label label4 = new Label();
			label4.Name = "DelayInfo";
			control = label4;
			context.RobustNameScope.Register("DelayInfo", control);
			label4.Text = " (mm:ss)";
			control = label4;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer.XamlChildren.Add(control);
			Button button = new Button();
			button.Name = "StartTimer";
			control = button;
			context.RobustNameScope.Register("StartTimer", control);
			button.Text = (string)new LocExtension("signal-timer-menu-start").ProvideValue();
			control = button;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06000F5C RID: 3932 RVA: 0x0005C09D File Offset: 0x0005A29D
		private static void !XamlIlPopulateTrampoline(SignalTimerWindow A_0)
		{
			SignalTimerWindow.Populate:Content.Client.MachineLinking.UI.SignalTimerWindow.xaml(null, A_0);
		}

		// Token: 0x04000790 RID: 1936
		private const int MaxTextLength = 5;

		// Token: 0x04000794 RID: 1940
		[Nullable(1)]
		private readonly SignalTimerBoundUserInterface _owner;

		// Token: 0x04000795 RID: 1941
		private TimeSpan? _triggerTime;

		// Token: 0x04000796 RID: 1942
		private bool _timerStarted;
	}
}
