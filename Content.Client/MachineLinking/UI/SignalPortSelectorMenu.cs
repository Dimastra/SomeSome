using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Shared.MachineLinking;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;
using Robust.Shared.Prototypes;

namespace Content.Client.MachineLinking.UI
{
	// Token: 0x02000254 RID: 596
	[GenerateTypedNameReferences]
	public sealed class SignalPortSelectorMenu : DefaultWindow
	{
		// Token: 0x06000F1E RID: 3870 RVA: 0x0005AB68 File Offset: 0x00058D68
		[NullableContext(1)]
		public SignalPortSelectorMenu(SignalPortSelectorBoundUserInterface boundUserInterface)
		{
			SignalPortSelectorMenu.!XamlIlPopulateTrampoline(this);
			this._bui = boundUserInterface;
			this._links = new SignalPortSelectorMenu.LinksRender(this.ButtonContainerLeft, this.ButtonContainerRight);
			this.ContainerMiddle.AddChild(this._links);
			this.ButtonClear.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this._bui.OnClearPressed();
			};
			this.ButtonLinkDefault.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this._bui.OnLinkDefaultPressed();
			};
			this._protoMan = IoCManager.Resolve<IPrototypeManager>();
		}

		// Token: 0x06000F1F RID: 3871 RVA: 0x0005ABF4 File Offset: 0x00058DF4
		[NullableContext(1)]
		public void UpdateState(SignalPortsState state)
		{
			this.HeaderLeft.SetMessage(state.TransmitterName);
			this.ButtonContainerLeft.DisposeAllChildren();
			using (List<string>.Enumerator enumerator = state.TransmitterPorts.GetEnumerator())
			{
				while (enumerator.MoveNext())
				{
					string port = enumerator.Current;
					TransmitterPortPrototype transmitterPortPrototype = this._protoMan.Index<TransmitterPortPrototype>(port);
					Button button = new Button
					{
						Text = Loc.GetString(transmitterPortPrototype.Name),
						ToolTip = Loc.GetString(transmitterPortPrototype.Description),
						ToggleMode = true,
						Group = this._buttonGroup
					};
					button.OnPressed += delegate(BaseButton.ButtonEventArgs _)
					{
						this._bui.OnTransmitterPortSelected(port);
					};
					this.ButtonContainerLeft.AddChild(button);
				}
			}
			this.HeaderRight.SetMessage(state.ReceiverName);
			this.ButtonContainerRight.DisposeAllChildren();
			using (List<string>.Enumerator enumerator = state.ReceiverPorts.GetEnumerator())
			{
				while (enumerator.MoveNext())
				{
					string port = enumerator.Current;
					ReceiverPortPrototype receiverPortPrototype = this._protoMan.Index<ReceiverPortPrototype>(port);
					Button button2 = new Button
					{
						Text = Loc.GetString(receiverPortPrototype.Name),
						ToolTip = Loc.GetString(receiverPortPrototype.Description),
						ToggleMode = true,
						Group = this._buttonGroup
					};
					button2.OnPressed += delegate(BaseButton.ButtonEventArgs _)
					{
						this._bui.OnReceiverPortSelected(port);
					};
					this.ButtonContainerRight.AddChild(button2);
				}
			}
			this._links.Links = state.Links;
		}

		// Token: 0x1700032F RID: 815
		// (get) Token: 0x06000F20 RID: 3872 RVA: 0x0005ADD8 File Offset: 0x00058FD8
		private RichTextLabel HeaderLeft
		{
			get
			{
				return base.FindControl<RichTextLabel>("HeaderLeft");
			}
		}

		// Token: 0x17000330 RID: 816
		// (get) Token: 0x06000F21 RID: 3873 RVA: 0x0005ADE5 File Offset: 0x00058FE5
		private BoxContainer ButtonContainerLeft
		{
			get
			{
				return base.FindControl<BoxContainer>("ButtonContainerLeft");
			}
		}

		// Token: 0x17000331 RID: 817
		// (get) Token: 0x06000F22 RID: 3874 RVA: 0x0005ADF2 File Offset: 0x00058FF2
		private BoxContainer ContainerMiddle
		{
			get
			{
				return base.FindControl<BoxContainer>("ContainerMiddle");
			}
		}

		// Token: 0x17000332 RID: 818
		// (get) Token: 0x06000F23 RID: 3875 RVA: 0x0005ADFF File Offset: 0x00058FFF
		private RichTextLabel HeaderRight
		{
			get
			{
				return base.FindControl<RichTextLabel>("HeaderRight");
			}
		}

		// Token: 0x17000333 RID: 819
		// (get) Token: 0x06000F24 RID: 3876 RVA: 0x0005AE0C File Offset: 0x0005900C
		private BoxContainer ButtonContainerRight
		{
			get
			{
				return base.FindControl<BoxContainer>("ButtonContainerRight");
			}
		}

		// Token: 0x17000334 RID: 820
		// (get) Token: 0x06000F25 RID: 3877 RVA: 0x0005AE19 File Offset: 0x00059019
		private Button ButtonClear
		{
			get
			{
				return base.FindControl<Button>("ButtonClear");
			}
		}

		// Token: 0x17000335 RID: 821
		// (get) Token: 0x06000F26 RID: 3878 RVA: 0x0005AE26 File Offset: 0x00059026
		private Button ButtonLinkDefault
		{
			get
			{
				return base.FindControl<Button>("ButtonLinkDefault");
			}
		}

		// Token: 0x06000F29 RID: 3881 RVA: 0x0005AE50 File Offset: 0x00059050
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.MachineLinking.UI.SignalPortSelectorMenu.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Title = (string)new LocExtension("signal-port-selector-menu-title").ProvideValue();
			A_1.MinSize = new Vector2(400f, 200f);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			boxContainer.VerticalExpand = true;
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 0;
			boxContainer2.HorizontalExpand = true;
			boxContainer2.VerticalExpand = true;
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 1;
			boxContainer3.HorizontalExpand = true;
			boxContainer3.SizeFlagsStretchRatio = 0.3f;
			RichTextLabel richTextLabel = new RichTextLabel();
			richTextLabel.Name = "HeaderLeft";
			Control control = richTextLabel;
			context.RobustNameScope.Register("HeaderLeft", control);
			control = richTextLabel;
			boxContainer3.XamlChildren.Add(control);
			BoxContainer boxContainer4 = new BoxContainer();
			boxContainer4.Name = "ButtonContainerLeft";
			control = boxContainer4;
			context.RobustNameScope.Register("ButtonContainerLeft", control);
			boxContainer4.Orientation = 1;
			boxContainer4.VerticalExpand = true;
			boxContainer4.HorizontalExpand = true;
			control = boxContainer4;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer2.XamlChildren.Add(control);
			BoxContainer boxContainer5 = new BoxContainer();
			boxContainer5.Name = "ContainerMiddle";
			control = boxContainer5;
			context.RobustNameScope.Register("ContainerMiddle", control);
			boxContainer5.Orientation = 1;
			boxContainer5.HorizontalExpand = true;
			boxContainer5.SizeFlagsStretchRatio = 0.2f;
			control = boxContainer5;
			boxContainer2.XamlChildren.Add(control);
			BoxContainer boxContainer6 = new BoxContainer();
			boxContainer6.Orientation = 1;
			boxContainer6.HorizontalExpand = true;
			boxContainer6.SizeFlagsStretchRatio = 0.3f;
			RichTextLabel richTextLabel2 = new RichTextLabel();
			richTextLabel2.Name = "HeaderRight";
			control = richTextLabel2;
			context.RobustNameScope.Register("HeaderRight", control);
			control = richTextLabel2;
			boxContainer6.XamlChildren.Add(control);
			BoxContainer boxContainer7 = new BoxContainer();
			boxContainer7.Name = "ButtonContainerRight";
			control = boxContainer7;
			context.RobustNameScope.Register("ButtonContainerRight", control);
			boxContainer7.Orientation = 1;
			boxContainer7.VerticalExpand = true;
			boxContainer7.HorizontalExpand = true;
			control = boxContainer7;
			boxContainer6.XamlChildren.Add(control);
			control = boxContainer6;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer8 = new BoxContainer();
			boxContainer8.Orientation = 0;
			boxContainer8.HorizontalExpand = true;
			Button button = new Button();
			button.Name = "ButtonClear";
			control = button;
			context.RobustNameScope.Register("ButtonClear", control);
			button.Text = (string)new LocExtension("signal-port-selector-menu-clear").ProvideValue();
			control = button;
			boxContainer8.XamlChildren.Add(control);
			Button button2 = new Button();
			button2.Name = "ButtonLinkDefault";
			control = button2;
			context.RobustNameScope.Register("ButtonLinkDefault", control);
			button2.Text = (string)new LocExtension("signal-port-selector-menu-link-defaults").ProvideValue();
			control = button2;
			boxContainer8.XamlChildren.Add(control);
			control = boxContainer8;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06000F2A RID: 3882 RVA: 0x0005B254 File Offset: 0x00059454
		private static void !XamlIlPopulateTrampoline(SignalPortSelectorMenu A_0)
		{
			SignalPortSelectorMenu.Populate:Content.Client.MachineLinking.UI.SignalPortSelectorMenu.xaml(null, A_0);
		}

		// Token: 0x04000783 RID: 1923
		[Nullable(1)]
		private SignalPortSelectorBoundUserInterface _bui;

		// Token: 0x04000784 RID: 1924
		[Nullable(1)]
		private SignalPortSelectorMenu.LinksRender _links;

		// Token: 0x04000785 RID: 1925
		[Nullable(1)]
		private ButtonGroup _buttonGroup = new ButtonGroup();

		// Token: 0x04000786 RID: 1926
		[Nullable(1)]
		private IPrototypeManager _protoMan;

		// Token: 0x02000255 RID: 597
		[NullableContext(1)]
		[Nullable(0)]
		private sealed class LinksRender : Control
		{
			// Token: 0x06000F2B RID: 3883 RVA: 0x0005B25D File Offset: 0x0005945D
			public LinksRender(BoxContainer leftButton, BoxContainer rightButton)
			{
				this.LeftButton = leftButton;
				this.RightButton = rightButton;
			}

			// Token: 0x06000F2C RID: 3884 RVA: 0x0005B280 File Offset: 0x00059480
			protected override void Draw(DrawingHandleScreen handle)
			{
				int y = this.LeftButton.PixelPosition.Y;
				int y2 = this.RightButton.PixelPosition.Y;
				foreach (ValueTuple<int, int> valueTuple in this.Links)
				{
					int item = valueTuple.Item1;
					int item2 = valueTuple.Item2;
					Control child = this.LeftButton.GetChild(item);
					Control child2 = this.RightButton.GetChild(item2);
					int num = child.PixelPosition.Y + child.PixelHeight / 2 + y;
					int num2 = child2.PixelPosition.Y + child2.PixelHeight / 2 + y2;
					handle.DrawLine(new ValueTuple<float, float>(0f, (float)num), new ValueTuple<float, float>((float)base.PixelWidth, (float)num2), Color.Cyan);
				}
			}

			// Token: 0x04000787 RID: 1927
			[Nullable(new byte[]
			{
				1,
				0
			})]
			public List<ValueTuple<int, int>> Links = new List<ValueTuple<int, int>>();

			// Token: 0x04000788 RID: 1928
			public BoxContainer LeftButton;

			// Token: 0x04000789 RID: 1929
			public BoxContainer RightButton;
		}
	}
}
