using System;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.Computer;
using Content.Shared.Solar;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.Maths;

namespace Content.Client.Power
{
	// Token: 0x0200019B RID: 411
	[GenerateTypedNameReferences]
	public sealed class SolarControlWindow : DefaultWindow, IComputerWindow<SolarControlConsoleBoundInterfaceState>
	{
		// Token: 0x06000AE7 RID: 2791 RVA: 0x0003F637 File Offset: 0x0003D837
		public SolarControlWindow()
		{
			SolarControlWindow.!XamlIlPopulateTrampoline(this);
		}

		// Token: 0x06000AE8 RID: 2792 RVA: 0x0003F674 File Offset: 0x0003D874
		[NullableContext(1)]
		public void SetupComputerWindow(ComputerBoundUserInterfaceBase cb)
		{
			this.PanelRotation.OnTextEntered += delegate(LineEdit.LineEditEventArgs text)
			{
				double num;
				if (!double.TryParse(text.Text, out num))
				{
					return;
				}
				SolarControlConsoleAdjustMessage solarControlConsoleAdjustMessage = new SolarControlConsoleAdjustMessage
				{
					Rotation = Angle.FromDegrees(num),
					AngularVelocity = this._lastState.AngularVelocity
				};
				cb.SendMessage(solarControlConsoleAdjustMessage);
				this._lastState.Rotation = solarControlConsoleAdjustMessage.Rotation;
				this.NotARadar.UpdateState(this._lastState);
			};
			this.PanelVelocity.OnTextEntered += delegate(LineEdit.LineEditEventArgs text)
			{
				double num;
				if (!double.TryParse(text.Text, out num))
				{
					return;
				}
				SolarControlConsoleAdjustMessage solarControlConsoleAdjustMessage = new SolarControlConsoleAdjustMessage
				{
					Rotation = this.NotARadar.PredictedPanelRotation,
					AngularVelocity = Angle.FromDegrees(num / 60.0)
				};
				cb.SendMessage(solarControlConsoleAdjustMessage);
				this._lastState.Rotation = this.NotARadar.PredictedPanelRotation;
				this._lastState.AngularVelocity = solarControlConsoleAdjustMessage.AngularVelocity;
				this.NotARadar.UpdateState(this._lastState);
			};
		}

		// Token: 0x06000AE9 RID: 2793 RVA: 0x0003F6C4 File Offset: 0x0003D8C4
		[NullableContext(1)]
		private string FormatAngle(Angle d)
		{
			return d.Degrees.ToString("F1");
		}

		// Token: 0x06000AEA RID: 2794 RVA: 0x0003F6E5 File Offset: 0x0003D8E5
		[NullableContext(1)]
		private void UpdateField(LineEdit field, string newValue)
		{
			if (!field.HasKeyboardFocus())
			{
				field.Text = newValue;
			}
		}

		// Token: 0x06000AEB RID: 2795 RVA: 0x0003F6F8 File Offset: 0x0003D8F8
		[NullableContext(1)]
		public void UpdateState(SolarControlConsoleBoundInterfaceState scc)
		{
			this._lastState = scc;
			this.NotARadar.UpdateState(scc);
			this.OutputPower.Text = ((int)MathF.Floor(scc.OutputPower)).ToString();
			this.SunAngle.Text = this.FormatAngle(scc.TowardsSun);
			this.UpdateField(this.PanelRotation, this.FormatAngle(scc.Rotation));
			this.UpdateField(this.PanelVelocity, this.FormatAngle(scc.AngularVelocity * 60.0));
		}

		// Token: 0x17000215 RID: 533
		// (get) Token: 0x06000AEC RID: 2796 RVA: 0x0003F792 File Offset: 0x0003D992
		private Label OutputPower
		{
			get
			{
				return base.FindControl<Label>("OutputPower");
			}
		}

		// Token: 0x17000216 RID: 534
		// (get) Token: 0x06000AED RID: 2797 RVA: 0x0003F79F File Offset: 0x0003D99F
		private Label SunAngle
		{
			get
			{
				return base.FindControl<Label>("SunAngle");
			}
		}

		// Token: 0x17000217 RID: 535
		// (get) Token: 0x06000AEE RID: 2798 RVA: 0x0003F7AC File Offset: 0x0003D9AC
		private LineEdit PanelRotation
		{
			get
			{
				return base.FindControl<LineEdit>("PanelRotation");
			}
		}

		// Token: 0x17000218 RID: 536
		// (get) Token: 0x06000AEF RID: 2799 RVA: 0x0003F7B9 File Offset: 0x0003D9B9
		private LineEdit PanelVelocity
		{
			get
			{
				return base.FindControl<LineEdit>("PanelVelocity");
			}
		}

		// Token: 0x17000219 RID: 537
		// (get) Token: 0x06000AF0 RID: 2800 RVA: 0x0003F7C6 File Offset: 0x0003D9C6
		private SolarControlNotARadar NotARadar
		{
			get
			{
				return base.FindControl<SolarControlNotARadar>("NotARadar");
			}
		}

		// Token: 0x06000AF1 RID: 2801 RVA: 0x0003F7D4 File Offset: 0x0003D9D4
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.Power.SolarControlWindow.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Title = (string)new LocExtension("solar-control-window-title").ProvideValue();
			A_1.Resizable = false;
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 0;
			GridContainer gridContainer = new GridContainer();
			gridContainer.Columns = 2;
			Control control = new Label
			{
				Text = (string)new LocExtension("solar-control-window-output-power").ProvideValue()
			};
			gridContainer.XamlChildren.Add(control);
			control = new Label
			{
				Text = ""
			};
			gridContainer.XamlChildren.Add(control);
			Label label = new Label();
			label.Name = "OutputPower";
			control = label;
			context.RobustNameScope.Register("OutputPower", control);
			control = label;
			gridContainer.XamlChildren.Add(control);
			control = new Label
			{
				Text = (string)new LocExtension("solar-control-window-watts").ProvideValue()
			};
			gridContainer.XamlChildren.Add(control);
			control = new Label
			{
				Text = (string)new LocExtension("solar-control-window-sun-angle").ProvideValue()
			};
			gridContainer.XamlChildren.Add(control);
			control = new Label
			{
				Text = ""
			};
			gridContainer.XamlChildren.Add(control);
			Label label2 = new Label();
			label2.Name = "SunAngle";
			control = label2;
			context.RobustNameScope.Register("SunAngle", control);
			control = label2;
			gridContainer.XamlChildren.Add(control);
			control = new Label
			{
				Text = (string)new LocExtension("solar-control-window-degrees").ProvideValue()
			};
			gridContainer.XamlChildren.Add(control);
			control = new Label
			{
				Text = (string)new LocExtension("solar-control-window-panel-angle").ProvideValue()
			};
			gridContainer.XamlChildren.Add(control);
			control = new Label
			{
				Text = ""
			};
			gridContainer.XamlChildren.Add(control);
			LineEdit lineEdit = new LineEdit();
			lineEdit.Name = "PanelRotation";
			control = lineEdit;
			context.RobustNameScope.Register("PanelRotation", control);
			lineEdit.HorizontalExpand = true;
			control = lineEdit;
			gridContainer.XamlChildren.Add(control);
			control = new Label
			{
				Text = (string)new LocExtension("solar-control-window-degrees").ProvideValue()
			};
			gridContainer.XamlChildren.Add(control);
			control = new Label
			{
				Text = (string)new LocExtension("solar-control-window-panel-angular-velocity").ProvideValue()
			};
			gridContainer.XamlChildren.Add(control);
			control = new Label
			{
				Text = ""
			};
			gridContainer.XamlChildren.Add(control);
			LineEdit lineEdit2 = new LineEdit();
			lineEdit2.Name = "PanelVelocity";
			control = lineEdit2;
			context.RobustNameScope.Register("PanelVelocity", control);
			lineEdit2.HorizontalExpand = true;
			control = lineEdit2;
			gridContainer.XamlChildren.Add(control);
			control = new Label
			{
				Text = (string)new LocExtension("solar-control-window-degrees-per-minute").ProvideValue()
			};
			gridContainer.XamlChildren.Add(control);
			control = new Label
			{
				Text = (string)new LocExtension("solar-control-window-press-enter-to-confirm").ProvideValue()
			};
			gridContainer.XamlChildren.Add(control);
			control = new Label
			{
				Text = ""
			};
			gridContainer.XamlChildren.Add(control);
			control = gridContainer;
			boxContainer.XamlChildren.Add(control);
			SolarControlNotARadar solarControlNotARadar = new SolarControlNotARadar();
			solarControlNotARadar.Name = "NotARadar";
			control = solarControlNotARadar;
			context.RobustNameScope.Register("NotARadar", control);
			control = solarControlNotARadar;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06000AF2 RID: 2802 RVA: 0x0003FC8D File Offset: 0x0003DE8D
		private static void !XamlIlPopulateTrampoline(SolarControlWindow A_0)
		{
			SolarControlWindow.Populate:Content.Client.Power.SolarControlWindow.xaml(null, A_0);
		}

		// Token: 0x04000549 RID: 1353
		[Nullable(1)]
		private SolarControlConsoleBoundInterfaceState _lastState = new SolarControlConsoleBoundInterfaceState(0f, 0f, 0f, 0f);
	}
}
