using System;
using System.Linq;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.Computer;
using Content.Client.IoC;
using Content.Shared.Power;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;
using Robust.Shared.Prototypes;

namespace Content.Client.Power
{
	// Token: 0x02000198 RID: 408
	[GenerateTypedNameReferences]
	public sealed class PowerMonitoringWindow : DefaultWindow, IComputerWindow<PowerMonitoringConsoleBoundInterfaceState>
	{
		// Token: 0x06000AD8 RID: 2776 RVA: 0x0003F02C File Offset: 0x0003D22C
		public PowerMonitoringWindow()
		{
			PowerMonitoringWindow.!XamlIlPopulateTrampoline(this);
			base.SetSize = new ValueTuple<float, float>(500f, 450f);
			base.MinSize = new ValueTuple<float, float>(300f, 450f);
			IoCManager.InjectDependencies<PowerMonitoringWindow>(this);
			this.MasterTabContainer.SetTabTitle(0, Loc.GetString("power-monitoring-window-tab-sources"));
			this.MasterTabContainer.SetTabTitle(1, Loc.GetString("power-monitoring-window-tab-loads"));
		}

		// Token: 0x06000AD9 RID: 2777 RVA: 0x0003F0AC File Offset: 0x0003D2AC
		[NullableContext(1)]
		public void UpdateState(PowerMonitoringConsoleBoundInterfaceState scc)
		{
			this.UpdateList(this.TotalSourcesNum, scc.TotalSources, this.SourcesList, scc.Sources);
			PowerMonitoringConsoleEntry[] array = scc.Loads;
			if (!this.ShowInactiveConsumersCheckBox.Pressed)
			{
				array = (from a in array
				where a.IsBattery || a.Size > 0.0
				select a).ToArray<PowerMonitoringConsoleEntry>();
			}
			this.UpdateList(this.TotalLoadsNum, scc.TotalLoads, this.LoadsList, array);
		}

		// Token: 0x06000ADA RID: 2778 RVA: 0x0003F130 File Offset: 0x0003D330
		[NullableContext(1)]
		public void UpdateList(Label number, double numberVal, ItemList list, PowerMonitoringConsoleEntry[] listVal)
		{
			number.Text = Loc.GetString("power-monitoring-window-value", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("value", numberVal)
			});
			while (list.Count > listVal.Length)
			{
				list.RemoveAt(list.Count - 1);
			}
			while (list.Count < listVal.Length)
			{
				list.AddItem("YOU SHOULD NEVER SEE THIS (REALLY!)", null, false);
			}
			for (int i = 0; i < listVal.Length; i++)
			{
				PowerMonitoringConsoleEntry powerMonitoringConsoleEntry = listVal[i];
				EntityPrototype entityPrototype;
				this._prototypeManager.TryIndex<EntityPrototype>(powerMonitoringConsoleEntry.IconEntityPrototypeId, ref entityPrototype);
				IRsiStateLike rsiStateLike = null;
				if (entityPrototype != null)
				{
					rsiStateLike = SpriteComponent.GetPrototypeIcon(entityPrototype, StaticIoC.ResC);
				}
				Texture icon = (rsiStateLike != null) ? rsiStateLike.GetFrame(0, 0) : null;
				ItemList.Item item = list.get_IndexItem(i);
				item.Text = powerMonitoringConsoleEntry.NameLocalized + " " + Loc.GetString("power-monitoring-window-value", new ValueTuple<string, object>[]
				{
					new ValueTuple<string, object>("value", powerMonitoringConsoleEntry.Size)
				});
				item.Icon = icon;
			}
		}

		// Token: 0x1700020F RID: 527
		// (get) Token: 0x06000ADB RID: 2779 RVA: 0x0003F246 File Offset: 0x0003D446
		private Label TotalSourcesNum
		{
			get
			{
				return base.FindControl<Label>("TotalSourcesNum");
			}
		}

		// Token: 0x17000210 RID: 528
		// (get) Token: 0x06000ADC RID: 2780 RVA: 0x0003F253 File Offset: 0x0003D453
		private Label TotalLoadsNum
		{
			get
			{
				return base.FindControl<Label>("TotalLoadsNum");
			}
		}

		// Token: 0x17000211 RID: 529
		// (get) Token: 0x06000ADD RID: 2781 RVA: 0x0003F260 File Offset: 0x0003D460
		private TabContainer MasterTabContainer
		{
			get
			{
				return base.FindControl<TabContainer>("MasterTabContainer");
			}
		}

		// Token: 0x17000212 RID: 530
		// (get) Token: 0x06000ADE RID: 2782 RVA: 0x0003F26D File Offset: 0x0003D46D
		private ItemList SourcesList
		{
			get
			{
				return base.FindControl<ItemList>("SourcesList");
			}
		}

		// Token: 0x17000213 RID: 531
		// (get) Token: 0x06000ADF RID: 2783 RVA: 0x0003F27A File Offset: 0x0003D47A
		private CheckBox ShowInactiveConsumersCheckBox
		{
			get
			{
				return base.FindControl<CheckBox>("ShowInactiveConsumersCheckBox");
			}
		}

		// Token: 0x17000214 RID: 532
		// (get) Token: 0x06000AE0 RID: 2784 RVA: 0x0003F287 File Offset: 0x0003D487
		private ItemList LoadsList
		{
			get
			{
				return base.FindControl<ItemList>("LoadsList");
			}
		}

		// Token: 0x06000AE1 RID: 2785 RVA: 0x0003F294 File Offset: 0x0003D494
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.Power.PowerMonitoringWindow.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Title = (string)new LocExtension("power-monitoring-window-title").ProvideValue();
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			boxContainer.VerticalExpand = true;
			GridContainer gridContainer = new GridContainer();
			gridContainer.Columns = 2;
			Control control = new Label
			{
				Text = (string)new LocExtension("power-monitoring-window-total-sources").ProvideValue()
			};
			gridContainer.XamlChildren.Add(control);
			Label label = new Label();
			label.Name = "TotalSourcesNum";
			control = label;
			context.RobustNameScope.Register("TotalSourcesNum", control);
			label.Text = "?";
			control = label;
			gridContainer.XamlChildren.Add(control);
			control = new Label
			{
				Text = (string)new LocExtension("power-monitoring-window-total-loads").ProvideValue()
			};
			gridContainer.XamlChildren.Add(control);
			Label label2 = new Label();
			label2.Name = "TotalLoadsNum";
			control = label2;
			context.RobustNameScope.Register("TotalLoadsNum", control);
			label2.Text = "?";
			control = label2;
			gridContainer.XamlChildren.Add(control);
			control = gridContainer;
			boxContainer.XamlChildren.Add(control);
			TabContainer tabContainer = new TabContainer();
			tabContainer.Name = "MasterTabContainer";
			control = tabContainer;
			context.RobustNameScope.Register("MasterTabContainer", control);
			tabContainer.VerticalExpand = true;
			ItemList itemList = new ItemList();
			itemList.Name = "SourcesList";
			control = itemList;
			context.RobustNameScope.Register("SourcesList", control);
			itemList.VerticalExpand = true;
			control = itemList;
			tabContainer.XamlChildren.Add(control);
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 1;
			boxContainer2.VerticalExpand = true;
			CheckBox checkBox = new CheckBox();
			checkBox.Margin = new Thickness(8f, 8f, 8f, 8f);
			checkBox.Name = "ShowInactiveConsumersCheckBox";
			control = checkBox;
			context.RobustNameScope.Register("ShowInactiveConsumersCheckBox", control);
			checkBox.Text = (string)new LocExtension("power-monitoring-window-show-inactive-consumers").ProvideValue();
			control = checkBox;
			boxContainer2.XamlChildren.Add(control);
			ItemList itemList2 = new ItemList();
			itemList2.Name = "LoadsList";
			control = itemList2;
			context.RobustNameScope.Register("LoadsList", control);
			itemList2.VerticalExpand = true;
			control = itemList2;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			tabContainer.XamlChildren.Add(control);
			control = tabContainer;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06000AE2 RID: 2786 RVA: 0x0003F5FB File Offset: 0x0003D7FB
		private static void !XamlIlPopulateTrampoline(PowerMonitoringWindow A_0)
		{
			PowerMonitoringWindow.Populate:Content.Client.Power.PowerMonitoringWindow.xaml(null, A_0);
		}

		// Token: 0x04000546 RID: 1350
		[Nullable(1)]
		[Dependency]
		private readonly IPrototypeManager _prototypeManager;
	}
}
