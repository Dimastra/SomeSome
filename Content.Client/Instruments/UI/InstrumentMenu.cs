using System;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Shared.ActionBlocker;
using Content.Shared.Interaction;
using Content.Shared.Physics;
using Robust.Client.Audio.Midi;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.Containers;
using Robust.Shared.GameObjects;
using Robust.Shared.Input;
using Robust.Shared.IoC;
using Robust.Shared.Maths;
using Robust.Shared.Timing;

namespace Content.Client.Instruments.UI
{
	// Token: 0x020002B1 RID: 689
	[GenerateTypedNameReferences]
	public sealed class InstrumentMenu : DefaultWindow
	{
		// Token: 0x06001173 RID: 4467 RVA: 0x0006739C File Offset: 0x0006559C
		[NullableContext(1)]
		public InstrumentMenu(InstrumentBoundUserInterface owner)
		{
			InstrumentMenu.!XamlIlPopulateTrampoline(this);
			IoCManager.InjectDependencies<InstrumentMenu>(this);
			this._owner = owner;
			if (this._owner.Instrument != null)
			{
				this._owner.Instrument.OnMidiPlaybackEnded += this.InstrumentOnMidiPlaybackEnded;
				base.Title = IoCManager.Resolve<IEntityManager>().GetComponent<MetaDataComponent>(this._owner.Instrument.Owner).EntityName;
				this.LoopButton.Disabled = !this._owner.Instrument.IsMidiOpen;
				this.LoopButton.Pressed = this._owner.Instrument.LoopMidi;
				this.StopButton.Disabled = !this._owner.Instrument.IsMidiOpen;
				this.PlaybackSlider.MouseFilter = (this._owner.Instrument.IsMidiOpen ? 1 : 2);
			}
			if (!this._midiManager.IsAvailable)
			{
				this.UnavailableOverlay.Visible = true;
				return;
			}
			this.InputButton.OnToggled += this.MidiInputButtonOnOnToggled;
			this.FileButton.OnPressed += this.MidiFileButtonOnOnPressed;
			this.LoopButton.OnToggled += this.MidiLoopButtonOnOnToggled;
			this.StopButton.OnPressed += this.MidiStopButtonOnPressed;
			this.PlaybackSlider.OnValueChanged += this.PlaybackSliderSeek;
			this.PlaybackSlider.OnKeyBindUp += this.PlaybackSliderKeyUp;
			base.MinSize = (base.SetSize = new ValueTuple<float, float>(400f, 150f));
		}

		// Token: 0x06001174 RID: 4468 RVA: 0x00067553 File Offset: 0x00065753
		private void InstrumentOnMidiPlaybackEnded()
		{
			this.MidiPlaybackSetButtonsDisabled(true);
		}

		// Token: 0x06001175 RID: 4469 RVA: 0x0006755C File Offset: 0x0006575C
		public void MidiPlaybackSetButtonsDisabled(bool disabled)
		{
			this.LoopButton.Disabled = disabled;
			this.StopButton.Disabled = disabled;
			this.PlaybackSlider.MouseFilter = ((!disabled) ? 1 : 2);
		}

		// Token: 0x06001176 RID: 4470 RVA: 0x00067588 File Offset: 0x00065788
		[NullableContext(1)]
		private void MidiFileButtonOnOnPressed(BaseButton.ButtonEventArgs obj)
		{
			InstrumentMenu.<MidiFileButtonOnOnPressed>d__6 <MidiFileButtonOnOnPressed>d__;
			<MidiFileButtonOnOnPressed>d__.<>t__builder = AsyncVoidMethodBuilder.Create();
			<MidiFileButtonOnOnPressed>d__.<>4__this = this;
			<MidiFileButtonOnOnPressed>d__.<>1__state = -1;
			<MidiFileButtonOnOnPressed>d__.<>t__builder.Start<InstrumentMenu.<MidiFileButtonOnOnPressed>d__6>(ref <MidiFileButtonOnOnPressed>d__);
		}

		// Token: 0x06001177 RID: 4471 RVA: 0x000675C0 File Offset: 0x000657C0
		[NullableContext(1)]
		private void MidiInputButtonOnOnToggled(BaseButton.ButtonToggledEventArgs obj)
		{
			InstrumentSystem instrumentSystem = EntitySystem.Get<InstrumentSystem>();
			if (obj.Pressed)
			{
				if (!this.PlayCheck())
				{
					return;
				}
				this.MidiStopButtonOnPressed(null);
				InstrumentComponent instrument = this._owner.Instrument;
				if (instrument != null)
				{
					instrumentSystem.OpenInput(instrument.Owner, instrument);
					return;
				}
			}
			else
			{
				InstrumentComponent instrument2 = this._owner.Instrument;
				if (instrument2 != null)
				{
					instrumentSystem.CloseInput(instrument2.Owner, false, instrument2);
				}
			}
		}

		// Token: 0x06001178 RID: 4472 RVA: 0x00067628 File Offset: 0x00065828
		private bool PlayCheck()
		{
			InstrumentComponent instrument = this._owner.Instrument;
			EntityUid? entityUid = (instrument != null) ? new EntityUid?(instrument.Owner) : null;
			InstrumentComponent instrument2 = this._owner.Instrument;
			if (entityUid == null || instrument2 == null)
			{
				return false;
			}
			LocalPlayer localPlayer = IoCManager.Resolve<IPlayerManager>().LocalPlayer;
			if (localPlayer == null || localPlayer.ControlledEntity == null)
			{
				return false;
			}
			if (localPlayer.ControlledEntity == entityUid)
			{
				return true;
			}
			IContainerManager containerManager;
			ContainerHelpers.TryGetContainerMan(entityUid.Value, ref containerManager, null);
			if (instrument2.Handheld && (containerManager == null || containerManager.Owner != localPlayer.ControlledEntity))
			{
				return false;
			}
			IEntitySystemManager entitySystemManager = IoCManager.Resolve<IEntitySystemManager>();
			return entitySystemManager.GetEntitySystem<ActionBlockerSystem>().CanInteract(localPlayer.ControlledEntity.Value, entityUid) && entitySystemManager.GetEntitySystem<SharedInteractionSystem>().InRangeUnobstructed(localPlayer.ControlledEntity.Value, entityUid.Value, 1.5f, CollisionGroup.Impassable | CollisionGroup.InteractImpassable, null, false);
		}

		// Token: 0x06001179 RID: 4473 RVA: 0x0006777C File Offset: 0x0006597C
		[NullableContext(2)]
		private void MidiStopButtonOnPressed(BaseButton.ButtonEventArgs obj)
		{
			this.MidiPlaybackSetButtonsDisabled(true);
			InstrumentComponent instrument = this._owner.Instrument;
			if (instrument == null)
			{
				return;
			}
			EntitySystem.Get<InstrumentSystem>().CloseMidi(instrument.Owner, false, instrument);
		}

		// Token: 0x0600117A RID: 4474 RVA: 0x000677B3 File Offset: 0x000659B3
		[NullableContext(1)]
		private void MidiLoopButtonOnOnToggled(BaseButton.ButtonToggledEventArgs obj)
		{
			if (this._owner.Instrument == null)
			{
				return;
			}
			this._owner.Instrument.LoopMidi = obj.Pressed;
			this._owner.Instrument.DirtyRenderer = true;
		}

		// Token: 0x0600117B RID: 4475 RVA: 0x000677EC File Offset: 0x000659EC
		[NullableContext(1)]
		private void PlaybackSliderSeek(Range _)
		{
			if (!this.PlaybackSlider.Grabbed)
			{
				InstrumentComponent instrument = this._owner.Instrument;
				if (instrument != null)
				{
					EntitySystem.Get<InstrumentSystem>().SetPlayerTick(instrument.Owner, (int)Math.Ceiling((double)this.PlaybackSlider.Value), instrument);
					return;
				}
			}
		}

		// Token: 0x0600117C RID: 4476 RVA: 0x0006783C File Offset: 0x00065A3C
		[NullableContext(1)]
		private void PlaybackSliderKeyUp(GUIBoundKeyEventArgs args)
		{
			if (!(args.Function != EngineKeyFunctions.UIClick))
			{
				InstrumentComponent instrument = this._owner.Instrument;
				if (instrument != null)
				{
					EntitySystem.Get<InstrumentSystem>().SetPlayerTick(instrument.Owner, (int)Math.Ceiling((double)this.PlaybackSlider.Value), instrument);
					return;
				}
			}
		}

		// Token: 0x0600117D RID: 4477 RVA: 0x00067890 File Offset: 0x00065A90
		protected override void FrameUpdate(FrameEventArgs args)
		{
			base.FrameUpdate(args);
			if (this._owner.Instrument == null)
			{
				return;
			}
			if (!this._owner.Instrument.IsMidiOpen)
			{
				this.PlaybackSlider.MaxValue = 1f;
				this.PlaybackSlider.SetValueWithoutEvent(0f);
				return;
			}
			if (this.PlaybackSlider.Grabbed)
			{
				return;
			}
			this.PlaybackSlider.MaxValue = (float)this._owner.Instrument.PlayerTotalTick;
			this.PlaybackSlider.SetValueWithoutEvent((float)this._owner.Instrument.PlayerTick);
		}

		// Token: 0x170003BE RID: 958
		// (get) Token: 0x0600117E RID: 4478 RVA: 0x0006792B File Offset: 0x00065B2B
		private Button InputButton
		{
			get
			{
				return base.FindControl<Button>("InputButton");
			}
		}

		// Token: 0x170003BF RID: 959
		// (get) Token: 0x0600117F RID: 4479 RVA: 0x00067938 File Offset: 0x00065B38
		private Button FileButton
		{
			get
			{
				return base.FindControl<Button>("FileButton");
			}
		}

		// Token: 0x170003C0 RID: 960
		// (get) Token: 0x06001180 RID: 4480 RVA: 0x00067945 File Offset: 0x00065B45
		private Button LoopButton
		{
			get
			{
				return base.FindControl<Button>("LoopButton");
			}
		}

		// Token: 0x170003C1 RID: 961
		// (get) Token: 0x06001181 RID: 4481 RVA: 0x00067952 File Offset: 0x00065B52
		private Button StopButton
		{
			get
			{
				return base.FindControl<Button>("StopButton");
			}
		}

		// Token: 0x170003C2 RID: 962
		// (get) Token: 0x06001182 RID: 4482 RVA: 0x0006795F File Offset: 0x00065B5F
		private Slider PlaybackSlider
		{
			get
			{
				return base.FindControl<Slider>("PlaybackSlider");
			}
		}

		// Token: 0x170003C3 RID: 963
		// (get) Token: 0x06001183 RID: 4483 RVA: 0x0006796C File Offset: 0x00065B6C
		private PanelContainer UnavailableOverlay
		{
			get
			{
				return base.FindControl<PanelContainer>("UnavailableOverlay");
			}
		}

		// Token: 0x06001184 RID: 4484 RVA: 0x0006797C File Offset: 0x00065B7C
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.Instruments.UI.InstrumentMenu.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			boxContainer.SeparationOverride = new int?(5);
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 0;
			boxContainer2.VerticalExpand = true;
			Button button = new Button();
			button.Name = "InputButton";
			Control control = button;
			context.RobustNameScope.Register("InputButton", control);
			button.ToggleMode = true;
			button.Text = (string)new LocExtension("instruments-component-menu-input-button").ProvideValue();
			button.TextAlign = 1;
			button.HorizontalExpand = true;
			button.SizeFlagsStretchRatio = 1f;
			control = button;
			boxContainer2.XamlChildren.Add(control);
			control = new Control
			{
				HorizontalExpand = true,
				SizeFlagsStretchRatio = 2f
			};
			boxContainer2.XamlChildren.Add(control);
			Button button2 = new Button();
			button2.Name = "FileButton";
			control = button2;
			context.RobustNameScope.Register("FileButton", control);
			button2.Text = (string)new LocExtension("instruments-component-menu-play-button").ProvideValue();
			button2.TextAlign = 1;
			button2.HorizontalExpand = true;
			button2.SizeFlagsStretchRatio = 1f;
			control = button2;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 0;
			boxContainer3.VerticalExpand = true;
			Button button3 = new Button();
			button3.Name = "LoopButton";
			control = button3;
			context.RobustNameScope.Register("LoopButton", control);
			button3.ToggleMode = true;
			button3.Text = (string)new LocExtension("instruments-component-menu-loop-button").ProvideValue();
			button3.TextAlign = 1;
			button3.HorizontalExpand = true;
			button3.SizeFlagsStretchRatio = 1f;
			control = button3;
			boxContainer3.XamlChildren.Add(control);
			control = new Control
			{
				HorizontalExpand = true,
				SizeFlagsStretchRatio = 2f
			};
			boxContainer3.XamlChildren.Add(control);
			Button button4 = new Button();
			button4.Name = "StopButton";
			control = button4;
			context.RobustNameScope.Register("StopButton", control);
			button4.Text = (string)new LocExtension("instruments-component-menu-stop-button").ProvideValue();
			button4.TextAlign = 1;
			button4.HorizontalExpand = true;
			button4.SizeFlagsStretchRatio = 1f;
			control = button4;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer4 = new BoxContainer();
			boxContainer4.Orientation = 0;
			boxContainer4.VerticalExpand = true;
			control = new Control
			{
				HorizontalExpand = true,
				SizeFlagsStretchRatio = 0.125f
			};
			boxContainer4.XamlChildren.Add(control);
			Slider slider = new Slider();
			slider.Name = "PlaybackSlider";
			control = slider;
			context.RobustNameScope.Register("PlaybackSlider", control);
			slider.HorizontalExpand = true;
			control = slider;
			boxContainer4.XamlChildren.Add(control);
			control = new Control
			{
				HorizontalExpand = true,
				SizeFlagsStretchRatio = 0.125f
			};
			boxContainer4.XamlChildren.Add(control);
			control = boxContainer4;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			PanelContainer panelContainer = new PanelContainer();
			panelContainer.Name = "UnavailableOverlay";
			control = panelContainer;
			context.RobustNameScope.Register("UnavailableOverlay", control);
			panelContainer.Visible = false;
			panelContainer.MouseFilter = 0;
			panelContainer.PanelOverride = new StyleBoxFlat
			{
				BackgroundColor = Color.FromXaml("#000000E5")
			};
			Label label = new Label();
			label.VerticalAlignment = 2;
			label.HorizontalAlignment = 2;
			label.Align = 1;
			string item = "LabelBig";
			label.StyleClasses.Add(item);
			label.Text = (string)new LocExtension("instruments-component-menu-no-midi-support").ProvideValue();
			control = label;
			panelContainer.XamlChildren.Add(control);
			control = panelContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06001185 RID: 4485 RVA: 0x00067E96 File Offset: 0x00066096
		private static void !XamlIlPopulateTrampoline(InstrumentMenu A_0)
		{
			InstrumentMenu.Populate:Content.Client.Instruments.UI.InstrumentMenu.xaml(null, A_0);
		}

		// Token: 0x04000891 RID: 2193
		[Nullable(1)]
		[Dependency]
		private readonly IMidiManager _midiManager;

		// Token: 0x04000892 RID: 2194
		[Nullable(1)]
		[Dependency]
		private readonly IFileDialogManager _fileDialogManager;

		// Token: 0x04000893 RID: 2195
		[Nullable(1)]
		private readonly InstrumentBoundUserInterface _owner;
	}
}
