using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Shared.Chemistry.Components;
using Content.Shared.Chemistry.Reagent;
using Content.Shared.FixedPoint;
using Content.Shared.Kitchen;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.GameObjects;
using Robust.Shared.Localization;
using Robust.Shared.Maths;
using Robust.Shared.Prototypes;

namespace Content.Client.Kitchen.UI
{
	// Token: 0x02000291 RID: 657
	[GenerateTypedNameReferences]
	public sealed class GrinderMenu : DefaultWindow
	{
		// Token: 0x060010A5 RID: 4261 RVA: 0x000638BC File Offset: 0x00061ABC
		[NullableContext(1)]
		public GrinderMenu(ReagentGrinderBoundUserInterface owner, IEntityManager entityManager, IPrototypeManager prototypeManager)
		{
			GrinderMenu.!XamlIlPopulateTrampoline(this);
			this._entityManager = entityManager;
			this._prototypeManager = prototypeManager;
			this._owner = owner;
			this.GrindButton.OnPressed += owner.StartGrinding;
			this.JuiceButton.OnPressed += owner.StartJuicing;
			this.ChamberContentBox.EjectButton.OnPressed += owner.EjectAll;
			this.BeakerContentBox.EjectButton.OnPressed += owner.EjectBeaker;
			this.ChamberContentBox.BoxContents.OnItemSelected += this.OnChamberBoxContentsItemSelected;
			this.BeakerContentBox.BoxContents.SelectMode = 0;
		}

		// Token: 0x060010A6 RID: 4262 RVA: 0x00063988 File Offset: 0x00061B88
		[NullableContext(1)]
		private void OnChamberBoxContentsItemSelected(ItemList.ItemListSelectedEventArgs args)
		{
			this._owner.EjectChamberContent(this._chamberVisualContents[args.ItemIndex]);
		}

		// Token: 0x060010A7 RID: 4263 RVA: 0x000639A8 File Offset: 0x00061BA8
		protected override void Dispose(bool disposing)
		{
			base.Dispose(disposing);
			this._chamberVisualContents.Clear();
			this.GrindButton.OnPressed -= this._owner.StartGrinding;
			this.JuiceButton.OnPressed -= this._owner.StartJuicing;
			this.ChamberContentBox.EjectButton.OnPressed -= this._owner.EjectAll;
			this.BeakerContentBox.EjectButton.OnPressed -= this._owner.EjectBeaker;
			this.ChamberContentBox.BoxContents.OnItemSelected -= this.OnChamberBoxContentsItemSelected;
		}

		// Token: 0x060010A8 RID: 4264 RVA: 0x00063A60 File Offset: 0x00061C60
		[NullableContext(1)]
		public void UpdateState(ReagentGrinderInterfaceState state)
		{
			this.BeakerContentBox.EjectButton.Disabled = !state.HasBeakerIn;
			this.ChamberContentBox.EjectButton.Disabled = (state.ChamberContents.Length == 0);
			this.GrindButton.Disabled = (!state.CanGrind || !state.Powered);
			this.JuiceButton.Disabled = (!state.CanJuice || !state.Powered);
			this.RefreshContentsDisplay(state.ReagentQuantities, state.ChamberContents, state.HasBeakerIn);
		}

		// Token: 0x060010A9 RID: 4265 RVA: 0x00063AF8 File Offset: 0x00061CF8
		[NullableContext(1)]
		public void HandleMessage(BoundUserInterfaceMessage message)
		{
			ReagentGrinderWorkStartedMessage reagentGrinderWorkStartedMessage = message as ReagentGrinderWorkStartedMessage;
			if (reagentGrinderWorkStartedMessage != null)
			{
				this.GrindButton.Disabled = true;
				this.GrindButton.Modulate = ((reagentGrinderWorkStartedMessage.GrinderProgram == GrinderProgram.Grind) ? Color.Green : Color.White);
				this.JuiceButton.Disabled = true;
				this.JuiceButton.Modulate = ((reagentGrinderWorkStartedMessage.GrinderProgram == GrinderProgram.Juice) ? Color.Green : Color.White);
				this.BeakerContentBox.EjectButton.Disabled = true;
				this.ChamberContentBox.EjectButton.Disabled = true;
				return;
			}
			if (!(message is ReagentGrinderWorkCompleteMessage))
			{
				return;
			}
			this.GrindButton.Disabled = false;
			this.JuiceButton.Disabled = false;
			this.GrindButton.Modulate = Color.White;
			this.JuiceButton.Modulate = Color.White;
			this.BeakerContentBox.EjectButton.Disabled = false;
			this.ChamberContentBox.EjectButton.Disabled = false;
		}

		// Token: 0x060010AA RID: 4266 RVA: 0x00063BEC File Offset: 0x00061DEC
		[NullableContext(1)]
		private void RefreshContentsDisplay([Nullable(2)] IList<Solution.ReagentQuantity> reagents, IReadOnlyList<EntityUid> containedSolids, bool isBeakerAttached)
		{
			this._chamberVisualContents.Clear();
			this.ChamberContentBox.BoxContents.Clear();
			foreach (EntityUid entityUid in containedSolids)
			{
				if (!this._entityManager.EntityExists(entityUid))
				{
					return;
				}
				IRsiStateLike icon = this._entityManager.GetComponent<SpriteComponent>(entityUid).Icon;
				Texture texture = (icon != null) ? icon.Default : null;
				ItemList.Item item = this.ChamberContentBox.BoxContents.AddItem(this._entityManager.GetComponent<MetaDataComponent>(entityUid).EntityName, texture, true);
				int key = this.ChamberContentBox.BoxContents.IndexOf(item);
				this._chamberVisualContents.Add(key, entityUid);
			}
			this.BeakerContentBox.BoxContents.Clear();
			if (!isBeakerAttached || reagents == null)
			{
				return;
			}
			if (reagents.Count <= 0)
			{
				this.BeakerContentBox.BoxContents.AddItem(Loc.GetString("grinder-menu-beaker-content-box-is-empty"), null, true);
				return;
			}
			foreach (Solution.ReagentQuantity reagentQuantity in reagents)
			{
				ReagentPrototype reagentPrototype;
				string text;
				if (!this._prototypeManager.TryIndex<ReagentPrototype>(reagentQuantity.ReagentId, ref reagentPrototype))
				{
					text = "???";
				}
				else
				{
					DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(1, 2);
					defaultInterpolatedStringHandler.AppendFormatted<FixedPoint2>(reagentQuantity.Quantity);
					defaultInterpolatedStringHandler.AppendLiteral(" ");
					defaultInterpolatedStringHandler.AppendFormatted(reagentPrototype.LocalizedName);
					text = Loc.GetString(defaultInterpolatedStringHandler.ToStringAndClear());
				}
				string text2 = text;
				this.BeakerContentBox.BoxContents.AddItem(text2, null, true);
			}
		}

		// Token: 0x17000395 RID: 917
		// (get) Token: 0x060010AB RID: 4267 RVA: 0x00063DAC File Offset: 0x00061FAC
		private Button GrindButton
		{
			get
			{
				return base.FindControl<Button>("GrindButton");
			}
		}

		// Token: 0x17000396 RID: 918
		// (get) Token: 0x060010AC RID: 4268 RVA: 0x00063DB9 File Offset: 0x00061FB9
		private Button JuiceButton
		{
			get
			{
				return base.FindControl<Button>("JuiceButton");
			}
		}

		// Token: 0x17000397 RID: 919
		// (get) Token: 0x060010AD RID: 4269 RVA: 0x00063DC6 File Offset: 0x00061FC6
		private LabelledContentBox ChamberContentBox
		{
			get
			{
				return base.FindControl<LabelledContentBox>("ChamberContentBox");
			}
		}

		// Token: 0x17000398 RID: 920
		// (get) Token: 0x060010AE RID: 4270 RVA: 0x00063DD3 File Offset: 0x00061FD3
		private LabelledContentBox BeakerContentBox
		{
			get
			{
				return base.FindControl<LabelledContentBox>("BeakerContentBox");
			}
		}

		// Token: 0x060010AF RID: 4271 RVA: 0x00063DE0 File Offset: 0x00061FE0
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.Kitchen.UI.GrinderMenu.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Title = (string)new LocExtension("grinder-menu-title").ProvideValue();
			A_1.MinSize = new Vector2(512f, 256f);
			A_1.SetSize = new Vector2(512f, 256f);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 0;
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 1;
			boxContainer2.VerticalAlignment = 2;
			Button button = new Button();
			button.Name = "GrindButton";
			Control control = button;
			context.RobustNameScope.Register("GrindButton", control);
			button.Text = (string)new LocExtension("grinder-menu-grind-button").ProvideValue();
			button.TextAlign = 1;
			button.MinSize = new Vector2(64f, 64f);
			control = button;
			boxContainer2.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(0f, 16f)
			};
			boxContainer2.XamlChildren.Add(control);
			Button button2 = new Button();
			button2.Name = "JuiceButton";
			control = button2;
			context.RobustNameScope.Register("JuiceButton", control);
			button2.Text = (string)new LocExtension("grinder-menu-juice-button").ProvideValue();
			button2.TextAlign = 1;
			button2.MinSize = new Vector2(64f, 64f);
			control = button2;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(16f, 0f)
			};
			boxContainer.XamlChildren.Add(control);
			LabelledContentBox labelledContentBox = new LabelledContentBox();
			labelledContentBox.Name = "ChamberContentBox";
			control = labelledContentBox;
			context.RobustNameScope.Register("ChamberContentBox", control);
			labelledContentBox.LabelText = (string)new LocExtension("grinder-menu-chamber-content-box-label").ProvideValue();
			labelledContentBox.ButtonText = (string)new LocExtension("grinder-menu-chamber-content-box-button").ProvideValue();
			labelledContentBox.VerticalExpand = true;
			labelledContentBox.HorizontalExpand = true;
			labelledContentBox.SizeFlagsStretchRatio = 2f;
			control = labelledContentBox;
			boxContainer.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(8f, 0f)
			};
			boxContainer.XamlChildren.Add(control);
			LabelledContentBox labelledContentBox2 = new LabelledContentBox();
			labelledContentBox2.Name = "BeakerContentBox";
			control = labelledContentBox2;
			context.RobustNameScope.Register("BeakerContentBox", control);
			labelledContentBox2.LabelText = (string)new LocExtension("grinder-menu-beaker-content-box-label").ProvideValue();
			labelledContentBox2.ButtonText = (string)new LocExtension("grinder-menu-beaker-content-box-button").ProvideValue();
			labelledContentBox2.VerticalExpand = true;
			labelledContentBox2.HorizontalExpand = true;
			labelledContentBox2.SizeFlagsStretchRatio = 2f;
			control = labelledContentBox2;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x060010B0 RID: 4272 RVA: 0x0006419C File Offset: 0x0006239C
		private static void !XamlIlPopulateTrampoline(GrinderMenu A_0)
		{
			GrinderMenu.Populate:Content.Client.Kitchen.UI.GrinderMenu.xaml(null, A_0);
		}

		// Token: 0x04000839 RID: 2105
		[Nullable(1)]
		private readonly IEntityManager _entityManager;

		// Token: 0x0400083A RID: 2106
		[Nullable(1)]
		private readonly IPrototypeManager _prototypeManager;

		// Token: 0x0400083B RID: 2107
		[Nullable(1)]
		private readonly ReagentGrinderBoundUserInterface _owner;

		// Token: 0x0400083C RID: 2108
		[Nullable(1)]
		private readonly Dictionary<int, EntityUid> _chamberVisualContents = new Dictionary<int, EntityUid>();
	}
}
