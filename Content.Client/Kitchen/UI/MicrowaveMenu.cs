using System;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.Localization;
using Robust.Shared.Maths;

namespace Content.Client.Kitchen.UI
{
	// Token: 0x02000294 RID: 660
	[GenerateTypedNameReferences]
	public sealed class MicrowaveMenu : DefaultWindow
	{
		// Token: 0x14000061 RID: 97
		// (add) Token: 0x060010C4 RID: 4292 RVA: 0x000646F0 File Offset: 0x000628F0
		// (remove) Token: 0x060010C5 RID: 4293 RVA: 0x00064728 File Offset: 0x00062928
		[Nullable(new byte[]
		{
			2,
			1
		})]
		[Nullable(new byte[]
		{
			2,
			1
		})]
		public event Action<BaseButton.ButtonEventArgs, int> OnCookTimeSelected;

		// Token: 0x1700039E RID: 926
		// (get) Token: 0x060010C6 RID: 4294 RVA: 0x0006475D File Offset: 0x0006295D
		[Nullable(1)]
		private ButtonGroup CookTimeButtonGroup { [NullableContext(1)] get; }

		// Token: 0x060010C7 RID: 4295 RVA: 0x00064768 File Offset: 0x00062968
		[NullableContext(1)]
		public MicrowaveMenu(MicrowaveBoundUserInterface owner)
		{
			MicrowaveMenu.!XamlIlPopulateTrampoline(this);
			this.CookTimeButtonGroup = new ButtonGroup();
			for (int i = 0; i <= 30; i += 5)
			{
				MicrowaveMenu.MicrowaveCookTimeButton newButton = new MicrowaveMenu.MicrowaveCookTimeButton
				{
					Text = ((i == 0) ? Loc.GetString("microwave-menu-instant-button") : i.ToString()),
					CookTime = (uint)i,
					TextAlign = 1,
					ToggleMode = true,
					Group = this.CookTimeButtonGroup
				};
				this.CookTimeButtonVbox.AddChild(newButton);
				newButton.OnToggled += delegate(BaseButton.ButtonToggledEventArgs args)
				{
					Action<BaseButton.ButtonEventArgs, int> onCookTimeSelected = this.OnCookTimeSelected;
					if (onCookTimeSelected == null)
					{
						return;
					}
					onCookTimeSelected(args, newButton.GetPositionInParent());
				};
			}
		}

		// Token: 0x060010C8 RID: 4296 RVA: 0x0006481C File Offset: 0x00062A1C
		public void ToggleBusyDisableOverlayPanel(bool shouldDisable)
		{
			this.DisableCookingPanelOverlay.Visible = shouldDisable;
		}

		// Token: 0x1700039F RID: 927
		// (get) Token: 0x060010C9 RID: 4297 RVA: 0x0006482A File Offset: 0x00062A2A
		public ItemList IngredientsList
		{
			get
			{
				return base.FindControl<ItemList>("IngredientsList");
			}
		}

		// Token: 0x170003A0 RID: 928
		// (get) Token: 0x060010CA RID: 4298 RVA: 0x00064837 File Offset: 0x00062A37
		public Button StartButton
		{
			get
			{
				return base.FindControl<Button>("StartButton");
			}
		}

		// Token: 0x170003A1 RID: 929
		// (get) Token: 0x060010CB RID: 4299 RVA: 0x000523E3 File Offset: 0x000505E3
		public Button EjectButton
		{
			get
			{
				return base.FindControl<Button>("EjectButton");
			}
		}

		// Token: 0x170003A2 RID: 930
		// (get) Token: 0x060010CC RID: 4300 RVA: 0x00064844 File Offset: 0x00062A44
		public Label CookTimeInfoLabel
		{
			get
			{
				return base.FindControl<Label>("CookTimeInfoLabel");
			}
		}

		// Token: 0x170003A3 RID: 931
		// (get) Token: 0x060010CD RID: 4301 RVA: 0x00064851 File Offset: 0x00062A51
		public BoxContainer CookTimeButtonVbox
		{
			get
			{
				return base.FindControl<BoxContainer>("CookTimeButtonVbox");
			}
		}

		// Token: 0x170003A4 RID: 932
		// (get) Token: 0x060010CE RID: 4302 RVA: 0x0006485E File Offset: 0x00062A5E
		private PanelContainer DisableCookingPanelOverlay
		{
			get
			{
				return base.FindControl<PanelContainer>("DisableCookingPanelOverlay");
			}
		}

		// Token: 0x060010CF RID: 4303 RVA: 0x0006486C File Offset: 0x00062A6C
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.Kitchen.UI.MicrowaveMenu.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Title = (string)new LocExtension("microwave-menu-title").ProvideValue();
			A_1.SetSize = new Vector2(512f, 256f);
			A_1.MinSize = new Vector2(512f, 256f);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 0;
			ItemList itemList = new ItemList();
			itemList.Name = "IngredientsList";
			Control control = itemList;
			context.RobustNameScope.Register("IngredientsList", control);
			itemList.Access = new AccessLevel?(0);
			itemList.VerticalExpand = true;
			itemList.HorizontalExpand = true;
			itemList.SelectMode = 3;
			itemList.SizeFlagsStretchRatio = 2f;
			itemList.MinSize = new Vector2(100f, 128f);
			control = itemList;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 1;
			boxContainer2.MinWidth = 176f;
			boxContainer2.VerticalExpand = true;
			boxContainer2.HorizontalExpand = true;
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 1;
			boxContainer3.Align = 1;
			boxContainer3.SizeFlagsStretchRatio = 3f;
			Button button = new Button();
			button.Name = "StartButton";
			control = button;
			context.RobustNameScope.Register("StartButton", control);
			button.Access = new AccessLevel?(0);
			button.Text = (string)new LocExtension("microwave-menu-start-button").ProvideValue();
			button.TextAlign = 1;
			control = button;
			boxContainer3.XamlChildren.Add(control);
			Button button2 = new Button();
			button2.Name = "EjectButton";
			control = button2;
			context.RobustNameScope.Register("EjectButton", control);
			button2.Access = new AccessLevel?(0);
			button2.Text = (string)new LocExtension("microwave-menu-eject-all-text").ProvideValue();
			button2.ToolTip = (string)new LocExtension("microwave-menu-eject-all-tooltip").ProvideValue();
			button2.TextAlign = 1;
			control = button2;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer2.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(0f, 15f)
			};
			boxContainer2.XamlChildren.Add(control);
			PanelContainer panelContainer = new PanelContainer();
			panelContainer.VerticalExpand = true;
			panelContainer.HorizontalExpand = true;
			PanelContainer panelContainer2 = new PanelContainer();
			panelContainer2.VerticalExpand = true;
			panelContainer2.ModulateSelfOverride = new Color?(Color.FromXaml("#FF0000"));
			panelContainer2.MinSize = new Vector2(100f, 128f);
			panelContainer2.PanelOverride = new StyleBoxFlat
			{
				BackgroundColor = Color.FromXaml("#00000080")
			};
			BoxContainer boxContainer4 = new BoxContainer();
			boxContainer4.Orientation = 1;
			PanelContainer panelContainer3 = new PanelContainer();
			panelContainer3.PanelOverride = new StyleBoxFlat
			{
				BackgroundColor = Color.FromXaml("#80808032")
			};
			Label label = new Label();
			label.Name = "CookTimeInfoLabel";
			control = label;
			context.RobustNameScope.Register("CookTimeInfoLabel", control);
			label.Access = new AccessLevel?(0);
			label.Align = 1;
			label.Modulate = Color.FromXaml("#FFFFFF");
			label.VAlign = 1;
			control = label;
			panelContainer3.XamlChildren.Add(control);
			control = panelContainer3;
			boxContainer4.XamlChildren.Add(control);
			ScrollContainer scrollContainer = new ScrollContainer();
			scrollContainer.VerticalExpand = true;
			BoxContainer boxContainer5 = new BoxContainer();
			boxContainer5.Name = "CookTimeButtonVbox";
			control = boxContainer5;
			context.RobustNameScope.Register("CookTimeButtonVbox", control);
			boxContainer5.Access = new AccessLevel?(0);
			boxContainer5.Orientation = 1;
			boxContainer5.VerticalExpand = true;
			boxContainer5.Align = 1;
			control = boxContainer5;
			scrollContainer.XamlChildren.Add(control);
			control = scrollContainer;
			boxContainer4.XamlChildren.Add(control);
			control = boxContainer4;
			panelContainer2.XamlChildren.Add(control);
			control = panelContainer2;
			panelContainer.XamlChildren.Add(control);
			control = panelContainer;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			PanelContainer panelContainer4 = new PanelContainer();
			panelContainer4.Name = "DisableCookingPanelOverlay";
			control = panelContainer4;
			context.RobustNameScope.Register("DisableCookingPanelOverlay", control);
			panelContainer4.MouseFilter = 0;
			panelContainer4.PanelOverride = new StyleBoxFlat
			{
				BackgroundColor = Color.FromXaml("#00000099")
			};
			control = panelContainer4;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x060010D0 RID: 4304 RVA: 0x00064DE8 File Offset: 0x00062FE8
		private static void !XamlIlPopulateTrampoline(MicrowaveMenu A_0)
		{
			MicrowaveMenu.Populate:Content.Client.Kitchen.UI.MicrowaveMenu.xaml(null, A_0);
		}

		// Token: 0x02000295 RID: 661
		public sealed class MicrowaveCookTimeButton : Button
		{
			// Token: 0x04000843 RID: 2115
			public uint CookTime;
		}
	}
}
