using System;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Shared.Paper;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;
using Robust.Shared.Utility;

namespace Content.Client.Paper.UI
{
	// Token: 0x020001F0 RID: 496
	[GenerateTypedNameReferences]
	public sealed class PaperWindow : BaseWindow
	{
		// Token: 0x06000CA0 RID: 3232 RVA: 0x00049798 File Offset: 0x00047998
		public PaperWindow()
		{
			PaperWindow.!XamlIlPopulateTrampoline(this);
			this.BlankPaperIndicator.SetMessage(Loc.GetString("paper-ui-blank-page-message"));
			this.CloseButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this.Close();
			};
		}

		// Token: 0x06000CA1 RID: 3233 RVA: 0x00049800 File Offset: 0x00047A00
		[NullableContext(1)]
		public void InitVisuals(PaperVisualsComponent visuals)
		{
			IResourceCache resourceCache = IoCManager.Resolve<IResourceCache>();
			this.PaperBackground.ModulateSelfOverride = new Color?(visuals.BackgroundModulate);
			TextureResource textureResource = (visuals.BackgroundImagePath != null) ? resourceCache.GetResource<TextureResource>(visuals.BackgroundImagePath, true) : null;
			if (textureResource != null)
			{
				StyleBoxTexture.StretchMode mode = visuals.BackgroundImageTile ? 1 : 0;
				Box2 backgroundPatchMargin = visuals.BackgroundPatchMargin;
				this.PaperBackground.PanelOverride = new StyleBoxTexture
				{
					Texture = textureResource,
					TextureScale = visuals.BackgroundScale,
					Mode = mode,
					PatchMarginLeft = backgroundPatchMargin.Left,
					PatchMarginBottom = backgroundPatchMargin.Bottom,
					PatchMarginRight = backgroundPatchMargin.Right,
					PatchMarginTop = backgroundPatchMargin.Top
				};
			}
			else
			{
				this.PaperBackground.PanelOverride = null;
			}
			if (visuals.HeaderImagePath != null)
			{
				this.HeaderImage.TexturePath = visuals.HeaderImagePath;
				Control headerImage = this.HeaderImage;
				Texture textureNormal = this.HeaderImage.TextureNormal;
				Vector2i? vector2i = (textureNormal != null) ? new Vector2i?(textureNormal.Size) : null;
				headerImage.MinSize = ((vector2i != null) ? vector2i.GetValueOrDefault() : Vector2.Zero);
			}
			this.HeaderImage.ModulateSelfOverride = new Color?(visuals.HeaderImageModulate);
			this.HeaderImage.Margin = new Thickness(visuals.HeaderMargin.Left, visuals.HeaderMargin.Top, visuals.HeaderMargin.Right, visuals.HeaderMargin.Bottom);
			this.PaperContent.ModulateSelfOverride = new Color?(visuals.ContentImageModulate);
			this.WrittenTextLabel.ModulateSelfOverride = new Color?(visuals.FontAccentColor);
			TextureResource textureResource2 = (visuals.ContentImagePath != null) ? resourceCache.GetResource<TextureResource>(visuals.ContentImagePath, true) : null;
			if (textureResource2 != null)
			{
				this._paperContentTex = new StyleBoxTexture
				{
					Texture = textureResource2,
					Mode = 1
				};
				this.PaperContent.PanelOverride = this._paperContentTex;
				this._paperContentLineScale = (float)visuals.ContentImageNumLines;
			}
			this.PaperContent.Margin = new Thickness(visuals.ContentMargin.Left, visuals.ContentMargin.Top, visuals.ContentMargin.Right, visuals.ContentMargin.Bottom);
			if (visuals.MaxWritableArea != null)
			{
				Vector2 value = visuals.MaxWritableArea.Value;
				this.ScrollingContents.MinSize = Vector2.Zero;
				this.ScrollingContents.MinSize = value;
				if (value.X > 0f)
				{
					this.ScrollingContents.MaxWidth = value.X;
					this._allowedResizeModes &= 231;
					base.SetWidth = float.NaN;
				}
				if (value.Y > 0f)
				{
					this.ScrollingContents.MaxHeight = value.Y;
					this._allowedResizeModes &= 249;
					base.SetHeight = float.NaN;
				}
			}
		}

		// Token: 0x06000CA2 RID: 3234 RVA: 0x00049AF8 File Offset: 0x00047CF8
		[NullableContext(1)]
		protected override void Draw(DrawingHandleScreen handle)
		{
			Font font;
			if (this.WrittenTextLabel.TryGetStyleProperty<Font>("font", ref font))
			{
				float num = (float)font.GetLineHeight(this.UIScale);
				this._paperContentTex.ExpandMarginTop = (float)font.GetDescent(this.UIScale);
				float num2 = this._paperContentLineScale * num;
				Texture texture = this._paperContentTex.Texture;
				int? num3 = (texture != null) ? new int?(texture.Height) : null;
				float num4 = (num2 / ((num3 != null) ? new float?((float)num3.GetValueOrDefault()) : null)) ?? num;
				this._paperContentTex.TextureScale = new Vector2(1f, num4);
				float num5 = (this.HeaderImage.Size.Y + this.HeaderImage.Margin.Top + this.HeaderImage.Margin.Bottom) / (num * this._paperContentLineScale);
				float num6 = (float)Math.Ceiling((double)num5) - num5;
				float num7 = num * num6 * this._paperContentLineScale;
				this.TextAlignmentPadding.Margin = new Thickness(0f, num7, 0f, 0f);
			}
			base.Draw(handle);
		}

		// Token: 0x06000CA3 RID: 3235 RVA: 0x00049C68 File Offset: 0x00047E68
		[NullableContext(1)]
		public void Populate(SharedPaperComponent.PaperBoundUserInterfaceState state)
		{
			bool flag = state.Mode == SharedPaperComponent.PaperAction.Write;
			this.InputContainer.Visible = flag;
			FormattedMessage formattedMessage = new FormattedMessage();
			formattedMessage.AddMarkupPermissive(state.Text.TrimEnd(new char[]
			{
				'\r',
				'\n'
			}));
			this.WrittenTextLabel.SetMessage(formattedMessage);
			this.WrittenTextLabel.Visible = (state.Text.Length > 0);
			this.BlankPaperIndicator.Visible = (!flag && state.Text.Length == 0);
			this.StampDisplay.RemoveAllChildren();
			foreach (string stamper in state.StampedBy)
			{
				this.StampDisplay.AddChild(new StampWidget
				{
					Stamper = stamper
				});
			}
		}

		// Token: 0x06000CA4 RID: 3236 RVA: 0x00049D58 File Offset: 0x00047F58
		protected override BaseWindow.DragMode GetDragModeFor(Vector2 relativeMousePos)
		{
			BaseWindow.DragMode dragMode = 1;
			if (relativeMousePos.Y < 16f)
			{
				dragMode |= 2;
			}
			else if (relativeMousePos.Y > base.Size.Y - 16f)
			{
				dragMode |= 4;
			}
			if (relativeMousePos.X < 16f)
			{
				dragMode |= 8;
			}
			else if (relativeMousePos.X > base.Size.X - 16f)
			{
				dragMode |= 16;
			}
			return dragMode & this._allowedResizeModes;
		}

		// Token: 0x17000283 RID: 643
		// (get) Token: 0x06000CA5 RID: 3237 RVA: 0x00049DD0 File Offset: 0x00047FD0
		private BoxContainer ContentsRoot
		{
			get
			{
				return base.FindControl<BoxContainer>("ContentsRoot");
			}
		}

		// Token: 0x17000284 RID: 644
		// (get) Token: 0x06000CA6 RID: 3238 RVA: 0x0000AD39 File Offset: 0x00008F39
		private TextureButton CloseButton
		{
			get
			{
				return base.FindControl<TextureButton>("CloseButton");
			}
		}

		// Token: 0x17000285 RID: 645
		// (get) Token: 0x06000CA7 RID: 3239 RVA: 0x00049DDD File Offset: 0x00047FDD
		private PanelContainer PaperBackground
		{
			get
			{
				return base.FindControl<PanelContainer>("PaperBackground");
			}
		}

		// Token: 0x17000286 RID: 646
		// (get) Token: 0x06000CA8 RID: 3240 RVA: 0x00049DEA File Offset: 0x00047FEA
		private ScrollContainer ScrollingContents
		{
			get
			{
				return base.FindControl<ScrollContainer>("ScrollingContents");
			}
		}

		// Token: 0x17000287 RID: 647
		// (get) Token: 0x06000CA9 RID: 3241 RVA: 0x00049DF7 File Offset: 0x00047FF7
		private PanelContainer PaperContent
		{
			get
			{
				return base.FindControl<PanelContainer>("PaperContent");
			}
		}

		// Token: 0x17000288 RID: 648
		// (get) Token: 0x06000CAA RID: 3242 RVA: 0x00049E04 File Offset: 0x00048004
		private TextureButton HeaderImage
		{
			get
			{
				return base.FindControl<TextureButton>("HeaderImage");
			}
		}

		// Token: 0x17000289 RID: 649
		// (get) Token: 0x06000CAB RID: 3243 RVA: 0x00049E11 File Offset: 0x00048011
		private Control TextAlignmentPadding
		{
			get
			{
				return base.FindControl<Control>("TextAlignmentPadding");
			}
		}

		// Token: 0x1700028A RID: 650
		// (get) Token: 0x06000CAC RID: 3244 RVA: 0x00049E1E File Offset: 0x0004801E
		private RichTextLabel BlankPaperIndicator
		{
			get
			{
				return base.FindControl<RichTextLabel>("BlankPaperIndicator");
			}
		}

		// Token: 0x1700028B RID: 651
		// (get) Token: 0x06000CAD RID: 3245 RVA: 0x00049E2B File Offset: 0x0004802B
		private RichTextLabel WrittenTextLabel
		{
			get
			{
				return base.FindControl<RichTextLabel>("WrittenTextLabel");
			}
		}

		// Token: 0x1700028C RID: 652
		// (get) Token: 0x06000CAE RID: 3246 RVA: 0x00049E38 File Offset: 0x00048038
		private PanelContainer InputContainer
		{
			get
			{
				return base.FindControl<PanelContainer>("InputContainer");
			}
		}

		// Token: 0x1700028D RID: 653
		// (get) Token: 0x06000CAF RID: 3247 RVA: 0x00049E45 File Offset: 0x00048045
		public LineEdit Input
		{
			get
			{
				return base.FindControl<LineEdit>("Input");
			}
		}

		// Token: 0x1700028E RID: 654
		// (get) Token: 0x06000CB0 RID: 3248 RVA: 0x00049E52 File Offset: 0x00048052
		private BoxContainer StampDisplay
		{
			get
			{
				return base.FindControl<BoxContainer>("StampDisplay");
			}
		}

		// Token: 0x06000CB2 RID: 3250 RVA: 0x00049E60 File Offset: 0x00048060
		static void xaml(IServiceProvider A_0, PaperWindow A_1)
		{
			XamlIlContext.Context<PaperWindow> context = new XamlIlContext.Context<PaperWindow>(A_0, null, "resm:Content.Client.Paper.UI.PaperWindow.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.MouseFilter = 0;
			A_1.Resizable = true;
			A_1.MinSize = new Vector2(150f, 150f);
			A_1.SetSize = new Vector2(300f, 400f);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Name = "ContentsRoot";
			Control control = boxContainer;
			context.RobustNameScope.Register("ContentsRoot", control);
			boxContainer.Orientation = 1;
			PanelContainer panelContainer = new PanelContainer();
			string item = "AngleRect";
			panelContainer.StyleClasses.Add(item);
			panelContainer.VerticalAlignment = 1;
			panelContainer.HorizontalAlignment = 3;
			panelContainer.Margin = new Thickness(6f, 6f, 6f, 6f);
			TextureButton textureButton = new TextureButton();
			textureButton.Name = "CloseButton";
			control = textureButton;
			context.RobustNameScope.Register("CloseButton", control);
			item = "windowCloseButton";
			textureButton.StyleClasses.Add(item);
			control = textureButton;
			panelContainer.XamlChildren.Add(control);
			control = panelContainer;
			boxContainer.XamlChildren.Add(control);
			PanelContainer panelContainer2 = new PanelContainer();
			panelContainer2.Name = "PaperBackground";
			control = panelContainer2;
			context.RobustNameScope.Register("PaperBackground", control);
			item = "PaperDefaultBorder";
			panelContainer2.StyleClasses.Add(item);
			panelContainer2.VerticalExpand = true;
			panelContainer2.HorizontalExpand = true;
			ScrollContainer scrollContainer = new ScrollContainer();
			scrollContainer.Name = "ScrollingContents";
			control = scrollContainer;
			context.RobustNameScope.Register("ScrollingContents", control);
			scrollContainer.HorizontalAlignment = 0;
			scrollContainer.VerticalAlignment = 0;
			scrollContainer.HorizontalExpand = true;
			scrollContainer.VerticalExpand = true;
			scrollContainer.HScrollEnabled = false;
			PanelContainer panelContainer3 = new PanelContainer();
			panelContainer3.Name = "PaperContent";
			control = panelContainer3;
			context.RobustNameScope.Register("PaperContent", control);
			panelContainer3.VerticalExpand = true;
			panelContainer3.HorizontalExpand = true;
			panelContainer3.MaxWidth = 600f;
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 1;
			boxContainer2.VerticalAlignment = 1;
			TextureButton textureButton2 = new TextureButton();
			textureButton2.Name = "HeaderImage";
			control = textureButton2;
			context.RobustNameScope.Register("HeaderImage", control);
			textureButton2.HorizontalAlignment = 2;
			textureButton2.VerticalAlignment = 1;
			textureButton2.MouseFilter = 2;
			control = textureButton2;
			boxContainer2.XamlChildren.Add(control);
			Control control2 = new Control();
			control2.Name = "TextAlignmentPadding";
			control = control2;
			context.RobustNameScope.Register("TextAlignmentPadding", control);
			control2.VerticalAlignment = 1;
			control = control2;
			boxContainer2.XamlChildren.Add(control);
			RichTextLabel richTextLabel = new RichTextLabel();
			richTextLabel.Name = "BlankPaperIndicator";
			control = richTextLabel;
			context.RobustNameScope.Register("BlankPaperIndicator", control);
			item = "LabelSecondaryColor";
			richTextLabel.StyleClasses.Add(item);
			richTextLabel.VerticalAlignment = 1;
			richTextLabel.HorizontalAlignment = 2;
			control = richTextLabel;
			boxContainer2.XamlChildren.Add(control);
			RichTextLabel richTextLabel2 = new RichTextLabel();
			item = "PaperWrittenText";
			richTextLabel2.StyleClasses.Add(item);
			richTextLabel2.Name = "WrittenTextLabel";
			control = richTextLabel2;
			context.RobustNameScope.Register("WrittenTextLabel", control);
			richTextLabel2.VerticalAlignment = 1;
			control = richTextLabel2;
			boxContainer2.XamlChildren.Add(control);
			PanelContainer panelContainer4 = new PanelContainer();
			panelContainer4.Name = "InputContainer";
			control = panelContainer4;
			context.RobustNameScope.Register("InputContainer", control);
			item = "TransparentBorderedWindowPanel";
			panelContainer4.StyleClasses.Add(item);
			panelContainer4.VerticalAlignment = 1;
			panelContainer4.HorizontalExpand = true;
			LineEdit lineEdit = new LineEdit();
			lineEdit.Name = "Input";
			control = lineEdit;
			context.RobustNameScope.Register("Input", control);
			item = "PaperLineEdit";
			lineEdit.StyleClasses.Add(item);
			lineEdit.Access = new AccessLevel?(0);
			control = lineEdit;
			panelContainer4.XamlChildren.Add(control);
			control = panelContainer4;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			panelContainer3.XamlChildren.Add(control);
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Name = "StampDisplay";
			control = boxContainer3;
			context.RobustNameScope.Register("StampDisplay", control);
			boxContainer3.Orientation = 1;
			boxContainer3.VerticalAlignment = 3;
			boxContainer3.Margin = new Thickness(6f, 6f, 6f, 6f);
			control = boxContainer3;
			panelContainer3.XamlChildren.Add(control);
			control = panelContainer3;
			scrollContainer.XamlChildren.Add(control);
			control = scrollContainer;
			panelContainer2.XamlChildren.Add(control);
			control = panelContainer2;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06000CB3 RID: 3251 RVA: 0x0004A450 File Offset: 0x00048650
		private static void !XamlIlPopulateTrampoline(PaperWindow A_0)
		{
			PaperWindow.Populate:Content.Client.Paper.UI.PaperWindow.xaml(null, A_0);
		}

		// Token: 0x04000671 RID: 1649
		private const int DRAG_MARGIN_SIZE = 16;

		// Token: 0x04000672 RID: 1650
		[Nullable(1)]
		private StyleBoxTexture _paperContentTex = new StyleBoxTexture();

		// Token: 0x04000673 RID: 1651
		private float _paperContentLineScale = 1f;

		// Token: 0x04000674 RID: 1652
		private BaseWindow.DragMode _allowedResizeModes = 255;
	}
}
