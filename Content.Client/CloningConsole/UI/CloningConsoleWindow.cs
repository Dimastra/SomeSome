using System;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.Message;
using Content.Shared.Cloning.CloningConsole;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;

namespace Content.Client.CloningConsole.UI
{
	// Token: 0x020003BC RID: 956
	[GenerateTypedNameReferences]
	public class CloningConsoleWindow : DefaultWindow
	{
		// Token: 0x060017BC RID: 6076 RVA: 0x00088255 File Offset: 0x00086455
		public CloningConsoleWindow()
		{
			IoCManager.InjectDependencies<CloningConsoleWindow>(this);
			CloningConsoleWindow.!XamlIlPopulateTrampoline(this);
		}

		// Token: 0x060017BD RID: 6077 RVA: 0x0008826C File Offset: 0x0008646C
		[NullableContext(1)]
		public void Populate(CloningConsoleBoundUserInterfaceState state)
		{
			this._lastUpdate = state;
			if (state.ScannerConnected)
			{
				if (!state.ScannerInRange)
				{
					this.GeneticScannerFar.Visible = true;
					this.GeneticScannerContents.Visible = false;
					this.GeneticScannerMissing.Visible = false;
					return;
				}
				this.GeneticScannerContents.Visible = true;
				this.GeneticScannerFar.Visible = false;
				this.GeneticScannerMissing.Visible = false;
				this.CloneButton.Disabled = (state.CloningStatus > ClonerStatus.Ready);
				switch (state.CloningStatus)
				{
				case ClonerStatus.Ready:
					this.CloningActivity.Text = Loc.GetString("cloning-console-component-msg-ready");
					break;
				case ClonerStatus.ScannerEmpty:
					this.CloningActivity.Text = Loc.GetString("cloning-console-component-msg-empty");
					break;
				case ClonerStatus.ScannerOccupantAlive:
					this.CloningActivity.Text = Loc.GetString("cloning-console-component-msg-scanner-occupant-alive");
					break;
				case ClonerStatus.OccupantMetaphyiscal:
					this.CloningActivity.Text = Loc.GetString("cloning-console-component-msg-already-alive");
					break;
				case ClonerStatus.ClonerOccupied:
					this.CloningActivity.Text = Loc.GetString("cloning-console-component-msg-occupied");
					break;
				case ClonerStatus.NoClonerDetected:
					this.CloningActivity.Text = Loc.GetString("cloning-console-component-msg-no-cloner");
					break;
				case ClonerStatus.NoMindDetected:
					this.CloningActivity.Text = Loc.GetString("cloning-console-component-msg-no-mind");
					break;
				}
				this.ScannerInfoLabel.SetMarkup((state.ScannerBodyInfo != null) ? Loc.GetString("cloning-console-window-scanner-id", new ValueTuple<string, object>[]
				{
					new ValueTuple<string, object>("scannerOccupantName", state.ScannerBodyInfo)
				}) : Loc.GetString("cloning-console-window-id-blank"));
			}
			else
			{
				this.GeneticScannerContents.Visible = false;
				this.GeneticScannerFar.Visible = false;
				this.GeneticScannerMissing.Visible = true;
			}
			if (!state.ClonerConnected)
			{
				this.CloningPodContents.Visible = false;
				this.CloningPodFar.Visible = false;
				this.CloningPodMissing.Visible = true;
				return;
			}
			if (!state.ClonerInRange)
			{
				this.CloningPodFar.Visible = true;
				this.CloningPodContents.Visible = false;
				this.CloningPodMissing.Visible = false;
				return;
			}
			this.CloningPodContents.Visible = true;
			this.CloningPodFar.Visible = false;
			this.CloningPodMissing.Visible = false;
			this.ClonerBrainActivity.SetMarkup(Loc.GetString(state.MindPresent ? "cloning-console-mind-present-text" : "cloning-console-no-mind-activity-text"));
			this.ClonerInfoLabel.SetMarkup((state.ClonerBodyInfo != null) ? Loc.GetString("cloning-console-window-pod-id", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("podOccupantName", state.ClonerBodyInfo)
			}) : Loc.GetString("cloning-console-window-id-blank"));
		}

		// Token: 0x170004DC RID: 1244
		// (get) Token: 0x060017BE RID: 6078 RVA: 0x0003F260 File Offset: 0x0003D460
		protected TabContainer MasterTabContainer
		{
			get
			{
				return base.FindControl<TabContainer>("MasterTabContainer");
			}
		}

		// Token: 0x170004DD RID: 1245
		// (get) Token: 0x060017BF RID: 6079 RVA: 0x00088517 File Offset: 0x00086717
		protected BoxContainer Scanner
		{
			get
			{
				return base.FindControl<BoxContainer>("Scanner");
			}
		}

		// Token: 0x170004DE RID: 1246
		// (get) Token: 0x060017C0 RID: 6080 RVA: 0x00088524 File Offset: 0x00086724
		protected BoxContainer GeneticScannerContents
		{
			get
			{
				return base.FindControl<BoxContainer>("GeneticScannerContents");
			}
		}

		// Token: 0x170004DF RID: 1247
		// (get) Token: 0x060017C1 RID: 6081 RVA: 0x00088531 File Offset: 0x00086731
		public RichTextLabel ScannerInfoLabel
		{
			get
			{
				return base.FindControl<RichTextLabel>("ScannerInfoLabel");
			}
		}

		// Token: 0x170004E0 RID: 1248
		// (get) Token: 0x060017C2 RID: 6082 RVA: 0x0008853E File Offset: 0x0008673E
		public Button CloneButton
		{
			get
			{
				return base.FindControl<Button>("CloneButton");
			}
		}

		// Token: 0x170004E1 RID: 1249
		// (get) Token: 0x060017C3 RID: 6083 RVA: 0x0008854B File Offset: 0x0008674B
		public Label CloningActivity
		{
			get
			{
				return base.FindControl<Label>("CloningActivity");
			}
		}

		// Token: 0x170004E2 RID: 1250
		// (get) Token: 0x060017C4 RID: 6084 RVA: 0x00088558 File Offset: 0x00086758
		protected BoxContainer GeneticScannerMissing
		{
			get
			{
				return base.FindControl<BoxContainer>("GeneticScannerMissing");
			}
		}

		// Token: 0x170004E3 RID: 1251
		// (get) Token: 0x060017C5 RID: 6085 RVA: 0x00088565 File Offset: 0x00086765
		protected BoxContainer GeneticScannerFar
		{
			get
			{
				return base.FindControl<BoxContainer>("GeneticScannerFar");
			}
		}

		// Token: 0x170004E4 RID: 1252
		// (get) Token: 0x060017C6 RID: 6086 RVA: 0x00088572 File Offset: 0x00086772
		protected BoxContainer CloningPodContents
		{
			get
			{
				return base.FindControl<BoxContainer>("CloningPodContents");
			}
		}

		// Token: 0x170004E5 RID: 1253
		// (get) Token: 0x060017C7 RID: 6087 RVA: 0x0008857F File Offset: 0x0008677F
		public RichTextLabel ClonerInfoLabel
		{
			get
			{
				return base.FindControl<RichTextLabel>("ClonerInfoLabel");
			}
		}

		// Token: 0x170004E6 RID: 1254
		// (get) Token: 0x060017C8 RID: 6088 RVA: 0x0008858C File Offset: 0x0008678C
		public RichTextLabel ClonerBrainActivity
		{
			get
			{
				return base.FindControl<RichTextLabel>("ClonerBrainActivity");
			}
		}

		// Token: 0x170004E7 RID: 1255
		// (get) Token: 0x060017C9 RID: 6089 RVA: 0x00088599 File Offset: 0x00086799
		protected BoxContainer CloningPodMissing
		{
			get
			{
				return base.FindControl<BoxContainer>("CloningPodMissing");
			}
		}

		// Token: 0x170004E8 RID: 1256
		// (get) Token: 0x060017CA RID: 6090 RVA: 0x000885A6 File Offset: 0x000867A6
		protected BoxContainer CloningPodFar
		{
			get
			{
				return base.FindControl<BoxContainer>("CloningPodFar");
			}
		}

		// Token: 0x060017CB RID: 6091 RVA: 0x000885B4 File Offset: 0x000867B4
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.CloningConsole.UI.CloningConsoleWindow.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Title = (string)new LocExtension("comp-pda-ui-menu-title").ProvideValue();
			A_1.SetSize = new Vector2(400f, 400f);
			A_1.MinSize = new Vector2(400f, 400f);
			TabContainer tabContainer = new TabContainer();
			tabContainer.Name = "MasterTabContainer";
			Control control = tabContainer;
			context.RobustNameScope.Register("MasterTabContainer", control);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Name = "Scanner";
			control = boxContainer;
			context.RobustNameScope.Register("Scanner", control);
			boxContainer.Orientation = 1;
			boxContainer.VerticalExpand = true;
			boxContainer.HorizontalExpand = true;
			boxContainer.MinSize = new Vector2(100f, 150f);
			PanelContainer panelContainer = new PanelContainer();
			panelContainer.VerticalExpand = true;
			string item = "Inset";
			panelContainer.StyleClasses.Add(item);
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Name = "GeneticScannerContents";
			control = boxContainer2;
			context.RobustNameScope.Register("GeneticScannerContents", control);
			boxContainer2.Margin = new Thickness(5f, 5f, 5f, 5f);
			boxContainer2.Orientation = 1;
			boxContainer2.VerticalExpand = true;
			boxContainer2.HorizontalExpand = true;
			control = new Label
			{
				HorizontalAlignment = 2,
				Text = (string)new LocExtension("cloning-console-window-scanner-details-label").ProvideValue()
			};
			boxContainer2.XamlChildren.Add(control);
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 0;
			boxContainer3.VerticalExpand = true;
			boxContainer3.HorizontalExpand = true;
			RichTextLabel richTextLabel = new RichTextLabel();
			richTextLabel.Name = "ScannerInfoLabel";
			control = richTextLabel;
			context.RobustNameScope.Register("ScannerInfoLabel", control);
			richTextLabel.Access = new AccessLevel?(0);
			richTextLabel.HorizontalExpand = true;
			control = richTextLabel;
			boxContainer3.XamlChildren.Add(control);
			Button button = new Button();
			button.Name = "CloneButton";
			control = button;
			context.RobustNameScope.Register("CloneButton", control);
			button.Access = new AccessLevel?(0);
			button.Text = (string)new LocExtension("cloning-console-window-clone-button-text").ProvideValue();
			button.HorizontalAlignment = 3;
			button.VerticalAlignment = 2;
			control = button;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer2.XamlChildren.Add(control);
			Label label = new Label();
			label.Name = "CloningActivity";
			control = label;
			context.RobustNameScope.Register("CloningActivity", control);
			label.Text = (string)new LocExtension("cloning-console-component-msg-empty").ProvideValue();
			label.Access = new AccessLevel?(0);
			label.HorizontalAlignment = 2;
			label.HorizontalExpand = true;
			control = label;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			panelContainer.XamlChildren.Add(control);
			BoxContainer boxContainer4 = new BoxContainer();
			boxContainer4.Name = "GeneticScannerMissing";
			control = boxContainer4;
			context.RobustNameScope.Register("GeneticScannerMissing", control);
			boxContainer4.Margin = new Thickness(5f, 5f, 5f, 5f);
			boxContainer4.Orientation = 1;
			boxContainer4.VerticalExpand = true;
			boxContainer4.HorizontalExpand = true;
			control = new Label
			{
				HorizontalAlignment = 2,
				VerticalAlignment = 2,
				Text = (string)new LocExtension("cloning-console-window-no-scanner-detected-label").ProvideValue()
			};
			boxContainer4.XamlChildren.Add(control);
			control = boxContainer4;
			panelContainer.XamlChildren.Add(control);
			BoxContainer boxContainer5 = new BoxContainer();
			boxContainer5.Name = "GeneticScannerFar";
			control = boxContainer5;
			context.RobustNameScope.Register("GeneticScannerFar", control);
			boxContainer5.Margin = new Thickness(5f, 5f, 5f, 5f);
			boxContainer5.Orientation = 1;
			boxContainer5.VerticalExpand = true;
			boxContainer5.HorizontalExpand = true;
			control = new Label
			{
				HorizontalAlignment = 2,
				VerticalAlignment = 2,
				Text = (string)new LocExtension("cloning-console-window-scanner-far-label").ProvideValue()
			};
			boxContainer5.XamlChildren.Add(control);
			control = boxContainer5;
			panelContainer.XamlChildren.Add(control);
			control = panelContainer;
			boxContainer.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(50f, 5f)
			};
			boxContainer.XamlChildren.Add(control);
			PanelContainer panelContainer2 = new PanelContainer();
			panelContainer2.VerticalExpand = true;
			item = "Inset";
			panelContainer2.StyleClasses.Add(item);
			BoxContainer boxContainer6 = new BoxContainer();
			boxContainer6.Name = "CloningPodContents";
			control = boxContainer6;
			context.RobustNameScope.Register("CloningPodContents", control);
			boxContainer6.Margin = new Thickness(5f, 5f, 5f, 5f);
			boxContainer6.Orientation = 1;
			boxContainer6.VerticalExpand = true;
			boxContainer6.HorizontalExpand = true;
			control = new Label
			{
				HorizontalAlignment = 2,
				Text = (string)new LocExtension("cloning-console-window-pod-details-label").ProvideValue()
			};
			boxContainer6.XamlChildren.Add(control);
			BoxContainer boxContainer7 = new BoxContainer();
			boxContainer7.Orientation = 1;
			boxContainer7.VerticalExpand = true;
			boxContainer7.HorizontalExpand = true;
			RichTextLabel richTextLabel2 = new RichTextLabel();
			richTextLabel2.Name = "ClonerInfoLabel";
			control = richTextLabel2;
			context.RobustNameScope.Register("ClonerInfoLabel", control);
			richTextLabel2.Access = new AccessLevel?(0);
			richTextLabel2.HorizontalExpand = true;
			control = richTextLabel2;
			boxContainer7.XamlChildren.Add(control);
			RichTextLabel richTextLabel3 = new RichTextLabel();
			richTextLabel3.Name = "ClonerBrainActivity";
			control = richTextLabel3;
			context.RobustNameScope.Register("ClonerBrainActivity", control);
			richTextLabel3.Access = new AccessLevel?(0);
			richTextLabel3.HorizontalExpand = true;
			control = richTextLabel3;
			boxContainer7.XamlChildren.Add(control);
			control = boxContainer7;
			boxContainer6.XamlChildren.Add(control);
			control = boxContainer6;
			panelContainer2.XamlChildren.Add(control);
			BoxContainer boxContainer8 = new BoxContainer();
			boxContainer8.Name = "CloningPodMissing";
			control = boxContainer8;
			context.RobustNameScope.Register("CloningPodMissing", control);
			boxContainer8.Margin = new Thickness(5f, 5f, 5f, 5f);
			boxContainer8.Orientation = 1;
			boxContainer8.VerticalExpand = true;
			boxContainer8.HorizontalExpand = true;
			control = new Label
			{
				HorizontalAlignment = 2,
				VerticalAlignment = 2,
				Text = (string)new LocExtension("cloning-console-window-no-clone-pod-detected-label").ProvideValue()
			};
			boxContainer8.XamlChildren.Add(control);
			control = boxContainer8;
			panelContainer2.XamlChildren.Add(control);
			BoxContainer boxContainer9 = new BoxContainer();
			boxContainer9.Name = "CloningPodFar";
			control = boxContainer9;
			context.RobustNameScope.Register("CloningPodFar", control);
			boxContainer9.Margin = new Thickness(5f, 5f, 5f, 5f);
			boxContainer9.Orientation = 1;
			boxContainer9.VerticalExpand = true;
			boxContainer9.HorizontalExpand = true;
			control = new Label
			{
				HorizontalAlignment = 2,
				VerticalAlignment = 2,
				Text = (string)new LocExtension("cloning-console-window-clone-pod-far-label").ProvideValue()
			};
			boxContainer9.XamlChildren.Add(control);
			control = boxContainer9;
			panelContainer2.XamlChildren.Add(control);
			control = panelContainer2;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			tabContainer.XamlChildren.Add(control);
			control = tabContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x060017CC RID: 6092 RVA: 0x00088EEB File Offset: 0x000870EB
		private static void !XamlIlPopulateTrampoline(CloningConsoleWindow A_0)
		{
			CloningConsoleWindow.Populate:Content.Client.CloningConsole.UI.CloningConsoleWindow.xaml(null, A_0);
		}

		// Token: 0x04000C1C RID: 3100
		[Nullable(2)]
		private CloningConsoleBoundUserInterfaceState _lastUpdate;
	}
}
