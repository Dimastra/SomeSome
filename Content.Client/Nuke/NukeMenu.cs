using System;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Shared.Nuke;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.Localization;
using Robust.Shared.Maths;

namespace Content.Client.Nuke
{
	// Token: 0x02000207 RID: 519
	[GenerateTypedNameReferences]
	public sealed class NukeMenu : DefaultWindow
	{
		// Token: 0x1400004E RID: 78
		// (add) Token: 0x06000D97 RID: 3479 RVA: 0x00051F7C File Offset: 0x0005017C
		// (remove) Token: 0x06000D98 RID: 3480 RVA: 0x00051FB4 File Offset: 0x000501B4
		[Nullable(2)]
		[method: NullableContext(2)]
		[Nullable(2)]
		public event Action<int> OnKeypadButtonPressed;

		// Token: 0x1400004F RID: 79
		// (add) Token: 0x06000D99 RID: 3481 RVA: 0x00051FEC File Offset: 0x000501EC
		// (remove) Token: 0x06000D9A RID: 3482 RVA: 0x00052024 File Offset: 0x00050224
		[Nullable(2)]
		[method: NullableContext(2)]
		[Nullable(2)]
		public event Action OnClearButtonPressed;

		// Token: 0x14000050 RID: 80
		// (add) Token: 0x06000D9B RID: 3483 RVA: 0x0005205C File Offset: 0x0005025C
		// (remove) Token: 0x06000D9C RID: 3484 RVA: 0x00052094 File Offset: 0x00050294
		[Nullable(2)]
		[method: NullableContext(2)]
		[Nullable(2)]
		public event Action OnEnterButtonPressed;

		// Token: 0x06000D9D RID: 3485 RVA: 0x000520C9 File Offset: 0x000502C9
		public NukeMenu()
		{
			NukeMenu.!XamlIlPopulateTrampoline(this);
			this.FillKeypadGrid();
		}

		// Token: 0x06000D9E RID: 3486 RVA: 0x000520E0 File Offset: 0x000502E0
		private void FillKeypadGrid()
		{
			for (int i = 1; i <= 9; i++)
			{
				this.AddKeypadButton(i);
			}
			Button button = new Button
			{
				Text = "C"
			};
			button.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				Action onClearButtonPressed = this.OnClearButtonPressed;
				if (onClearButtonPressed == null)
				{
					return;
				}
				onClearButtonPressed();
			};
			this.KeypadGrid.AddChild(button);
			this.AddKeypadButton(0);
			Button button2 = new Button
			{
				Text = "E"
			};
			button2.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				Action onEnterButtonPressed = this.OnEnterButtonPressed;
				if (onEnterButtonPressed == null)
				{
					return;
				}
				onEnterButtonPressed();
			};
			this.KeypadGrid.AddChild(button2);
		}

		// Token: 0x06000D9F RID: 3487 RVA: 0x00052168 File Offset: 0x00050368
		private void AddKeypadButton(int i)
		{
			Button button = new Button
			{
				Text = i.ToString()
			};
			button.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				Action<int> onKeypadButtonPressed = this.OnKeypadButtonPressed;
				if (onKeypadButtonPressed == null)
				{
					return;
				}
				onKeypadButtonPressed(i);
			};
			this.KeypadGrid.AddChild(button);
		}

		// Token: 0x06000DA0 RID: 3488 RVA: 0x000521C0 File Offset: 0x000503C0
		[NullableContext(1)]
		public void UpdateState(NukeUiState state)
		{
			string @string;
			string string2;
			switch (state.Status)
			{
			case NukeStatus.AWAIT_DISK:
				@string = Loc.GetString("nuke-user-interface-first-status-device-locked");
				string2 = Loc.GetString("nuke-user-interface-second-status-await-disk");
				break;
			case NukeStatus.AWAIT_CODE:
				@string = Loc.GetString("nuke-user-interface-first-status-input-code");
				string2 = Loc.GetString("nuke-user-interface-second-status-current-code", new ValueTuple<string, object>[]
				{
					new ValueTuple<string, object>("code", this.VisualizeCode(state.EnteredCodeLength, state.MaxCodeLength))
				});
				break;
			case NukeStatus.AWAIT_ARM:
				@string = Loc.GetString("nuke-user-interface-first-status-device-ready");
				string2 = Loc.GetString("nuke-user-interface-second-status-time", new ValueTuple<string, object>[]
				{
					new ValueTuple<string, object>("time", state.RemainingTime)
				});
				break;
			case NukeStatus.ARMED:
				@string = Loc.GetString("nuke-user-interface-first-status-device-armed");
				string2 = Loc.GetString("nuke-user-interface-second-status-time", new ValueTuple<string, object>[]
				{
					new ValueTuple<string, object>("time", state.RemainingTime)
				});
				break;
			case NukeStatus.COOLDOWN:
				@string = Loc.GetString("nuke-user-interface-first-status-device-cooldown");
				string2 = Loc.GetString("nuke-user-interface-second-status-cooldown-time", new ValueTuple<string, object>[]
				{
					new ValueTuple<string, object>("time", state.CooldownTime)
				});
				break;
			default:
				@string = Loc.GetString("nuke-user-interface-status-error");
				string2 = Loc.GetString("nuke-user-interface-status-error");
				break;
			}
			this.FirstStatusLabel.Text = @string;
			this.SecondStatusLabel.Text = string2;
			this.EjectButton.Disabled = (!state.DiskInserted || state.Status == NukeStatus.ARMED);
			this.AnchorButton.Disabled = (state.Status == NukeStatus.ARMED);
			this.AnchorButton.Pressed = state.IsAnchored;
			this.ArmButton.Disabled = (!state.AllowArm || !state.IsAnchored);
		}

		// Token: 0x06000DA1 RID: 3489 RVA: 0x00052394 File Offset: 0x00050594
		[NullableContext(1)]
		private string VisualizeCode(int codeLength, int maxLength)
		{
			string str = new string('*', codeLength);
			int count = maxLength - codeLength;
			string str2 = new string('_', count);
			return str + str2;
		}

		// Token: 0x170002DF RID: 735
		// (get) Token: 0x06000DA2 RID: 3490 RVA: 0x000523BC File Offset: 0x000505BC
		private Label FirstStatusLabel
		{
			get
			{
				return base.FindControl<Label>("FirstStatusLabel");
			}
		}

		// Token: 0x170002E0 RID: 736
		// (get) Token: 0x06000DA3 RID: 3491 RVA: 0x000523C9 File Offset: 0x000505C9
		private Label SecondStatusLabel
		{
			get
			{
				return base.FindControl<Label>("SecondStatusLabel");
			}
		}

		// Token: 0x170002E1 RID: 737
		// (get) Token: 0x06000DA4 RID: 3492 RVA: 0x000523D6 File Offset: 0x000505D6
		private GridContainer KeypadGrid
		{
			get
			{
				return base.FindControl<GridContainer>("KeypadGrid");
			}
		}

		// Token: 0x170002E2 RID: 738
		// (get) Token: 0x06000DA5 RID: 3493 RVA: 0x000523E3 File Offset: 0x000505E3
		public Button EjectButton
		{
			get
			{
				return base.FindControl<Button>("EjectButton");
			}
		}

		// Token: 0x170002E3 RID: 739
		// (get) Token: 0x06000DA6 RID: 3494 RVA: 0x000523F0 File Offset: 0x000505F0
		public Button AnchorButton
		{
			get
			{
				return base.FindControl<Button>("AnchorButton");
			}
		}

		// Token: 0x170002E4 RID: 740
		// (get) Token: 0x06000DA7 RID: 3495 RVA: 0x000523FD File Offset: 0x000505FD
		public Button ArmButton
		{
			get
			{
				return base.FindControl<Button>("ArmButton");
			}
		}

		// Token: 0x06000DAA RID: 3498 RVA: 0x00052430 File Offset: 0x00050630
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.Nuke.NukeMenu.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Title = (string)new LocExtension("nuke-user-interface-title").ProvideValue();
			A_1.MinSize = new Vector2(256f, 256f);
			A_1.SetSize = new Vector2(256f, 256f);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			boxContainer.HorizontalExpand = true;
			boxContainer.VerticalExpand = true;
			PanelContainer panelContainer = new PanelContainer();
			panelContainer.Margin = new Thickness(0f, 0f, 0f, 5f);
			panelContainer.PanelOverride = new StyleBoxFlat
			{
				BackgroundColor = Color.FromXaml("#001c00")
			};
			Label label = new Label();
			label.Name = "FirstStatusLabel";
			Control control = label;
			context.RobustNameScope.Register("FirstStatusLabel", control);
			control = label;
			panelContainer.XamlChildren.Add(control);
			control = panelContainer;
			boxContainer.XamlChildren.Add(control);
			PanelContainer panelContainer2 = new PanelContainer();
			panelContainer2.Margin = new Thickness(0f, 0f, 0f, 5f);
			panelContainer2.PanelOverride = new StyleBoxFlat
			{
				BackgroundColor = Color.FromXaml("#001c00")
			};
			Label label2 = new Label();
			label2.Name = "SecondStatusLabel";
			control = label2;
			context.RobustNameScope.Register("SecondStatusLabel", control);
			control = label2;
			panelContainer2.XamlChildren.Add(control);
			control = panelContainer2;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 0;
			GridContainer gridContainer = new GridContainer();
			gridContainer.Columns = 3;
			gridContainer.Name = "KeypadGrid";
			control = gridContainer;
			context.RobustNameScope.Register("KeypadGrid", control);
			control = gridContainer;
			boxContainer2.XamlChildren.Add(control);
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 1;
			boxContainer3.HorizontalExpand = true;
			boxContainer3.Margin = new Thickness(5f, 0f, 5f, 0f);
			Button button = new Button();
			button.Name = "EjectButton";
			control = button;
			context.RobustNameScope.Register("EjectButton", control);
			button.Text = (string)new LocExtension("nuke-user-interface-eject-button").ProvideValue();
			button.Margin = new Thickness(0f, 0f, 0f, 5f);
			button.Access = new AccessLevel?(0);
			control = button;
			boxContainer3.XamlChildren.Add(control);
			Button button2 = new Button();
			button2.Name = "AnchorButton";
			control = button2;
			context.RobustNameScope.Register("AnchorButton", control);
			button2.Text = (string)new LocExtension("nuke-user-interface-anchor-button").ProvideValue();
			button2.Margin = new Thickness(0f, 0f, 0f, 5f);
			button2.Access = new AccessLevel?(0);
			control = button2;
			boxContainer3.XamlChildren.Add(control);
			Button button3 = new Button();
			button3.Name = "ArmButton";
			control = button3;
			context.RobustNameScope.Register("ArmButton", control);
			button3.Text = (string)new LocExtension("nuke-user-interface-arm-button").ProvideValue();
			button3.Access = new AccessLevel?(0);
			string item = "Caution";
			button3.StyleClasses.Add(item);
			control = button3;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06000DAB RID: 3499 RVA: 0x0005289A File Offset: 0x00050A9A
		private static void !XamlIlPopulateTrampoline(NukeMenu A_0)
		{
			NukeMenu.Populate:Content.Client.Nuke.NukeMenu.xaml(null, A_0);
		}
	}
}
