using System;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Shared.Atmos.Components;
using Content.Shared.Temperature;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;

namespace Content.Client.Atmos.UI
{
	// Token: 0x02000435 RID: 1077
	[GenerateTypedNameReferences]
	public sealed class GasAnalyzerWindow : DefaultWindow
	{
		// Token: 0x06001A3F RID: 6719 RVA: 0x00095FE4 File Offset: 0x000941E4
		[NullableContext(1)]
		public GasAnalyzerWindow(GasAnalyzerBoundUserInterface owner)
		{
			GasAnalyzerWindow.!XamlIlPopulateTrampoline(this);
			this._entityManager = IoCManager.Resolve<IEntityManager>();
			this._owner = owner;
		}

		// Token: 0x06001A40 RID: 6720 RVA: 0x00096004 File Offset: 0x00094204
		[NullableContext(1)]
		public void Populate(SharedGasAnalyzerComponent.GasAnalyzerUserMessage msg)
		{
			if (msg.Error != null)
			{
				this.CTopBox.AddChild(new Label
				{
					Text = Loc.GetString("gas-analyzer-window-error-text", new ValueTuple<string, object>[]
					{
						new ValueTuple<string, object>("errorText", msg.Error)
					}),
					FontColorOverride = new Color?(Color.Red)
				});
				return;
			}
			if (msg.NodeGasMixes.Length == 0)
			{
				this.CTopBox.AddChild(new Label
				{
					Text = Loc.GetString("gas-analyzer-window-no-data")
				});
				base.MinSize = new Vector2(this.CTopBox.DesiredSize.X + 40f, base.MinSize.Y);
				return;
			}
			SharedGasAnalyzerComponent.GasMixEntry gasMixEntry = msg.NodeGasMixes[0];
			this.CTabContainer.SetTabTitle(1, gasMixEntry.Name);
			this.CEnvironmentMix.RemoveAllChildren();
			this.GenerateGasDisplay(gasMixEntry, this.CEnvironmentMix);
			Vector2 minSize;
			if (msg.NodeGasMixes.Length > 1)
			{
				this.CTabContainer.SetTabVisible(0, true);
				this.CTabContainer.SetTabTitle(0, Loc.GetString("gas-analyzer-window-tab-title-capitalized", new ValueTuple<string, object>[]
				{
					new ValueTuple<string, object>("title", msg.DeviceName)
				}));
				SpriteView gridIcon = this.GridIcon;
				Direction? overrideDirection;
				switch (msg.NodeGasMixes.Length)
				{
				case 2:
					overrideDirection = new Direction?(0);
					break;
				case 3:
					overrideDirection = new Direction?(2);
					break;
				case 4:
					overrideDirection = new Direction?(2);
					break;
				default:
					overrideDirection = this.GridIcon.OverrideDirection;
					break;
				}
				gridIcon.OverrideDirection = overrideDirection;
				this.GridIcon.Sprite = this._entityManager.GetComponent<SpriteComponent>(msg.DeviceUid);
				this.LeftPanel.RemoveAllChildren();
				this.MiddlePanel.RemoveAllChildren();
				this.RightPanel.RemoveAllChildren();
				if (msg.NodeGasMixes.Length == 2)
				{
					this.LeftPanelLabel.Text = string.Empty;
					this.MiddlePanelLabel.Text = Loc.GetString("gas-analyzer-window-tab-title-capitalized", new ValueTuple<string, object>[]
					{
						new ValueTuple<string, object>("title", msg.NodeGasMixes[1].Name)
					});
					this.RightPanelLabel.Text = string.Empty;
					this.LeftPanel.Visible = false;
					this.MiddlePanel.Visible = true;
					this.RightPanel.Visible = false;
					this.GenerateGasDisplay(msg.NodeGasMixes[1], this.MiddlePanel);
					minSize..ctor(this.CDeviceGrid.DesiredSize.X + 40f, base.MinSize.Y);
				}
				else if (msg.NodeGasMixes.Length == 3)
				{
					this.LeftPanelLabel.Text = Loc.GetString("gas-analyzer-window-tab-title-capitalized", new ValueTuple<string, object>[]
					{
						new ValueTuple<string, object>("title", msg.NodeGasMixes[1].Name)
					});
					this.MiddlePanelLabel.Text = string.Empty;
					this.RightPanelLabel.Text = Loc.GetString("gas-analyzer-window-tab-title-capitalized", new ValueTuple<string, object>[]
					{
						new ValueTuple<string, object>("title", msg.NodeGasMixes[2].Name)
					});
					this.LeftPanel.Visible = true;
					this.MiddlePanel.Visible = false;
					this.RightPanel.Visible = true;
					this.GenerateGasDisplay(msg.NodeGasMixes[1], this.LeftPanel);
					this.GenerateGasDisplay(msg.NodeGasMixes[2], this.RightPanel);
					minSize..ctor(this.CDeviceGrid.DesiredSize.X + 40f, base.MinSize.Y);
				}
				else if (msg.NodeGasMixes.Length == 4)
				{
					this.LeftPanelLabel.Text = Loc.GetString("gas-analyzer-window-tab-title-capitalized", new ValueTuple<string, object>[]
					{
						new ValueTuple<string, object>("title", msg.DeviceFlipped ? msg.NodeGasMixes[1].Name : msg.NodeGasMixes[3].Name)
					});
					this.MiddlePanelLabel.Text = Loc.GetString("gas-analyzer-window-tab-title-capitalized", new ValueTuple<string, object>[]
					{
						new ValueTuple<string, object>("title", msg.NodeGasMixes[2].Name)
					});
					this.RightPanelLabel.Text = Loc.GetString("gas-analyzer-window-tab-title-capitalized", new ValueTuple<string, object>[]
					{
						new ValueTuple<string, object>("title", msg.DeviceFlipped ? msg.NodeGasMixes[3].Name : msg.NodeGasMixes[1].Name)
					});
					this.LeftPanel.Visible = true;
					this.MiddlePanel.Visible = true;
					this.RightPanel.Visible = true;
					this.GenerateGasDisplay(msg.DeviceFlipped ? msg.NodeGasMixes[1] : msg.NodeGasMixes[3], this.LeftPanel);
					this.GenerateGasDisplay(msg.NodeGasMixes[2], this.MiddlePanel);
					this.GenerateGasDisplay(msg.DeviceFlipped ? msg.NodeGasMixes[3] : msg.NodeGasMixes[1], this.RightPanel);
					minSize..ctor(this.CDeviceGrid.DesiredSize.X + 40f, base.MinSize.Y);
				}
				else
				{
					for (int i = 1; i < msg.NodeGasMixes.Length; i++)
					{
						this.GenerateGasDisplay(msg.NodeGasMixes[i], this.CDeviceMixes);
					}
					this.LeftPanel.Visible = false;
					this.MiddlePanel.Visible = false;
					this.RightPanel.Visible = false;
					minSize..ctor(this.CDeviceMixes.DesiredSize.X + 40f, base.MinSize.Y);
				}
			}
			else
			{
				this.CTabContainer.SetTabVisible(0, false);
				this.CTabContainer.CurrentTab = 1;
				minSize..ctor(this.CEnvironmentMix.DesiredSize.X + 40f, base.MinSize.Y);
			}
			base.MinSize = minSize;
		}

		// Token: 0x06001A41 RID: 6721 RVA: 0x00096650 File Offset: 0x00094850
		[NullableContext(1)]
		private void GenerateGasDisplay(SharedGasAnalyzerComponent.GasMixEntry gasMix, Control parent)
		{
			PanelContainer panelContainer = new PanelContainer
			{
				VerticalExpand = true,
				HorizontalExpand = true,
				Margin = new Thickness(4f),
				PanelOverride = new StyleBoxFlat
				{
					BorderColor = Color.FromHex("#4f4f4f", null),
					BorderThickness = new Thickness(1f)
				}
			};
			BoxContainer boxContainer = new BoxContainer
			{
				Orientation = 1,
				VerticalExpand = true,
				Margin = new Thickness(4f)
			};
			parent.AddChild(panelContainer);
			panelContainer.AddChild(boxContainer);
			BoxContainer boxContainer2 = new BoxContainer
			{
				Orientation = 0
			};
			boxContainer2.AddChild(new Label
			{
				Text = Loc.GetString("gas-analyzer-window-pressure-text")
			});
			boxContainer2.AddChild(new Control
			{
				MinSize = new Vector2(10f, 0f),
				HorizontalExpand = true
			});
			Control control = boxContainer2;
			Label label = new Label();
			Label label2 = label;
			string text = "gas-analyzer-window-pressure-val-text";
			ValueTuple<string, object>[] array = new ValueTuple<string, object>[1];
			int num = 0;
			string item = "pressure";
			DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(0, 1);
			defaultInterpolatedStringHandler.AppendFormatted<float>(gasMix.Pressure, "0.##");
			array[num] = new ValueTuple<string, object>(item, defaultInterpolatedStringHandler.ToStringAndClear());
			label2.Text = Loc.GetString(text, array);
			label.Align = 2;
			label.HorizontalExpand = true;
			control.AddChild(label);
			boxContainer.AddChild(boxContainer2);
			if (gasMix.Pressure > 5E-08f)
			{
				BoxContainer boxContainer3 = new BoxContainer
				{
					Orientation = 0
				};
				boxContainer3.AddChild(new Label
				{
					Text = Loc.GetString("gas-analyzer-window-temperature-text")
				});
				boxContainer3.AddChild(new Control
				{
					MinSize = new Vector2(10f, 0f),
					HorizontalExpand = true
				});
				Control control2 = boxContainer3;
				label = new Label();
				Label label3 = label;
				string text2 = "gas-analyzer-window-temperature-val-text";
				ValueTuple<string, object>[] array2 = new ValueTuple<string, object>[2];
				int num2 = 0;
				string item2 = "tempK";
				defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(0, 1);
				defaultInterpolatedStringHandler.AppendFormatted<float>(gasMix.Temperature, "0.#");
				array2[num2] = new ValueTuple<string, object>(item2, defaultInterpolatedStringHandler.ToStringAndClear());
				int num3 = 1;
				string item3 = "tempC";
				defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(0, 1);
				defaultInterpolatedStringHandler.AppendFormatted<float>(TemperatureHelpers.KelvinToCelsius(gasMix.Temperature), "0.#");
				array2[num3] = new ValueTuple<string, object>(item3, defaultInterpolatedStringHandler.ToStringAndClear());
				label3.Text = Loc.GetString(text2, array2);
				label.Align = 2;
				label.HorizontalExpand = true;
				control2.AddChild(label);
				boxContainer.AddChild(boxContainer3);
			}
			if (gasMix.Gases != null)
			{
				SharedGasAnalyzerComponent.GasEntry[] gases = gasMix.Gases;
				if (gases == null || gases.Length != 0)
				{
					boxContainer.AddChild(new Control
					{
						MinSize = new Vector2(0f, 10f)
					});
					BoxContainer boxContainer4 = new BoxContainer
					{
						Orientation = 1
					};
					BoxContainer boxContainer5 = new BoxContainer
					{
						Orientation = 1
					};
					Control control3 = boxContainer;
					BoxContainer boxContainer6 = new BoxContainer();
					boxContainer6.Orientation = 0;
					boxContainer6.Children.Add(boxContainer4);
					boxContainer6.Children.Add(new Control
					{
						MinSize = new Vector2(10f, 0f),
						HorizontalExpand = true
					});
					boxContainer6.Children.Add(boxContainer5);
					control3.AddChild(boxContainer6);
					int num4 = 30;
					int num5 = 24;
					BoxContainer boxContainer7 = new BoxContainer
					{
						Orientation = 0,
						HorizontalExpand = true,
						MinSize = new Vector2(0f, (float)num4)
					};
					boxContainer.AddChild(new Control
					{
						MinSize = new Vector2(0f, 10f),
						VerticalExpand = true
					});
					float num6 = 0f;
					foreach (SharedGasAnalyzerComponent.GasEntry gasEntry in gasMix.Gases)
					{
						num6 += gasEntry.Amount;
					}
					for (int j = 0; j < gasMix.Gases.Length; j++)
					{
						SharedGasAnalyzerComponent.GasEntry gasEntry2 = gasMix.Gases[j];
						Color backgroundColor = Color.FromHex("#" + gasEntry2.Color, new Color?(Color.White));
						boxContainer4.AddChild(new Label
						{
							Text = Loc.GetString(gasEntry2.Name)
						});
						Control control4 = boxContainer5;
						label = new Label();
						Label label4 = label;
						string text3 = "gas-analyzer-window-molarity-text";
						ValueTuple<string, object>[] array3 = new ValueTuple<string, object>[2];
						int num7 = 0;
						string item4 = "mol";
						defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(0, 1);
						defaultInterpolatedStringHandler.AppendFormatted<float>(gasEntry2.Amount, "0.##");
						array3[num7] = new ValueTuple<string, object>(item4, defaultInterpolatedStringHandler.ToStringAndClear());
						int num8 = 1;
						string item5 = "percentage";
						defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(0, 1);
						defaultInterpolatedStringHandler.AppendFormatted<float>(gasEntry2.Amount / num6 * 100f, "0.#");
						array3[num8] = new ValueTuple<string, object>(item5, defaultInterpolatedStringHandler.ToStringAndClear());
						label4.Text = Loc.GetString(text3, array3);
						label.Align = 2;
						label.HorizontalExpand = true;
						control4.AddChild(label);
						float paddingLeft = (j == 0) ? 0f : 2f;
						float paddingRight = (j == gasMix.Gases.Length - 1) ? 0f : 2f;
						Control control5 = boxContainer7;
						PanelContainer panelContainer2 = new PanelContainer();
						Control control6 = panelContainer2;
						string text4 = "gas-analyzer-window-molarity-percentage-text";
						ValueTuple<string, object>[] array4 = new ValueTuple<string, object>[3];
						array4[0] = new ValueTuple<string, object>("gasName", gasEntry2.Name);
						int num9 = 1;
						string item6 = "amount";
						defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(0, 1);
						defaultInterpolatedStringHandler.AppendFormatted<float>(gasEntry2.Amount, "0.##");
						array4[num9] = new ValueTuple<string, object>(item6, defaultInterpolatedStringHandler.ToStringAndClear());
						int num10 = 2;
						string item7 = "percentage";
						defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(0, 1);
						defaultInterpolatedStringHandler.AppendFormatted<float>(gasEntry2.Amount / num6 * 100f, "0.#");
						array4[num10] = new ValueTuple<string, object>(item7, defaultInterpolatedStringHandler.ToStringAndClear());
						control6.ToolTip = Loc.GetString(text4, array4);
						panelContainer2.HorizontalExpand = true;
						panelContainer2.SizeFlagsStretchRatio = gasEntry2.Amount;
						panelContainer2.MouseFilter = 0;
						panelContainer2.PanelOverride = new StyleBoxFlat
						{
							BackgroundColor = backgroundColor,
							PaddingLeft = paddingLeft,
							PaddingRight = paddingRight
						};
						panelContainer2.MinSize = new Vector2((float)num5, 0f);
						control5.AddChild(panelContainer2);
					}
					boxContainer.AddChild(boxContainer7);
					return;
				}
			}
			boxContainer.AddChild(new Control
			{
				MinSize = new Vector2(0f, 10f)
			});
			boxContainer.AddChild(new Label
			{
				Text = Loc.GetString("gas-analyzer-window-no-gas-text"),
				FontColorOverride = new Color?(Color.Gray)
			});
		}

		// Token: 0x17000565 RID: 1381
		// (get) Token: 0x06001A42 RID: 6722 RVA: 0x00096C95 File Offset: 0x00094E95
		private BoxContainer CTopBox
		{
			get
			{
				return base.FindControl<BoxContainer>("CTopBox");
			}
		}

		// Token: 0x17000566 RID: 1382
		// (get) Token: 0x06001A43 RID: 6723 RVA: 0x0003CDF7 File Offset: 0x0003AFF7
		private TabContainer CTabContainer
		{
			get
			{
				return base.FindControl<TabContainer>("CTabContainer");
			}
		}

		// Token: 0x17000567 RID: 1383
		// (get) Token: 0x06001A44 RID: 6724 RVA: 0x00096CA2 File Offset: 0x00094EA2
		private GridContainer CDeviceGrid
		{
			get
			{
				return base.FindControl<GridContainer>("CDeviceGrid");
			}
		}

		// Token: 0x17000568 RID: 1384
		// (get) Token: 0x06001A45 RID: 6725 RVA: 0x00096CAF File Offset: 0x00094EAF
		private Label LeftPanelLabel
		{
			get
			{
				return base.FindControl<Label>("LeftPanelLabel");
			}
		}

		// Token: 0x17000569 RID: 1385
		// (get) Token: 0x06001A46 RID: 6726 RVA: 0x00096CBC File Offset: 0x00094EBC
		private BoxContainer LeftPanel
		{
			get
			{
				return base.FindControl<BoxContainer>("LeftPanel");
			}
		}

		// Token: 0x1700056A RID: 1386
		// (get) Token: 0x06001A47 RID: 6727 RVA: 0x00096CC9 File Offset: 0x00094EC9
		private SpriteView GridIcon
		{
			get
			{
				return base.FindControl<SpriteView>("GridIcon");
			}
		}

		// Token: 0x1700056B RID: 1387
		// (get) Token: 0x06001A48 RID: 6728 RVA: 0x00096CD6 File Offset: 0x00094ED6
		private Label MiddlePanelLabel
		{
			get
			{
				return base.FindControl<Label>("MiddlePanelLabel");
			}
		}

		// Token: 0x1700056C RID: 1388
		// (get) Token: 0x06001A49 RID: 6729 RVA: 0x00096CE3 File Offset: 0x00094EE3
		private BoxContainer MiddlePanel
		{
			get
			{
				return base.FindControl<BoxContainer>("MiddlePanel");
			}
		}

		// Token: 0x1700056D RID: 1389
		// (get) Token: 0x06001A4A RID: 6730 RVA: 0x00096CF0 File Offset: 0x00094EF0
		private Label RightPanelLabel
		{
			get
			{
				return base.FindControl<Label>("RightPanelLabel");
			}
		}

		// Token: 0x1700056E RID: 1390
		// (get) Token: 0x06001A4B RID: 6731 RVA: 0x00096CFD File Offset: 0x00094EFD
		private BoxContainer RightPanel
		{
			get
			{
				return base.FindControl<BoxContainer>("RightPanel");
			}
		}

		// Token: 0x1700056F RID: 1391
		// (get) Token: 0x06001A4C RID: 6732 RVA: 0x00096D0A File Offset: 0x00094F0A
		private BoxContainer CDeviceMixes
		{
			get
			{
				return base.FindControl<BoxContainer>("CDeviceMixes");
			}
		}

		// Token: 0x17000570 RID: 1392
		// (get) Token: 0x06001A4D RID: 6733 RVA: 0x00096D17 File Offset: 0x00094F17
		private BoxContainer CEnvironmentMix
		{
			get
			{
				return base.FindControl<BoxContainer>("CEnvironmentMix");
			}
		}

		// Token: 0x06001A4E RID: 6734 RVA: 0x00096D24 File Offset: 0x00094F24
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.Atmos.UI.GasAnalyzerWindow.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.MinSize = new Vector2(270f, 420f);
			A_1.SetSize = new Vector2(315f, 420f);
			A_1.Title = (string)new LocExtension("gas-analyzer-window-name").ProvideValue();
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			boxContainer.Margin = new Thickness(5f, 5f, 5f, 5f);
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Name = "CTopBox";
			Control control = boxContainer2;
			context.RobustNameScope.Register("CTopBox", control);
			boxContainer2.Orientation = 0;
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			TabContainer tabContainer = new TabContainer();
			tabContainer.Name = "CTabContainer";
			control = tabContainer;
			context.RobustNameScope.Register("CTabContainer", control);
			tabContainer.VerticalExpand = true;
			tabContainer.Margin = new Thickness(1f, 1f, 1f, 2f);
			ScrollContainer scrollContainer = new ScrollContainer();
			scrollContainer.VerticalExpand = true;
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.HorizontalExpand = true;
			boxContainer3.VerticalExpand = true;
			boxContainer3.Orientation = 1;
			GridContainer gridContainer = new GridContainer();
			gridContainer.Name = "CDeviceGrid";
			control = gridContainer;
			context.RobustNameScope.Register("CDeviceGrid", control);
			gridContainer.Columns = 3;
			gridContainer.Rows = 1;
			gridContainer.VerticalExpand = true;
			gridContainer.HorizontalExpand = true;
			BoxContainer boxContainer4 = new BoxContainer();
			boxContainer4.Orientation = 1;
			boxContainer4.VerticalExpand = true;
			control = new Control
			{
				MinHeight = 5f
			};
			boxContainer4.XamlChildren.Add(control);
			Label label = new Label();
			label.Name = "LeftPanelLabel";
			control = label;
			context.RobustNameScope.Register("LeftPanelLabel", control);
			label.HorizontalExpand = true;
			label.Align = 1;
			control = label;
			boxContainer4.XamlChildren.Add(control);
			control = new Control
			{
				MinHeight = 27f
			};
			boxContainer4.XamlChildren.Add(control);
			BoxContainer boxContainer5 = new BoxContainer();
			boxContainer5.Name = "LeftPanel";
			control = boxContainer5;
			context.RobustNameScope.Register("LeftPanel", control);
			boxContainer5.VerticalExpand = true;
			boxContainer5.HorizontalExpand = true;
			boxContainer5.Margin = new Thickness(1f, 1f, 1f, 1f);
			boxContainer5.MinSize = new Vector2(315f, 150f);
			boxContainer5.Align = 1;
			boxContainer5.Visible = false;
			control = boxContainer5;
			boxContainer4.XamlChildren.Add(control);
			control = boxContainer4;
			gridContainer.XamlChildren.Add(control);
			BoxContainer boxContainer6 = new BoxContainer();
			boxContainer6.Orientation = 1;
			boxContainer6.VerticalExpand = true;
			SpriteView spriteView = new SpriteView();
			spriteView.Name = "GridIcon";
			control = spriteView;
			context.RobustNameScope.Register("GridIcon", control);
			spriteView.MinSize = new Vector2(32f, 32f);
			spriteView.OverrideDirection = new Direction?(4);
			spriteView.RectClipContent = true;
			control = spriteView;
			boxContainer6.XamlChildren.Add(control);
			Label label2 = new Label();
			label2.Name = "MiddlePanelLabel";
			control = label2;
			context.RobustNameScope.Register("MiddlePanelLabel", control);
			label2.HorizontalExpand = true;
			label2.Align = 1;
			control = label2;
			boxContainer6.XamlChildren.Add(control);
			BoxContainer boxContainer7 = new BoxContainer();
			boxContainer7.Name = "MiddlePanel";
			control = boxContainer7;
			context.RobustNameScope.Register("MiddlePanel", control);
			boxContainer7.VerticalExpand = true;
			boxContainer7.HorizontalExpand = true;
			boxContainer7.Margin = new Thickness(1f, 1f, 1f, 1f);
			boxContainer7.MinSize = new Vector2(315f, 150f);
			boxContainer7.Align = 1;
			boxContainer7.Visible = false;
			control = boxContainer7;
			boxContainer6.XamlChildren.Add(control);
			control = boxContainer6;
			gridContainer.XamlChildren.Add(control);
			BoxContainer boxContainer8 = new BoxContainer();
			boxContainer8.Orientation = 1;
			boxContainer8.VerticalExpand = true;
			control = new Control
			{
				MinHeight = 5f
			};
			boxContainer8.XamlChildren.Add(control);
			Label label3 = new Label();
			label3.Name = "RightPanelLabel";
			control = label3;
			context.RobustNameScope.Register("RightPanelLabel", control);
			label3.HorizontalExpand = true;
			label3.Align = 1;
			control = label3;
			boxContainer8.XamlChildren.Add(control);
			control = new Control
			{
				MinHeight = 27f
			};
			boxContainer8.XamlChildren.Add(control);
			BoxContainer boxContainer9 = new BoxContainer();
			boxContainer9.Name = "RightPanel";
			control = boxContainer9;
			context.RobustNameScope.Register("RightPanel", control);
			boxContainer9.VerticalExpand = true;
			boxContainer9.HorizontalExpand = true;
			boxContainer9.Margin = new Thickness(1f, 1f, 1f, 1f);
			boxContainer9.MinSize = new Vector2(315f, 150f);
			boxContainer9.Align = 1;
			boxContainer9.Visible = false;
			control = boxContainer9;
			boxContainer8.XamlChildren.Add(control);
			control = boxContainer8;
			gridContainer.XamlChildren.Add(control);
			control = gridContainer;
			boxContainer3.XamlChildren.Add(control);
			BoxContainer boxContainer10 = new BoxContainer();
			boxContainer10.Name = "CDeviceMixes";
			control = boxContainer10;
			context.RobustNameScope.Register("CDeviceMixes", control);
			boxContainer10.HorizontalExpand = true;
			boxContainer10.Orientation = 0;
			control = boxContainer10;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			scrollContainer.XamlChildren.Add(control);
			control = scrollContainer;
			tabContainer.XamlChildren.Add(control);
			ScrollContainer scrollContainer2 = new ScrollContainer();
			scrollContainer2.VerticalExpand = true;
			BoxContainer boxContainer11 = new BoxContainer();
			boxContainer11.Name = "CEnvironmentMix";
			control = boxContainer11;
			context.RobustNameScope.Register("CEnvironmentMix", control);
			boxContainer11.Orientation = 1;
			boxContainer11.VerticalExpand = true;
			boxContainer11.Margin = new Thickness(1f, 1f, 1f, 1f);
			boxContainer11.MinSize = new Vector2(315f, 150f);
			boxContainer11.Align = 1;
			control = boxContainer11;
			scrollContainer2.XamlChildren.Add(control);
			control = scrollContainer2;
			tabContainer.XamlChildren.Add(control);
			control = tabContainer;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06001A4F RID: 6735 RVA: 0x0009750B File Offset: 0x0009570B
		private static void !XamlIlPopulateTrampoline(GasAnalyzerWindow A_0)
		{
			GasAnalyzerWindow.Populate:Content.Client.Atmos.UI.GasAnalyzerWindow.xaml(null, A_0);
		}

		// Token: 0x04000D5D RID: 3421
		[Nullable(1)]
		private GasAnalyzerBoundUserInterface _owner;

		// Token: 0x04000D5E RID: 3422
		[Nullable(1)]
		private IEntityManager _entityManager;
	}
}
