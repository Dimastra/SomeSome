using System;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.Stylesheets;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.Input;
using Robust.Shared.Localization;
using Robust.Shared.Maths;

namespace Content.Client.Atmos.UI
{
	// Token: 0x02000437 RID: 1079
	[GenerateTypedNameReferences]
	public sealed class GasCanisterWindow : DefaultWindow
	{
		// Token: 0x14000099 RID: 153
		// (add) Token: 0x06001A58 RID: 6744 RVA: 0x000976D0 File Offset: 0x000958D0
		// (remove) Token: 0x06001A59 RID: 6745 RVA: 0x00097708 File Offset: 0x00095908
		[Nullable(2)]
		[method: NullableContext(2)]
		[Nullable(2)]
		public event Action TankEjectButtonPressed;

		// Token: 0x1400009A RID: 154
		// (add) Token: 0x06001A5A RID: 6746 RVA: 0x00097740 File Offset: 0x00095940
		// (remove) Token: 0x06001A5B RID: 6747 RVA: 0x00097778 File Offset: 0x00095978
		[Nullable(2)]
		[method: NullableContext(2)]
		[Nullable(2)]
		public event Action<float> ReleasePressureSet;

		// Token: 0x1400009B RID: 155
		// (add) Token: 0x06001A5C RID: 6748 RVA: 0x000977B0 File Offset: 0x000959B0
		// (remove) Token: 0x06001A5D RID: 6749 RVA: 0x000977E8 File Offset: 0x000959E8
		[Nullable(2)]
		[method: NullableContext(2)]
		[Nullable(2)]
		public event Action ReleaseValveCloseButtonPressed;

		// Token: 0x1400009C RID: 156
		// (add) Token: 0x06001A5E RID: 6750 RVA: 0x00097820 File Offset: 0x00095A20
		// (remove) Token: 0x06001A5F RID: 6751 RVA: 0x00097858 File Offset: 0x00095A58
		[Nullable(2)]
		[method: NullableContext(2)]
		[Nullable(2)]
		public event Action ReleaseValveOpenButtonPressed;

		// Token: 0x06001A60 RID: 6752 RVA: 0x00097890 File Offset: 0x00095A90
		public GasCanisterWindow()
		{
			GasCanisterWindow.!XamlIlPopulateTrampoline(this);
			this.ReleaseValveCloseButton.Group = this._buttonGroup;
			this.ReleaseValveOpenButton.Group = this._buttonGroup;
			this.ReleaseValveCloseButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				Action releaseValveCloseButtonPressed = this.ReleaseValveCloseButtonPressed;
				if (releaseValveCloseButtonPressed == null)
				{
					return;
				}
				releaseValveCloseButtonPressed();
			};
			this.ReleaseValveOpenButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				Action releaseValveOpenButtonPressed = this.ReleaseValveOpenButtonPressed;
				if (releaseValveOpenButtonPressed == null)
				{
					return;
				}
				releaseValveOpenButtonPressed();
			};
			this.TankEjectButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				Action tankEjectButtonPressed = this.TankEjectButtonPressed;
				if (tankEjectButtonPressed == null)
				{
					return;
				}
				tankEjectButtonPressed();
			};
			this.ReleasePressureSlider.OnKeyBindUp += this.OnReleasePressureSliderReleased;
			this.ReleasePressureSlider.OnValueChanged += this.OnReleasePressureSliderChanged;
			this.ReleasePressure.OnValueChanged += this.OnReleasePressureChanged;
		}

		// Token: 0x06001A61 RID: 6753 RVA: 0x00097960 File Offset: 0x00095B60
		[NullableContext(1)]
		private void OnReleasePressureChanged(FloatSpinBox.FloatSpinBoxEventArgs args)
		{
			float num = Math.Clamp(args.Value, this.ReleasePressureSlider.MinValue, this.ReleasePressureSlider.MaxValue);
			this.ReleasePressureSlider.SetValueWithoutEvent(num);
			Action<float> releasePressureSet = this.ReleasePressureSet;
			if (releasePressureSet == null)
			{
				return;
			}
			releasePressureSet(num);
		}

		// Token: 0x06001A62 RID: 6754 RVA: 0x000979AC File Offset: 0x00095BAC
		[NullableContext(1)]
		private void OnReleasePressureSliderChanged(Range range)
		{
			this.ReleasePressure.Value = range.Value;
		}

		// Token: 0x06001A63 RID: 6755 RVA: 0x000979BF File Offset: 0x00095BBF
		[NullableContext(1)]
		private void OnReleasePressureSliderReleased(GUIBoundKeyEventArgs args)
		{
			if (args.Function != EngineKeyFunctions.UIClick)
			{
				return;
			}
			Action<float> releasePressureSet = this.ReleasePressureSet;
			if (releasePressureSet == null)
			{
				return;
			}
			releasePressureSet(this.ReleasePressureSlider.Value);
		}

		// Token: 0x06001A64 RID: 6756 RVA: 0x000979EF File Offset: 0x00095BEF
		[NullableContext(1)]
		public void SetCanisterLabel(string label)
		{
			base.Title = label;
		}

		// Token: 0x06001A65 RID: 6757 RVA: 0x000979F8 File Offset: 0x00095BF8
		public void SetCanisterPressure(float pressure)
		{
			this.CanisterPressureLabel.Text = Loc.GetString("comp-gas-canister-ui-pressure", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("pressure", Math.Round((double)pressure))
			});
		}

		// Token: 0x06001A66 RID: 6758 RVA: 0x00097A32 File Offset: 0x00095C32
		public void SetPortStatus(bool status)
		{
			if (status)
			{
				this.PortStatusLabel.Text = Loc.GetString("comp-gas-canister-ui-port-connected");
				return;
			}
			this.PortStatusLabel.Text = Loc.GetString("comp-gas-canister-ui-port-disconnected");
		}

		// Token: 0x06001A67 RID: 6759 RVA: 0x00097A62 File Offset: 0x00095C62
		[NullableContext(2)]
		public void SetTankLabel(string label)
		{
			if (label == null)
			{
				this.TankEjectButton.Disabled = true;
				this.TankLabelLabel.Text = Loc.GetString("comp-gas-canister-ui-holding-tank-label-empty");
				return;
			}
			this.TankEjectButton.Disabled = false;
			this.TankLabelLabel.Text = label;
		}

		// Token: 0x06001A68 RID: 6760 RVA: 0x00097AA1 File Offset: 0x00095CA1
		public void SetTankPressure(float pressure)
		{
			this.TankPressureLabel.Text = Loc.GetString("comp-gas-canister-ui-pressure", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("pressure", Math.Round((double)pressure))
			});
		}

		// Token: 0x06001A69 RID: 6761 RVA: 0x00097ADB File Offset: 0x00095CDB
		public void SetReleasePressureRange(float min, float max)
		{
			this.ReleasePressureSlider.MinValue = min;
			this.ReleasePressureSlider.MaxValue = max;
		}

		// Token: 0x06001A6A RID: 6762 RVA: 0x00097AF5 File Offset: 0x00095CF5
		public void SetReleasePressure(float pressure)
		{
			if (MathHelper.CloseTo(pressure, this.ReleasePressure.Value, 1E-07f))
			{
				return;
			}
			if (!this.ReleasePressureSlider.Grabbed)
			{
				this.ReleasePressureSlider.SetValueWithoutEvent(pressure);
			}
			this.ReleasePressure.Value = pressure;
		}

		// Token: 0x06001A6B RID: 6763 RVA: 0x00097B35 File Offset: 0x00095D35
		public void SetReleaseValve(bool valve)
		{
			if (valve)
			{
				this.ReleaseValveOpenButton.Pressed = true;
				return;
			}
			this.ReleaseValveCloseButton.Pressed = true;
		}

		// Token: 0x17000571 RID: 1393
		// (get) Token: 0x06001A6C RID: 6764 RVA: 0x00097B53 File Offset: 0x00095D53
		private Label CanisterPressureLabel
		{
			get
			{
				return base.FindControl<Label>("CanisterPressureLabel");
			}
		}

		// Token: 0x17000572 RID: 1394
		// (get) Token: 0x06001A6D RID: 6765 RVA: 0x00097B60 File Offset: 0x00095D60
		private Label PortStatusLabel
		{
			get
			{
				return base.FindControl<Label>("PortStatusLabel");
			}
		}

		// Token: 0x17000573 RID: 1395
		// (get) Token: 0x06001A6E RID: 6766 RVA: 0x00097B6D File Offset: 0x00095D6D
		private Label TankLabelLabel
		{
			get
			{
				return base.FindControl<Label>("TankLabelLabel");
			}
		}

		// Token: 0x17000574 RID: 1396
		// (get) Token: 0x06001A6F RID: 6767 RVA: 0x00097B7A File Offset: 0x00095D7A
		private Button TankEjectButton
		{
			get
			{
				return base.FindControl<Button>("TankEjectButton");
			}
		}

		// Token: 0x17000575 RID: 1397
		// (get) Token: 0x06001A70 RID: 6768 RVA: 0x00097B87 File Offset: 0x00095D87
		private Label TankPressureLabel
		{
			get
			{
				return base.FindControl<Label>("TankPressureLabel");
			}
		}

		// Token: 0x17000576 RID: 1398
		// (get) Token: 0x06001A71 RID: 6769 RVA: 0x00097B94 File Offset: 0x00095D94
		private Slider ReleasePressureSlider
		{
			get
			{
				return base.FindControl<Slider>("ReleasePressureSlider");
			}
		}

		// Token: 0x17000577 RID: 1399
		// (get) Token: 0x06001A72 RID: 6770 RVA: 0x00097BA1 File Offset: 0x00095DA1
		private FloatSpinBox ReleasePressure
		{
			get
			{
				return base.FindControl<FloatSpinBox>("ReleasePressure");
			}
		}

		// Token: 0x17000578 RID: 1400
		// (get) Token: 0x06001A73 RID: 6771 RVA: 0x00097BAE File Offset: 0x00095DAE
		private Button ReleaseValveOpenButton
		{
			get
			{
				return base.FindControl<Button>("ReleaseValveOpenButton");
			}
		}

		// Token: 0x17000579 RID: 1401
		// (get) Token: 0x06001A74 RID: 6772 RVA: 0x00097BBB File Offset: 0x00095DBB
		private Button ReleaseValveCloseButton
		{
			get
			{
				return base.FindControl<Button>("ReleaseValveCloseButton");
			}
		}

		// Token: 0x06001A78 RID: 6776 RVA: 0x00097C00 File Offset: 0x00095E00
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.Atmos.UI.GasCanisterWindow.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.MinSize = new Vector2(480f, 400f);
			A_1.Title = "Canister";
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			boxContainer.Margin = new Thickness(5f, 5f, 5f, 5f);
			boxContainer.SeparationOverride = new int?(10);
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 1;
			boxContainer2.VerticalExpand = true;
			Label label = new Label();
			label.Text = (string)new LocExtension("comp-gas-canister-ui-canister-status").ProvideValue();
			label.FontColorOverride = new Color?(StyleNano.NanoGold);
			string item = "LabelBig";
			label.StyleClasses.Add(item);
			Control control = label;
			boxContainer2.XamlChildren.Add(control);
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("comp-gas-canister-ui-canister-pressure").ProvideValue()
			};
			boxContainer3.XamlChildren.Add(control);
			Label label2 = new Label();
			label2.Name = "CanisterPressureLabel";
			control = label2;
			context.RobustNameScope.Register("CanisterPressureLabel", control);
			label2.Align = 1;
			label2.HorizontalExpand = true;
			control = label2;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer2.XamlChildren.Add(control);
			BoxContainer boxContainer4 = new BoxContainer();
			boxContainer4.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("comp-gas-canister-ui-port-status").ProvideValue()
			};
			boxContainer4.XamlChildren.Add(control);
			Label label3 = new Label();
			label3.Name = "PortStatusLabel";
			control = label3;
			context.RobustNameScope.Register("PortStatusLabel", control);
			label3.Align = 1;
			label3.HorizontalExpand = true;
			control = label3;
			boxContainer4.XamlChildren.Add(control);
			control = boxContainer4;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer5 = new BoxContainer();
			boxContainer5.Orientation = 1;
			boxContainer5.VerticalExpand = true;
			Label label4 = new Label();
			label4.Text = (string)new LocExtension("comp-gas-canister-ui-holding-tank-status").ProvideValue();
			label4.FontColorOverride = new Color?(StyleNano.NanoGold);
			item = "LabelBig";
			label4.StyleClasses.Add(item);
			control = label4;
			boxContainer5.XamlChildren.Add(control);
			BoxContainer boxContainer6 = new BoxContainer();
			boxContainer6.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("comp-gas-canister-ui-holding-tank-label").ProvideValue()
			};
			boxContainer6.XamlChildren.Add(control);
			Label label5 = new Label();
			label5.Name = "TankLabelLabel";
			control = label5;
			context.RobustNameScope.Register("TankLabelLabel", control);
			label5.Text = (string)new LocExtension("comp-gas-canister-ui-holding-tank-label-empty").ProvideValue();
			label5.Align = 1;
			label5.HorizontalExpand = true;
			control = label5;
			boxContainer6.XamlChildren.Add(control);
			Button button = new Button();
			button.Name = "TankEjectButton";
			control = button;
			context.RobustNameScope.Register("TankEjectButton", control);
			button.Text = (string)new LocExtension("comp-gas-canister-ui-holding-tank-eject").ProvideValue();
			control = button;
			boxContainer6.XamlChildren.Add(control);
			control = boxContainer6;
			boxContainer5.XamlChildren.Add(control);
			BoxContainer boxContainer7 = new BoxContainer();
			boxContainer7.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("comp-gas-canister-ui-holding-tank-pressure").ProvideValue()
			};
			boxContainer7.XamlChildren.Add(control);
			Label label6 = new Label();
			label6.Name = "TankPressureLabel";
			control = label6;
			context.RobustNameScope.Register("TankPressureLabel", control);
			label6.Align = 1;
			label6.HorizontalExpand = true;
			control = label6;
			boxContainer7.XamlChildren.Add(control);
			control = boxContainer7;
			boxContainer5.XamlChildren.Add(control);
			control = boxContainer5;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer8 = new BoxContainer();
			boxContainer8.Orientation = 1;
			boxContainer8.VerticalExpand = true;
			Label label7 = new Label();
			label7.Text = (string)new LocExtension("comp-gas-canister-ui-release-valve-status").ProvideValue();
			label7.FontColorOverride = new Color?(StyleNano.NanoGold);
			item = "LabelBig";
			label7.StyleClasses.Add(item);
			control = label7;
			boxContainer8.XamlChildren.Add(control);
			BoxContainer boxContainer9 = new BoxContainer();
			boxContainer9.Orientation = 0;
			BoxContainer boxContainer10 = new BoxContainer();
			boxContainer10.Orientation = 1;
			control = new Label
			{
				Text = (string)new LocExtension("comp-gas-canister-ui-release-pressure").ProvideValue()
			};
			boxContainer10.XamlChildren.Add(control);
			control = new Control
			{
				VerticalExpand = true
			};
			boxContainer10.XamlChildren.Add(control);
			control = boxContainer10;
			boxContainer9.XamlChildren.Add(control);
			BoxContainer boxContainer11 = new BoxContainer();
			boxContainer11.Orientation = 1;
			boxContainer11.HorizontalExpand = true;
			boxContainer11.Margin = new Thickness(15f, 0f, 0f, 15f);
			boxContainer11.SeparationOverride = new int?(5);
			Slider slider = new Slider();
			slider.Name = "ReleasePressureSlider";
			control = slider;
			context.RobustNameScope.Register("ReleasePressureSlider", control);
			slider.HorizontalExpand = true;
			control = slider;
			boxContainer11.XamlChildren.Add(control);
			FloatSpinBox floatSpinBox = new FloatSpinBox();
			floatSpinBox.Name = "ReleasePressure";
			control = floatSpinBox;
			context.RobustNameScope.Register("ReleasePressure", control);
			floatSpinBox.MaxWidth = 150f;
			floatSpinBox.Align = 1;
			control = floatSpinBox;
			boxContainer11.XamlChildren.Add(control);
			control = boxContainer11;
			boxContainer9.XamlChildren.Add(control);
			control = boxContainer9;
			boxContainer8.XamlChildren.Add(control);
			BoxContainer boxContainer12 = new BoxContainer();
			boxContainer12.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("comp-gas-canister-ui-release-valve").ProvideValue()
			};
			boxContainer12.XamlChildren.Add(control);
			control = new Control
			{
				HorizontalExpand = true
			};
			boxContainer12.XamlChildren.Add(control);
			Button button2 = new Button();
			button2.Name = "ReleaseValveOpenButton";
			control = button2;
			context.RobustNameScope.Register("ReleaseValveOpenButton", control);
			button2.Text = (string)new LocExtension("comp-gas-canister-ui-release-valve-open").ProvideValue();
			button2.ToggleMode = true;
			control = button2;
			boxContainer12.XamlChildren.Add(control);
			Button button3 = new Button();
			button3.Name = "ReleaseValveCloseButton";
			control = button3;
			context.RobustNameScope.Register("ReleaseValveCloseButton", control);
			button3.Text = (string)new LocExtension("comp-gas-canister-ui-release-valve-close").ProvideValue();
			button3.ToggleMode = true;
			control = button3;
			boxContainer12.XamlChildren.Add(control);
			control = new Control
			{
				HorizontalExpand = true
			};
			boxContainer12.XamlChildren.Add(control);
			control = boxContainer12;
			boxContainer8.XamlChildren.Add(control);
			control = boxContainer8;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06001A79 RID: 6777 RVA: 0x000984B1 File Offset: 0x000966B1
		private static void !XamlIlPopulateTrampoline(GasCanisterWindow A_0)
		{
			GasCanisterWindow.Populate:Content.Client.Atmos.UI.GasCanisterWindow.xaml(null, A_0);
		}

		// Token: 0x04000D60 RID: 3424
		[Nullable(1)]
		private readonly ButtonGroup _buttonGroup = new ButtonGroup();
	}
}
