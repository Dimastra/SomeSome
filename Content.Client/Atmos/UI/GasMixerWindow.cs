using System;
using System.Globalization;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.Localization;
using Robust.Shared.Maths;

namespace Content.Client.Atmos.UI
{
	// Token: 0x0200043B RID: 1083
	[GenerateTypedNameReferences]
	public sealed class GasMixerWindow : DefaultWindow
	{
		// Token: 0x140000A0 RID: 160
		// (add) Token: 0x06001AA3 RID: 6819 RVA: 0x000991CC File Offset: 0x000973CC
		// (remove) Token: 0x06001AA4 RID: 6820 RVA: 0x00099204 File Offset: 0x00097404
		[Nullable(2)]
		[method: NullableContext(2)]
		[Nullable(2)]
		public event Action ToggleStatusButtonPressed;

		// Token: 0x140000A1 RID: 161
		// (add) Token: 0x06001AA5 RID: 6821 RVA: 0x0009923C File Offset: 0x0009743C
		// (remove) Token: 0x06001AA6 RID: 6822 RVA: 0x00099274 File Offset: 0x00097474
		[Nullable(new byte[]
		{
			2,
			1
		})]
		[Nullable(new byte[]
		{
			2,
			1
		})]
		public event Action<string> MixerOutputPressureChanged;

		// Token: 0x140000A2 RID: 162
		// (add) Token: 0x06001AA7 RID: 6823 RVA: 0x000992AC File Offset: 0x000974AC
		// (remove) Token: 0x06001AA8 RID: 6824 RVA: 0x000992E4 File Offset: 0x000974E4
		[Nullable(new byte[]
		{
			2,
			1
		})]
		[Nullable(new byte[]
		{
			2,
			1
		})]
		public event Action<string> MixerNodePercentageChanged;

		// Token: 0x06001AA9 RID: 6825 RVA: 0x0009931C File Offset: 0x0009751C
		public GasMixerWindow()
		{
			GasMixerWindow.!XamlIlPopulateTrampoline(this);
			this.ToggleStatusButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this.SetMixerStatus(!this.MixerStatus);
			};
			this.ToggleStatusButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				Action toggleStatusButtonPressed = this.ToggleStatusButtonPressed;
				if (toggleStatusButtonPressed == null)
				{
					return;
				}
				toggleStatusButtonPressed();
			};
			this.MixerPressureOutputInput.OnTextChanged += delegate(LineEdit.LineEditEventArgs _)
			{
				this.SetOutputPressureButton.Disabled = false;
			};
			this.SetOutputPressureButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				Action<string> mixerOutputPressureChanged = this.MixerOutputPressureChanged;
				if (mixerOutputPressureChanged != null)
				{
					LineEdit mixerPressureOutputInput = this.MixerPressureOutputInput;
					string obj;
					if ((obj = mixerPressureOutputInput.Text) == null)
					{
						obj = (mixerPressureOutputInput.Text = "");
					}
					mixerOutputPressureChanged(obj);
				}
				this.SetOutputPressureButton.Disabled = true;
			};
			this.SetMaxPressureButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this.MixerPressureOutputInput.Text = 4500f.ToString(CultureInfo.InvariantCulture);
				this.SetOutputPressureButton.Disabled = false;
			};
			this.MixerNodeOneInput.OnTextChanged += delegate(LineEdit.LineEditEventArgs _)
			{
				this.SetMixerPercentageButton.Disabled = false;
				this.NodeOneLastEdited = true;
			};
			this.MixerNodeTwoInput.OnTextChanged += delegate(LineEdit.LineEditEventArgs _)
			{
				this.SetMixerPercentageButton.Disabled = false;
				this.NodeOneLastEdited = false;
			};
			this.SetMixerPercentageButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				Action<string> mixerNodePercentageChanged = this.MixerNodePercentageChanged;
				if (mixerNodePercentageChanged != null)
				{
					string obj;
					if (!this.NodeOneLastEdited)
					{
						LineEdit lineEdit = this.MixerNodeTwoInput;
						if ((obj = lineEdit.Text) == null)
						{
							obj = (lineEdit.Text = "");
						}
					}
					else
					{
						LineEdit lineEdit = this.MixerNodeOneInput;
						if ((obj = lineEdit.Text) == null)
						{
							obj = (lineEdit.Text = "");
						}
					}
					mixerNodePercentageChanged(obj);
				}
				this.SetMixerPercentageButton.Disabled = true;
			};
		}

		// Token: 0x06001AAA RID: 6826 RVA: 0x000993FB File Offset: 0x000975FB
		public void SetOutputPressure(float pressure)
		{
			this.MixerPressureOutputInput.Text = pressure.ToString(CultureInfo.InvariantCulture);
		}

		// Token: 0x06001AAB RID: 6827 RVA: 0x00099414 File Offset: 0x00097614
		public void SetNodePercentages(float nodeOne)
		{
			nodeOne *= 100f;
			this.MixerNodeOneInput.Text = nodeOne.ToString(CultureInfo.InvariantCulture);
			float num = 100f - nodeOne;
			this.MixerNodeTwoInput.Text = num.ToString(CultureInfo.InvariantCulture);
		}

		// Token: 0x06001AAC RID: 6828 RVA: 0x00099460 File Offset: 0x00097660
		public void SetMixerStatus(bool enabled)
		{
			this.MixerStatus = enabled;
			if (enabled)
			{
				this.ToggleStatusButton.Text = Loc.GetString("comp-gas-mixer-ui-status-enabled");
				return;
			}
			this.ToggleStatusButton.Text = Loc.GetString("comp-gas-mixer-ui-status-disabled");
		}

		// Token: 0x17000580 RID: 1408
		// (get) Token: 0x06001AAD RID: 6829 RVA: 0x00098ADF File Offset: 0x00096CDF
		private Button ToggleStatusButton
		{
			get
			{
				return base.FindControl<Button>("ToggleStatusButton");
			}
		}

		// Token: 0x17000581 RID: 1409
		// (get) Token: 0x06001AAE RID: 6830 RVA: 0x00099497 File Offset: 0x00097697
		private LineEdit MixerPressureOutputInput
		{
			get
			{
				return base.FindControl<LineEdit>("MixerPressureOutputInput");
			}
		}

		// Token: 0x17000582 RID: 1410
		// (get) Token: 0x06001AAF RID: 6831 RVA: 0x000994A4 File Offset: 0x000976A4
		private Button SetMaxPressureButton
		{
			get
			{
				return base.FindControl<Button>("SetMaxPressureButton");
			}
		}

		// Token: 0x17000583 RID: 1411
		// (get) Token: 0x06001AB0 RID: 6832 RVA: 0x000994B1 File Offset: 0x000976B1
		private Button SetOutputPressureButton
		{
			get
			{
				return base.FindControl<Button>("SetOutputPressureButton");
			}
		}

		// Token: 0x17000584 RID: 1412
		// (get) Token: 0x06001AB1 RID: 6833 RVA: 0x000994BE File Offset: 0x000976BE
		private LineEdit MixerNodeOneInput
		{
			get
			{
				return base.FindControl<LineEdit>("MixerNodeOneInput");
			}
		}

		// Token: 0x17000585 RID: 1413
		// (get) Token: 0x06001AB2 RID: 6834 RVA: 0x000994CB File Offset: 0x000976CB
		private LineEdit MixerNodeTwoInput
		{
			get
			{
				return base.FindControl<LineEdit>("MixerNodeTwoInput");
			}
		}

		// Token: 0x17000586 RID: 1414
		// (get) Token: 0x06001AB3 RID: 6835 RVA: 0x000994D8 File Offset: 0x000976D8
		private Button SetMixerPercentageButton
		{
			get
			{
				return base.FindControl<Button>("SetMixerPercentageButton");
			}
		}

		// Token: 0x06001ABC RID: 6844 RVA: 0x00099638 File Offset: 0x00097838
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.Atmos.UI.GasMixerWindow.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.MinSize = new Vector2(200f, 200f);
			A_1.Title = "Gas Mixer";
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			boxContainer.Margin = new Thickness(5f, 5f, 5f, 5f);
			boxContainer.SeparationOverride = new int?(10);
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 0;
			boxContainer2.HorizontalExpand = true;
			Control control = new Label
			{
				Text = (string)new LocExtension("comp-gas-mixer-ui-mixer-status").ProvideValue()
			};
			boxContainer2.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(5f, 0f)
			};
			boxContainer2.XamlChildren.Add(control);
			Button button = new Button();
			button.Name = "ToggleStatusButton";
			control = button;
			context.RobustNameScope.Register("ToggleStatusButton", control);
			control = button;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 0;
			boxContainer3.HorizontalExpand = true;
			control = new Label
			{
				Text = (string)new LocExtension("comp-gas-mixer-ui-mixer-output-pressure").ProvideValue()
			};
			boxContainer3.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(5f, 0f)
			};
			boxContainer3.XamlChildren.Add(control);
			LineEdit lineEdit = new LineEdit();
			lineEdit.Name = "MixerPressureOutputInput";
			control = lineEdit;
			context.RobustNameScope.Register("MixerPressureOutputInput", control);
			lineEdit.MinSize = new Vector2(60f, 0f);
			control = lineEdit;
			boxContainer3.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(5f, 0f)
			};
			boxContainer3.XamlChildren.Add(control);
			Button button2 = new Button();
			button2.Name = "SetMaxPressureButton";
			control = button2;
			context.RobustNameScope.Register("SetMaxPressureButton", control);
			button2.Text = (string)new LocExtension("comp-gas-mixer-ui-mixer-max").ProvideValue();
			control = button2;
			boxContainer3.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(5f, 0f)
			};
			boxContainer3.XamlChildren.Add(control);
			control = new Control
			{
				HorizontalExpand = true
			};
			boxContainer3.XamlChildren.Add(control);
			Button button3 = new Button();
			button3.Name = "SetOutputPressureButton";
			control = button3;
			context.RobustNameScope.Register("SetOutputPressureButton", control);
			button3.Text = (string)new LocExtension("comp-gas-mixer-ui-mixer-set").ProvideValue();
			button3.HorizontalAlignment = 3;
			button3.Disabled = true;
			control = button3;
			boxContainer3.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(0f, 5f)
			};
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer4 = new BoxContainer();
			boxContainer4.Orientation = 0;
			boxContainer4.HorizontalExpand = true;
			control = new Control
			{
				MinSize = new Vector2(0f, 5f)
			};
			boxContainer4.XamlChildren.Add(control);
			control = new Label
			{
				Text = (string)new LocExtension("comp-gas-mixer-ui-mixer-node-primary").ProvideValue()
			};
			boxContainer4.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(5f, 0f)
			};
			boxContainer4.XamlChildren.Add(control);
			LineEdit lineEdit2 = new LineEdit();
			lineEdit2.Name = "MixerNodeOneInput";
			control = lineEdit2;
			context.RobustNameScope.Register("MixerNodeOneInput", control);
			lineEdit2.MinSize = new Vector2(60f, 0f);
			control = lineEdit2;
			boxContainer4.XamlChildren.Add(control);
			control = new Label
			{
				Text = " %"
			};
			boxContainer4.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(5f, 0f)
			};
			boxContainer4.XamlChildren.Add(control);
			control = new Label
			{
				Text = (string)new LocExtension("comp-gas-mixer-ui-mixer-node-side").ProvideValue()
			};
			boxContainer4.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(5f, 0f)
			};
			boxContainer4.XamlChildren.Add(control);
			LineEdit lineEdit3 = new LineEdit();
			lineEdit3.Name = "MixerNodeTwoInput";
			control = lineEdit3;
			context.RobustNameScope.Register("MixerNodeTwoInput", control);
			lineEdit3.MinSize = new Vector2(60f, 0f);
			control = lineEdit3;
			boxContainer4.XamlChildren.Add(control);
			control = new Label
			{
				Text = " %"
			};
			boxContainer4.XamlChildren.Add(control);
			control = boxContainer4;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer5 = new BoxContainer();
			boxContainer5.Orientation = 0;
			boxContainer5.HorizontalExpand = true;
			Button button4 = new Button();
			button4.Name = "SetMixerPercentageButton";
			control = button4;
			context.RobustNameScope.Register("SetMixerPercentageButton", control);
			button4.Text = (string)new LocExtension("comp-gas-mixer-ui-mixer-set").ProvideValue();
			button4.HorizontalAlignment = 3;
			button4.Disabled = true;
			control = button4;
			boxContainer5.XamlChildren.Add(control);
			control = boxContainer5;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06001ABD RID: 6845 RVA: 0x00099D20 File Offset: 0x00097F20
		private static void !XamlIlPopulateTrampoline(GasMixerWindow A_0)
		{
			GasMixerWindow.Populate:Content.Client.Atmos.UI.GasMixerWindow.xaml(null, A_0);
		}

		// Token: 0x04000D70 RID: 3440
		public bool MixerStatus = true;

		// Token: 0x04000D74 RID: 3444
		public bool NodeOneLastEdited = true;
	}
}
