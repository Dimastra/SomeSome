using System;
using System.Globalization;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.Localization;
using Robust.Shared.Maths;

namespace Content.Client.Atmos.UI
{
	// Token: 0x02000441 RID: 1089
	[GenerateTypedNameReferences]
	public sealed class GasVolumePumpWindow : DefaultWindow
	{
		// Token: 0x140000A5 RID: 165
		// (add) Token: 0x06001AEC RID: 6892 RVA: 0x0009AB78 File Offset: 0x00098D78
		// (remove) Token: 0x06001AED RID: 6893 RVA: 0x0009ABB0 File Offset: 0x00098DB0
		[Nullable(2)]
		[method: NullableContext(2)]
		[Nullable(2)]
		public event Action ToggleStatusButtonPressed;

		// Token: 0x140000A6 RID: 166
		// (add) Token: 0x06001AEE RID: 6894 RVA: 0x0009ABE8 File Offset: 0x00098DE8
		// (remove) Token: 0x06001AEF RID: 6895 RVA: 0x0009AC20 File Offset: 0x00098E20
		[Nullable(new byte[]
		{
			2,
			1
		})]
		[Nullable(new byte[]
		{
			2,
			1
		})]
		public event Action<string> PumpTransferRateChanged;

		// Token: 0x06001AF0 RID: 6896 RVA: 0x0009AC58 File Offset: 0x00098E58
		public GasVolumePumpWindow()
		{
			GasVolumePumpWindow.!XamlIlPopulateTrampoline(this);
			this.ToggleStatusButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this.SetPumpStatus(!this.PumpStatus);
			};
			this.ToggleStatusButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				Action toggleStatusButtonPressed = this.ToggleStatusButtonPressed;
				if (toggleStatusButtonPressed == null)
				{
					return;
				}
				toggleStatusButtonPressed();
			};
			this.PumpTransferRateInput.OnTextChanged += delegate(LineEdit.LineEditEventArgs _)
			{
				this.SetTransferRateButton.Disabled = false;
			};
			this.SetTransferRateButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				Action<string> pumpTransferRateChanged = this.PumpTransferRateChanged;
				if (pumpTransferRateChanged != null)
				{
					LineEdit pumpTransferRateInput = this.PumpTransferRateInput;
					string obj;
					if ((obj = pumpTransferRateInput.Text) == null)
					{
						obj = (pumpTransferRateInput.Text = "");
					}
					pumpTransferRateChanged(obj);
				}
				this.SetTransferRateButton.Disabled = true;
			};
			this.SetMaxRateButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this.PumpTransferRateInput.Text = 200f.ToString(CultureInfo.InvariantCulture);
				this.SetTransferRateButton.Disabled = false;
			};
		}

		// Token: 0x06001AF1 RID: 6897 RVA: 0x0009ACEB File Offset: 0x00098EEB
		public void SetTransferRate(float rate)
		{
			this.PumpTransferRateInput.Text = rate.ToString(CultureInfo.InvariantCulture);
		}

		// Token: 0x06001AF2 RID: 6898 RVA: 0x0009AD04 File Offset: 0x00098F04
		public void SetPumpStatus(bool enabled)
		{
			this.PumpStatus = enabled;
			if (enabled)
			{
				this.ToggleStatusButton.Text = Loc.GetString("comp-gas-pump-ui-status-enabled");
				return;
			}
			this.ToggleStatusButton.Text = Loc.GetString("comp-gas-pump-ui-status-disabled");
		}

		// Token: 0x1700058E RID: 1422
		// (get) Token: 0x06001AF3 RID: 6899 RVA: 0x00098ADF File Offset: 0x00096CDF
		private Button ToggleStatusButton
		{
			get
			{
				return base.FindControl<Button>("ToggleStatusButton");
			}
		}

		// Token: 0x1700058F RID: 1423
		// (get) Token: 0x06001AF4 RID: 6900 RVA: 0x0009AD3B File Offset: 0x00098F3B
		private LineEdit PumpTransferRateInput
		{
			get
			{
				return base.FindControl<LineEdit>("PumpTransferRateInput");
			}
		}

		// Token: 0x17000590 RID: 1424
		// (get) Token: 0x06001AF5 RID: 6901 RVA: 0x0009AD48 File Offset: 0x00098F48
		private Button SetMaxRateButton
		{
			get
			{
				return base.FindControl<Button>("SetMaxRateButton");
			}
		}

		// Token: 0x17000591 RID: 1425
		// (get) Token: 0x06001AF6 RID: 6902 RVA: 0x0009AD55 File Offset: 0x00098F55
		private Button SetTransferRateButton
		{
			get
			{
				return base.FindControl<Button>("SetTransferRateButton");
			}
		}

		// Token: 0x06001AFC RID: 6908 RVA: 0x0009AE18 File Offset: 0x00099018
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.Atmos.UI.GasVolumePumpWindow.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.MinSize = new Vector2(200f, 120f);
			A_1.Title = "Volume Pump";
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			boxContainer.Margin = new Thickness(5f, 5f, 5f, 5f);
			boxContainer.SeparationOverride = new int?(10);
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 0;
			boxContainer2.HorizontalExpand = true;
			Control control = new Label
			{
				Text = (string)new LocExtension("comp-gas-pump-ui-pump-status").ProvideValue()
			};
			boxContainer2.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(5f, 0f)
			};
			boxContainer2.XamlChildren.Add(control);
			Button button = new Button();
			button.Name = "ToggleStatusButton";
			control = button;
			context.RobustNameScope.Register("ToggleStatusButton", control);
			control = button;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 0;
			boxContainer3.HorizontalExpand = true;
			control = new Label
			{
				Text = (string)new LocExtension("comp-gas-pump-ui-pump-transfer-rate").ProvideValue()
			};
			boxContainer3.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(5f, 0f)
			};
			boxContainer3.XamlChildren.Add(control);
			LineEdit lineEdit = new LineEdit();
			lineEdit.Name = "PumpTransferRateInput";
			control = lineEdit;
			context.RobustNameScope.Register("PumpTransferRateInput", control);
			lineEdit.MinSize = new Vector2(60f, 0f);
			control = lineEdit;
			boxContainer3.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(5f, 0f)
			};
			boxContainer3.XamlChildren.Add(control);
			Button button2 = new Button();
			button2.Name = "SetMaxRateButton";
			control = button2;
			context.RobustNameScope.Register("SetMaxRateButton", control);
			button2.Text = (string)new LocExtension("comp-gas-pump-ui-pump-set-max").ProvideValue();
			control = button2;
			boxContainer3.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(5f, 0f)
			};
			boxContainer3.XamlChildren.Add(control);
			control = new Control
			{
				HorizontalExpand = true
			};
			boxContainer3.XamlChildren.Add(control);
			Button button3 = new Button();
			button3.Name = "SetTransferRateButton";
			control = button3;
			context.RobustNameScope.Register("SetTransferRateButton", control);
			button3.Text = (string)new LocExtension("comp-gas-pump-ui-pump-set-rate").ProvideValue();
			button3.HorizontalAlignment = 3;
			button3.Disabled = true;
			control = button3;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06001AFD RID: 6909 RVA: 0x0009B1FC File Offset: 0x000993FC
		private static void !XamlIlPopulateTrampoline(GasVolumePumpWindow A_0)
		{
			GasVolumePumpWindow.Populate:Content.Client.Atmos.UI.GasVolumePumpWindow.xaml(null, A_0);
		}

		// Token: 0x04000D81 RID: 3457
		public bool PumpStatus = true;
	}
}
