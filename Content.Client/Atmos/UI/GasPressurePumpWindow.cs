using System;
using System.Globalization;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.Localization;
using Robust.Shared.Maths;

namespace Content.Client.Atmos.UI
{
	// Token: 0x0200043D RID: 1085
	[GenerateTypedNameReferences]
	public sealed class GasPressurePumpWindow : DefaultWindow
	{
		// Token: 0x140000A3 RID: 163
		// (add) Token: 0x06001AC4 RID: 6852 RVA: 0x00099E84 File Offset: 0x00098084
		// (remove) Token: 0x06001AC5 RID: 6853 RVA: 0x00099EBC File Offset: 0x000980BC
		[Nullable(2)]
		[method: NullableContext(2)]
		[Nullable(2)]
		public event Action ToggleStatusButtonPressed;

		// Token: 0x140000A4 RID: 164
		// (add) Token: 0x06001AC6 RID: 6854 RVA: 0x00099EF4 File Offset: 0x000980F4
		// (remove) Token: 0x06001AC7 RID: 6855 RVA: 0x00099F2C File Offset: 0x0009812C
		[Nullable(new byte[]
		{
			2,
			1
		})]
		[Nullable(new byte[]
		{
			2,
			1
		})]
		public event Action<string> PumpOutputPressureChanged;

		// Token: 0x06001AC8 RID: 6856 RVA: 0x00099F64 File Offset: 0x00098164
		public GasPressurePumpWindow()
		{
			GasPressurePumpWindow.!XamlIlPopulateTrampoline(this);
			this.ToggleStatusButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this.SetPumpStatus(!this.PumpStatus);
			};
			this.ToggleStatusButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				Action toggleStatusButtonPressed = this.ToggleStatusButtonPressed;
				if (toggleStatusButtonPressed == null)
				{
					return;
				}
				toggleStatusButtonPressed();
			};
			this.PumpPressureOutputInput.OnTextChanged += delegate(LineEdit.LineEditEventArgs _)
			{
				this.SetOutputPressureButton.Disabled = false;
			};
			this.SetOutputPressureButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				Action<string> pumpOutputPressureChanged = this.PumpOutputPressureChanged;
				if (pumpOutputPressureChanged != null)
				{
					LineEdit pumpPressureOutputInput = this.PumpPressureOutputInput;
					string obj;
					if ((obj = pumpPressureOutputInput.Text) == null)
					{
						obj = (pumpPressureOutputInput.Text = "");
					}
					pumpOutputPressureChanged(obj);
				}
				this.SetOutputPressureButton.Disabled = true;
			};
			this.SetMaxPressureButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this.PumpPressureOutputInput.Text = 4500f.ToString(CultureInfo.InvariantCulture);
				this.SetOutputPressureButton.Disabled = false;
			};
		}

		// Token: 0x06001AC9 RID: 6857 RVA: 0x00099FF7 File Offset: 0x000981F7
		public void SetOutputPressure(float pressure)
		{
			this.PumpPressureOutputInput.Text = pressure.ToString(CultureInfo.InvariantCulture);
		}

		// Token: 0x06001ACA RID: 6858 RVA: 0x0009A010 File Offset: 0x00098210
		public void SetPumpStatus(bool enabled)
		{
			this.PumpStatus = enabled;
			if (enabled)
			{
				this.ToggleStatusButton.Text = Loc.GetString("comp-gas-pump-ui-status-enabled");
				return;
			}
			this.ToggleStatusButton.Text = Loc.GetString("comp-gas-pump-ui-status-disabled");
		}

		// Token: 0x17000587 RID: 1415
		// (get) Token: 0x06001ACB RID: 6859 RVA: 0x00098ADF File Offset: 0x00096CDF
		private Button ToggleStatusButton
		{
			get
			{
				return base.FindControl<Button>("ToggleStatusButton");
			}
		}

		// Token: 0x17000588 RID: 1416
		// (get) Token: 0x06001ACC RID: 6860 RVA: 0x0009A047 File Offset: 0x00098247
		private LineEdit PumpPressureOutputInput
		{
			get
			{
				return base.FindControl<LineEdit>("PumpPressureOutputInput");
			}
		}

		// Token: 0x17000589 RID: 1417
		// (get) Token: 0x06001ACD RID: 6861 RVA: 0x000994A4 File Offset: 0x000976A4
		private Button SetMaxPressureButton
		{
			get
			{
				return base.FindControl<Button>("SetMaxPressureButton");
			}
		}

		// Token: 0x1700058A RID: 1418
		// (get) Token: 0x06001ACE RID: 6862 RVA: 0x000994B1 File Offset: 0x000976B1
		private Button SetOutputPressureButton
		{
			get
			{
				return base.FindControl<Button>("SetOutputPressureButton");
			}
		}

		// Token: 0x06001AD4 RID: 6868 RVA: 0x0009A10C File Offset: 0x0009830C
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.Atmos.UI.GasPressurePumpWindow.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.MinSize = new Vector2(200f, 120f);
			A_1.Title = "Pressure Pump";
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			boxContainer.Margin = new Thickness(5f, 5f, 5f, 5f);
			boxContainer.SeparationOverride = new int?(10);
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 0;
			boxContainer2.HorizontalExpand = true;
			Control control = new Label
			{
				Text = (string)new LocExtension("comp-gas-pump-ui-pump-status").ProvideValue()
			};
			boxContainer2.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(5f, 0f)
			};
			boxContainer2.XamlChildren.Add(control);
			Button button = new Button();
			button.Name = "ToggleStatusButton";
			control = button;
			context.RobustNameScope.Register("ToggleStatusButton", control);
			control = button;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 0;
			boxContainer3.HorizontalExpand = true;
			control = new Label
			{
				Text = (string)new LocExtension("comp-gas-pump-ui-pump-output-pressure").ProvideValue()
			};
			boxContainer3.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(5f, 0f)
			};
			boxContainer3.XamlChildren.Add(control);
			LineEdit lineEdit = new LineEdit();
			lineEdit.Name = "PumpPressureOutputInput";
			control = lineEdit;
			context.RobustNameScope.Register("PumpPressureOutputInput", control);
			lineEdit.MinSize = new Vector2(60f, 0f);
			control = lineEdit;
			boxContainer3.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(5f, 0f)
			};
			boxContainer3.XamlChildren.Add(control);
			Button button2 = new Button();
			button2.Name = "SetMaxPressureButton";
			control = button2;
			context.RobustNameScope.Register("SetMaxPressureButton", control);
			button2.Text = (string)new LocExtension("comp-gas-pump-ui-pump-set-max").ProvideValue();
			control = button2;
			boxContainer3.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(5f, 0f)
			};
			boxContainer3.XamlChildren.Add(control);
			control = new Control
			{
				HorizontalExpand = true
			};
			boxContainer3.XamlChildren.Add(control);
			Button button3 = new Button();
			button3.Name = "SetOutputPressureButton";
			control = button3;
			context.RobustNameScope.Register("SetOutputPressureButton", control);
			button3.Text = (string)new LocExtension("comp-gas-pump-ui-pump-set-rate").ProvideValue();
			button3.HorizontalAlignment = 3;
			button3.Disabled = true;
			control = button3;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06001AD5 RID: 6869 RVA: 0x0009A4F0 File Offset: 0x000986F0
		private static void !XamlIlPopulateTrampoline(GasPressurePumpWindow A_0)
		{
			GasPressurePumpWindow.Populate:Content.Client.Atmos.UI.GasPressurePumpWindow.xaml(null, A_0);
		}

		// Token: 0x04000D77 RID: 3447
		public bool PumpStatus = true;
	}
}
