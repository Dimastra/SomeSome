using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.Atmos.Monitor.UI.Widgets;
using Content.Client.Message;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Atmos;
using Content.Shared.Atmos.Monitor;
using Content.Shared.Atmos.Monitor.Components;
using Content.Shared.Atmos.Piping.Unary.Components;
using Content.Shared.Temperature;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;

namespace Content.Client.Atmos.Monitor.UI
{
	// Token: 0x0200044A RID: 1098
	[NullableContext(1)]
	[Nullable(0)]
	[GenerateTypedNameReferences]
	public sealed class AirAlarmWindow : FancyWindow
	{
		// Token: 0x140000A7 RID: 167
		// (add) Token: 0x06001B14 RID: 6932 RVA: 0x0009C21C File Offset: 0x0009A41C
		// (remove) Token: 0x06001B15 RID: 6933 RVA: 0x0009C254 File Offset: 0x0009A454
		[Nullable(new byte[]
		{
			2,
			1,
			1
		})]
		[Nullable(new byte[]
		{
			2,
			1,
			1
		})]
		public event Action<string, IAtmosDeviceData> AtmosDeviceDataChanged;

		// Token: 0x140000A8 RID: 168
		// (add) Token: 0x06001B16 RID: 6934 RVA: 0x0009C28C File Offset: 0x0009A48C
		// (remove) Token: 0x06001B17 RID: 6935 RVA: 0x0009C2C4 File Offset: 0x0009A4C4
		[Nullable(new byte[]
		{
			2,
			1,
			1
		})]
		[Nullable(new byte[]
		{
			2,
			1,
			1
		})]
		public event Action<string, AtmosMonitorThresholdType, AtmosAlarmThreshold, Gas?> AtmosAlarmThresholdChanged;

		// Token: 0x140000A9 RID: 169
		// (add) Token: 0x06001B18 RID: 6936 RVA: 0x0009C2FC File Offset: 0x0009A4FC
		// (remove) Token: 0x06001B19 RID: 6937 RVA: 0x0009C334 File Offset: 0x0009A534
		[Nullable(2)]
		[method: NullableContext(2)]
		[Nullable(2)]
		public event Action<AirAlarmMode> AirAlarmModeChanged;

		// Token: 0x140000AA RID: 170
		// (add) Token: 0x06001B1A RID: 6938 RVA: 0x0009C36C File Offset: 0x0009A56C
		// (remove) Token: 0x06001B1B RID: 6939 RVA: 0x0009C3A4 File Offset: 0x0009A5A4
		[Nullable(new byte[]
		{
			2,
			1
		})]
		[Nullable(new byte[]
		{
			2,
			1
		})]
		public event Action<string> ResyncDeviceRequested;

		// Token: 0x140000AB RID: 171
		// (add) Token: 0x06001B1C RID: 6940 RVA: 0x0009C3DC File Offset: 0x0009A5DC
		// (remove) Token: 0x06001B1D RID: 6941 RVA: 0x0009C414 File Offset: 0x0009A614
		[Nullable(2)]
		[method: NullableContext(2)]
		[Nullable(2)]
		public event Action ResyncAllRequested;

		// Token: 0x140000AC RID: 172
		// (add) Token: 0x06001B1E RID: 6942 RVA: 0x0009C44C File Offset: 0x0009A64C
		// (remove) Token: 0x06001B1F RID: 6943 RVA: 0x0009C484 File Offset: 0x0009A684
		[Nullable(2)]
		[method: NullableContext(2)]
		[Nullable(2)]
		public event Action<AirAlarmTab> AirAlarmTabChange;

		// Token: 0x17000595 RID: 1429
		// (get) Token: 0x06001B20 RID: 6944 RVA: 0x0009C4B9 File Offset: 0x0009A6B9
		private RichTextLabel _address
		{
			get
			{
				return this.CDeviceAddress;
			}
		}

		// Token: 0x17000596 RID: 1430
		// (get) Token: 0x06001B21 RID: 6945 RVA: 0x0009C4C1 File Offset: 0x0009A6C1
		private RichTextLabel _deviceTotal
		{
			get
			{
				return this.CDeviceTotal;
			}
		}

		// Token: 0x17000597 RID: 1431
		// (get) Token: 0x06001B22 RID: 6946 RVA: 0x0009C4C9 File Offset: 0x0009A6C9
		private RichTextLabel _pressure
		{
			get
			{
				return this.CPressureLabel;
			}
		}

		// Token: 0x17000598 RID: 1432
		// (get) Token: 0x06001B23 RID: 6947 RVA: 0x0009C4D1 File Offset: 0x0009A6D1
		private RichTextLabel _temperature
		{
			get
			{
				return this.CTemperatureLabel;
			}
		}

		// Token: 0x17000599 RID: 1433
		// (get) Token: 0x06001B24 RID: 6948 RVA: 0x0009C4D9 File Offset: 0x0009A6D9
		private RichTextLabel _alarmState
		{
			get
			{
				return this.CStatusLabel;
			}
		}

		// Token: 0x1700059A RID: 1434
		// (get) Token: 0x06001B25 RID: 6949 RVA: 0x0009C4E1 File Offset: 0x0009A6E1
		private TabContainer _tabContainer
		{
			get
			{
				return this.CTabContainer;
			}
		}

		// Token: 0x1700059B RID: 1435
		// (get) Token: 0x06001B26 RID: 6950 RVA: 0x0009C4E9 File Offset: 0x0009A6E9
		private BoxContainer _ventDevices
		{
			get
			{
				return this.CVentContainer;
			}
		}

		// Token: 0x1700059C RID: 1436
		// (get) Token: 0x06001B27 RID: 6951 RVA: 0x0009C4F1 File Offset: 0x0009A6F1
		private BoxContainer _scrubberDevices
		{
			get
			{
				return this.CScrubberContainer;
			}
		}

		// Token: 0x1700059D RID: 1437
		// (get) Token: 0x06001B28 RID: 6952 RVA: 0x0009C4F9 File Offset: 0x0009A6F9
		private Button _resyncDevices
		{
			get
			{
				return this.CResyncButton;
			}
		}

		// Token: 0x1700059E RID: 1438
		// (get) Token: 0x06001B29 RID: 6953 RVA: 0x0009C501 File Offset: 0x0009A701
		private OptionButton _modes
		{
			get
			{
				return this.CModeButton;
			}
		}

		// Token: 0x06001B2A RID: 6954 RVA: 0x0009C50C File Offset: 0x0009A70C
		public AirAlarmWindow(ClientUserInterfaceComponent component)
		{
			AirAlarmWindow.!XamlIlPopulateTrampoline(this);
			AirAlarmMode[] values = Enum.GetValues<AirAlarmMode>();
			for (int i = 0; i < values.Length; i++)
			{
				string text;
				switch (values[i])
				{
				case AirAlarmMode.None:
					text = "air-alarm-ui-mode-none";
					break;
				case AirAlarmMode.Filtering:
					text = "air-alarm-ui-mode-filtering";
					break;
				case AirAlarmMode.WideFiltering:
					text = "air-alarm-ui-mode-wide-filtering";
					break;
				case AirAlarmMode.Fill:
					text = "air-alarm-ui-mode-fill";
					break;
				case AirAlarmMode.Panic:
					text = "air-alarm-ui-mode-panic";
					break;
				default:
					text = "error";
					break;
				}
				string text2 = text;
				this._modes.AddItem(Loc.GetString(text2), null);
			}
			this._modes.OnItemSelected += delegate(OptionButton.ItemSelectedEventArgs args)
			{
				this._modes.SelectId(args.Id);
				this.AirAlarmModeChanged((AirAlarmMode)args.Id);
			};
			this._tabContainer.SetTabTitle(0, Loc.GetString("air-alarm-ui-window-tab-vents"));
			this._tabContainer.SetTabTitle(1, Loc.GetString("air-alarm-ui-window-tab-scrubbers"));
			this._tabContainer.SetTabTitle(2, Loc.GetString("air-alarm-ui-window-tab-sensors"));
			this._tabContainer.OnTabChanged += delegate(int idx)
			{
				this.AirAlarmTabChange((AirAlarmTab)idx);
			};
			this._resyncDevices.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this._ventDevices.RemoveAllChildren();
				this._pumps.Clear();
				this._scrubberDevices.RemoveAllChildren();
				this._scrubbers.Clear();
				this.CSensorContainer.RemoveAllChildren();
				this._sensors.Clear();
				this.ResyncAllRequested();
			};
			this.EntityView.Sprite = IoCManager.Resolve<IEntityManager>().GetComponent<SpriteComponent>(component.Owner);
		}

		// Token: 0x06001B2B RID: 6955 RVA: 0x0009C67C File Offset: 0x0009A87C
		public void UpdateState(AirAlarmUIState state)
		{
			this._address.SetMarkup(state.Address);
			RichTextLabel deviceTotal = this._deviceTotal;
			DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(0, 1);
			defaultInterpolatedStringHandler.AppendFormatted<int>(state.DeviceCount);
			deviceTotal.SetMarkup(defaultInterpolatedStringHandler.ToStringAndClear());
			RichTextLabel pressure = this._pressure;
			string text = "air-alarm-ui-window-pressure";
			ValueTuple<string, object>[] array = new ValueTuple<string, object>[1];
			int num = 0;
			string item = "pressure";
			defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(0, 1);
			defaultInterpolatedStringHandler.AppendFormatted<float>(state.PressureAverage, "0.##");
			array[num] = new ValueTuple<string, object>(item, defaultInterpolatedStringHandler.ToStringAndClear());
			pressure.SetMarkup(Loc.GetString(text, array));
			RichTextLabel temperature = this._temperature;
			string text2 = "air-alarm-ui-window-temperature";
			ValueTuple<string, object>[] array2 = new ValueTuple<string, object>[2];
			int num2 = 0;
			string item2 = "tempC";
			defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(0, 1);
			defaultInterpolatedStringHandler.AppendFormatted<float>(TemperatureHelpers.KelvinToCelsius(state.TemperatureAverage), "0.#");
			array2[num2] = new ValueTuple<string, object>(item2, defaultInterpolatedStringHandler.ToStringAndClear());
			int num3 = 1;
			string item3 = "temperature";
			defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(0, 1);
			defaultInterpolatedStringHandler.AppendFormatted<float>(state.TemperatureAverage, "0.##");
			array2[num3] = new ValueTuple<string, object>(item3, defaultInterpolatedStringHandler.ToStringAndClear());
			temperature.SetMarkup(Loc.GetString(text2, array2));
			RichTextLabel alarmState = this._alarmState;
			string text3 = "air-alarm-ui-window-alarm-state";
			ValueTuple<string, object>[] array3 = new ValueTuple<string, object>[2];
			array3[0] = new ValueTuple<string, object>("color", AirAlarmWindow.ColorForAlarm(state.AlarmType));
			int num4 = 1;
			string item4 = "state";
			defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(0, 1);
			defaultInterpolatedStringHandler.AppendFormatted<AtmosAlarmType>(state.AlarmType);
			array3[num4] = new ValueTuple<string, object>(item4, defaultInterpolatedStringHandler.ToStringAndClear());
			alarmState.SetMarkup(Loc.GetString(text3, array3));
			this.UpdateModeSelector(state.Mode);
			foreach (KeyValuePair<string, IAtmosDeviceData> keyValuePair in state.DeviceData)
			{
				string text4;
				IAtmosDeviceData atmosDeviceData;
				keyValuePair.Deconstruct(out text4, out atmosDeviceData);
				string addr = text4;
				IAtmosDeviceData device = atmosDeviceData;
				this.UpdateDeviceData(addr, device);
			}
			this._tabContainer.CurrentTab = (int)state.Tab;
		}

		// Token: 0x06001B2C RID: 6956 RVA: 0x0009C878 File Offset: 0x0009AA78
		public void UpdateModeSelector(AirAlarmMode mode)
		{
			this._modes.SelectId((int)mode);
		}

		// Token: 0x06001B2D RID: 6957 RVA: 0x0009C888 File Offset: 0x0009AA88
		public void UpdateDeviceData(string addr, IAtmosDeviceData device)
		{
			GasVentPumpData gasVentPumpData = device as GasVentPumpData;
			if (gasVentPumpData == null)
			{
				GasVentScrubberData gasVentScrubberData = device as GasVentScrubberData;
				if (gasVentScrubberData == null)
				{
					AtmosSensorData atmosSensorData = device as AtmosSensorData;
					if (atmosSensorData == null)
					{
						return;
					}
					SensorInfo sensorInfo;
					if (!this._sensors.TryGetValue(addr, out sensorInfo))
					{
						SensorInfo sensorInfo2 = new SensorInfo(atmosSensorData, addr);
						SensorInfo sensorInfo3 = sensorInfo2;
						sensorInfo3.OnThresholdUpdate = (Action<string, AtmosMonitorThresholdType, AtmosAlarmThreshold, Gas?>)Delegate.Combine(sensorInfo3.OnThresholdUpdate, this.AtmosAlarmThresholdChanged);
						this._sensors.Add(addr, sensorInfo2);
						this.CSensorContainer.AddChild(sensorInfo2);
						return;
					}
					sensorInfo.ChangeData(atmosSensorData);
					return;
				}
				else
				{
					ScrubberControl scrubberControl;
					if (!this._scrubbers.TryGetValue(addr, out scrubberControl))
					{
						ScrubberControl scrubberControl2 = new ScrubberControl(gasVentScrubberData, addr);
						scrubberControl2.ScrubberDataChanged += this.AtmosDeviceDataChanged.Invoke;
						this._scrubbers.Add(addr, scrubberControl2);
						this.CScrubberContainer.AddChild(scrubberControl2);
						return;
					}
					scrubberControl.ChangeData(gasVentScrubberData);
					return;
				}
			}
			else
			{
				PumpControl pumpControl;
				if (!this._pumps.TryGetValue(addr, out pumpControl))
				{
					PumpControl pumpControl2 = new PumpControl(gasVentPumpData, addr);
					pumpControl2.PumpDataChanged += this.AtmosDeviceDataChanged.Invoke;
					this._pumps.Add(addr, pumpControl2);
					this.CVentContainer.AddChild(pumpControl2);
					return;
				}
				pumpControl.ChangeData(gasVentPumpData);
				return;
			}
		}

		// Token: 0x06001B2E RID: 6958 RVA: 0x0009C9C4 File Offset: 0x0009ABC4
		public static Color ColorForThreshold(float amount, AtmosAlarmThreshold threshold)
		{
			AtmosAlarmType curAlarm;
			threshold.CheckThreshold(amount, out curAlarm);
			return AirAlarmWindow.ColorForAlarm(curAlarm);
		}

		// Token: 0x06001B2F RID: 6959 RVA: 0x0009C9E1 File Offset: 0x0009ABE1
		public static Color ColorForAlarm(AtmosAlarmType curAlarm)
		{
			if (curAlarm == AtmosAlarmType.Danger)
			{
				return StyleNano.DangerousRedFore;
			}
			if (curAlarm == AtmosAlarmType.Warning)
			{
				return StyleNano.ConcerningOrangeFore;
			}
			return StyleNano.GoodGreenFore;
		}

		// Token: 0x1700059F RID: 1439
		// (get) Token: 0x06001B30 RID: 6960 RVA: 0x00072068 File Offset: 0x00070268
		[Nullable(0)]
		private SpriteView EntityView
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<SpriteView>("EntityView");
			}
		}

		// Token: 0x170005A0 RID: 1440
		// (get) Token: 0x06001B31 RID: 6961 RVA: 0x0009C9FC File Offset: 0x0009ABFC
		[Nullable(0)]
		private RichTextLabel CPressureLabel
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<RichTextLabel>("CPressureLabel");
			}
		}

		// Token: 0x170005A1 RID: 1441
		// (get) Token: 0x06001B32 RID: 6962 RVA: 0x0009CA09 File Offset: 0x0009AC09
		[Nullable(0)]
		private RichTextLabel CTemperatureLabel
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<RichTextLabel>("CTemperatureLabel");
			}
		}

		// Token: 0x170005A2 RID: 1442
		// (get) Token: 0x06001B33 RID: 6963 RVA: 0x0009CA16 File Offset: 0x0009AC16
		[Nullable(0)]
		private RichTextLabel CStatusLabel
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<RichTextLabel>("CStatusLabel");
			}
		}

		// Token: 0x170005A3 RID: 1443
		// (get) Token: 0x06001B34 RID: 6964 RVA: 0x0009CA23 File Offset: 0x0009AC23
		[Nullable(0)]
		private RichTextLabel CDeviceAddress
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<RichTextLabel>("CDeviceAddress");
			}
		}

		// Token: 0x170005A4 RID: 1444
		// (get) Token: 0x06001B35 RID: 6965 RVA: 0x0009CA30 File Offset: 0x0009AC30
		[Nullable(0)]
		private RichTextLabel CDeviceTotal
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<RichTextLabel>("CDeviceTotal");
			}
		}

		// Token: 0x170005A5 RID: 1445
		// (get) Token: 0x06001B36 RID: 6966 RVA: 0x0009CA3D File Offset: 0x0009AC3D
		[Nullable(0)]
		private Button CResyncButton
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<Button>("CResyncButton");
			}
		}

		// Token: 0x170005A6 RID: 1446
		// (get) Token: 0x06001B37 RID: 6967 RVA: 0x0003CDF7 File Offset: 0x0003AFF7
		[Nullable(0)]
		private TabContainer CTabContainer
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<TabContainer>("CTabContainer");
			}
		}

		// Token: 0x170005A7 RID: 1447
		// (get) Token: 0x06001B38 RID: 6968 RVA: 0x0009CA4A File Offset: 0x0009AC4A
		[Nullable(0)]
		private BoxContainer CVentContainer
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<BoxContainer>("CVentContainer");
			}
		}

		// Token: 0x170005A8 RID: 1448
		// (get) Token: 0x06001B39 RID: 6969 RVA: 0x0009CA57 File Offset: 0x0009AC57
		[Nullable(0)]
		private BoxContainer CScrubberContainer
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<BoxContainer>("CScrubberContainer");
			}
		}

		// Token: 0x170005A9 RID: 1449
		// (get) Token: 0x06001B3A RID: 6970 RVA: 0x0009CA64 File Offset: 0x0009AC64
		[Nullable(0)]
		private BoxContainer CSensorContainer
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<BoxContainer>("CSensorContainer");
			}
		}

		// Token: 0x170005AA RID: 1450
		// (get) Token: 0x06001B3B RID: 6971 RVA: 0x0009CA71 File Offset: 0x0009AC71
		[Nullable(0)]
		private OptionButton CModeButton
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<OptionButton>("CModeButton");
			}
		}

		// Token: 0x06001B3F RID: 6975 RVA: 0x0009CB0C File Offset: 0x0009AD0C
		static void xaml(IServiceProvider A_0, FancyWindow A_1)
		{
			XamlIlContext.Context<FancyWindow> context = new XamlIlContext.Context<FancyWindow>(A_0, null, "resm:Content.Client.Atmos.Monitor.UI.AirAlarmWindow.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.MinSize = new Vector2(500f, 500f);
			A_1.Resizable = true;
			A_1.Title = "Air Alarm";
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			boxContainer.Margin = new Thickness(5f, 5f, 5f, 5f);
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 0;
			boxContainer2.Margin = new Thickness(0f, 0f, 0f, 2f);
			PanelContainer panelContainer = new PanelContainer();
			panelContainer.Margin = new Thickness(2f, 0f, 6f, 0f);
			string item = "Inset";
			panelContainer.StyleClasses.Add(item);
			panelContainer.VerticalAlignment = 2;
			panelContainer.VerticalExpand = true;
			SpriteView spriteView = new SpriteView();
			spriteView.Name = "EntityView";
			Control control = spriteView;
			context.RobustNameScope.Register("EntityView", control);
			spriteView.OverrideDirection = new Direction?(0);
			spriteView.Scale = new Vector2(2f, 2f);
			control = spriteView;
			panelContainer.XamlChildren.Add(control);
			control = panelContainer;
			boxContainer2.XamlChildren.Add(control);
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 0;
			boxContainer3.HorizontalExpand = true;
			boxContainer3.Margin = new Thickness(0f, 0f, 6f, 0f);
			BoxContainer boxContainer4 = new BoxContainer();
			boxContainer4.Orientation = 1;
			boxContainer4.Margin = new Thickness(0f, 0f, 2f, 0f);
			boxContainer4.HorizontalExpand = true;
			control = new Label
			{
				Text = (string)new LocExtension("air-alarm-ui-window-pressure-label").ProvideValue()
			};
			boxContainer4.XamlChildren.Add(control);
			control = new Label
			{
				Text = (string)new LocExtension("air-alarm-ui-window-temperature-label").ProvideValue()
			};
			boxContainer4.XamlChildren.Add(control);
			control = new Label
			{
				Text = (string)new LocExtension("air-alarm-ui-window-alarm-state-label").ProvideValue()
			};
			boxContainer4.XamlChildren.Add(control);
			control = boxContainer4;
			boxContainer3.XamlChildren.Add(control);
			BoxContainer boxContainer5 = new BoxContainer();
			boxContainer5.Orientation = 1;
			boxContainer5.HorizontalExpand = true;
			RichTextLabel richTextLabel = new RichTextLabel();
			richTextLabel.Name = "CPressureLabel";
			control = richTextLabel;
			context.RobustNameScope.Register("CPressureLabel", control);
			control = richTextLabel;
			boxContainer5.XamlChildren.Add(control);
			RichTextLabel richTextLabel2 = new RichTextLabel();
			richTextLabel2.Name = "CTemperatureLabel";
			control = richTextLabel2;
			context.RobustNameScope.Register("CTemperatureLabel", control);
			control = richTextLabel2;
			boxContainer5.XamlChildren.Add(control);
			RichTextLabel richTextLabel3 = new RichTextLabel();
			richTextLabel3.Name = "CStatusLabel";
			control = richTextLabel3;
			context.RobustNameScope.Register("CStatusLabel", control);
			control = richTextLabel3;
			boxContainer5.XamlChildren.Add(control);
			control = boxContainer5;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer2.XamlChildren.Add(control);
			BoxContainer boxContainer6 = new BoxContainer();
			boxContainer6.Orientation = 1;
			BoxContainer boxContainer7 = new BoxContainer();
			boxContainer7.Orientation = 0;
			boxContainer7.Margin = new Thickness(0f, 0f, 2f, 0f);
			boxContainer7.HorizontalExpand = true;
			BoxContainer boxContainer8 = new BoxContainer();
			boxContainer8.Orientation = 1;
			boxContainer8.HorizontalExpand = true;
			control = new Label
			{
				Text = (string)new LocExtension("air-alarm-ui-window-address-label").ProvideValue()
			};
			boxContainer8.XamlChildren.Add(control);
			control = new Label
			{
				Text = (string)new LocExtension("air-alarm-ui-window-device-count-label").ProvideValue()
			};
			boxContainer8.XamlChildren.Add(control);
			control = boxContainer8;
			boxContainer7.XamlChildren.Add(control);
			BoxContainer boxContainer9 = new BoxContainer();
			boxContainer9.Orientation = 1;
			boxContainer9.HorizontalExpand = true;
			RichTextLabel richTextLabel4 = new RichTextLabel();
			richTextLabel4.Name = "CDeviceAddress";
			control = richTextLabel4;
			context.RobustNameScope.Register("CDeviceAddress", control);
			richTextLabel4.HorizontalAlignment = 3;
			control = richTextLabel4;
			boxContainer9.XamlChildren.Add(control);
			RichTextLabel richTextLabel5 = new RichTextLabel();
			richTextLabel5.Name = "CDeviceTotal";
			control = richTextLabel5;
			context.RobustNameScope.Register("CDeviceTotal", control);
			richTextLabel5.HorizontalAlignment = 3;
			control = richTextLabel5;
			boxContainer9.XamlChildren.Add(control);
			control = boxContainer9;
			boxContainer7.XamlChildren.Add(control);
			control = boxContainer7;
			boxContainer6.XamlChildren.Add(control);
			Button button = new Button();
			button.Name = "CResyncButton";
			control = button;
			context.RobustNameScope.Register("CResyncButton", control);
			button.Text = (string)new LocExtension("air-alarm-ui-window-resync-devices-label").ProvideValue();
			button.HorizontalExpand = true;
			control = button;
			boxContainer6.XamlChildren.Add(control);
			control = boxContainer6;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			TabContainer tabContainer = new TabContainer();
			tabContainer.Name = "CTabContainer";
			control = tabContainer;
			context.RobustNameScope.Register("CTabContainer", control);
			tabContainer.VerticalExpand = true;
			tabContainer.Margin = new Thickness(0f, 0f, 0f, 2f);
			PanelContainer panelContainer2 = new PanelContainer();
			panelContainer2.VerticalExpand = true;
			panelContainer2.PanelOverride = new StyleBoxFlat
			{
				BackgroundColor = Color.FromXaml("#1B1B1B")
			};
			ScrollContainer scrollContainer = new ScrollContainer();
			BoxContainer boxContainer10 = new BoxContainer();
			boxContainer10.Name = "CVentContainer";
			control = boxContainer10;
			context.RobustNameScope.Register("CVentContainer", control);
			boxContainer10.Orientation = 1;
			control = boxContainer10;
			scrollContainer.XamlChildren.Add(control);
			control = scrollContainer;
			panelContainer2.XamlChildren.Add(control);
			control = panelContainer2;
			tabContainer.XamlChildren.Add(control);
			PanelContainer panelContainer3 = new PanelContainer();
			panelContainer3.VerticalExpand = true;
			panelContainer3.PanelOverride = new StyleBoxFlat
			{
				BackgroundColor = Color.FromXaml("#1b1b1b")
			};
			ScrollContainer scrollContainer2 = new ScrollContainer();
			BoxContainer boxContainer11 = new BoxContainer();
			boxContainer11.Name = "CScrubberContainer";
			control = boxContainer11;
			context.RobustNameScope.Register("CScrubberContainer", control);
			boxContainer11.Orientation = 1;
			control = boxContainer11;
			scrollContainer2.XamlChildren.Add(control);
			control = scrollContainer2;
			panelContainer3.XamlChildren.Add(control);
			control = panelContainer3;
			tabContainer.XamlChildren.Add(control);
			PanelContainer panelContainer4 = new PanelContainer();
			panelContainer4.VerticalExpand = true;
			panelContainer4.PanelOverride = new StyleBoxFlat
			{
				BackgroundColor = Color.FromXaml("#1b1b1b")
			};
			ScrollContainer scrollContainer3 = new ScrollContainer();
			BoxContainer boxContainer12 = new BoxContainer();
			boxContainer12.Name = "CSensorContainer";
			control = boxContainer12;
			context.RobustNameScope.Register("CSensorContainer", control);
			boxContainer12.Orientation = 1;
			control = boxContainer12;
			scrollContainer3.XamlChildren.Add(control);
			control = scrollContainer3;
			panelContainer4.XamlChildren.Add(control);
			control = panelContainer4;
			tabContainer.XamlChildren.Add(control);
			control = tabContainer;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer13 = new BoxContainer();
			boxContainer13.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("air-alarm-ui-window-mode-label").ProvideValue(),
				Margin = new Thickness(0f, 0f, 2f, 0f)
			};
			boxContainer13.XamlChildren.Add(control);
			OptionButton optionButton = new OptionButton();
			optionButton.Name = "CModeButton";
			control = optionButton;
			context.RobustNameScope.Register("CModeButton", control);
			optionButton.HorizontalExpand = true;
			control = optionButton;
			boxContainer13.XamlChildren.Add(control);
			control = boxContainer13;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06001B40 RID: 6976 RVA: 0x0009D454 File Offset: 0x0009B654
		private static void !XamlIlPopulateTrampoline(AirAlarmWindow A_0)
		{
			AirAlarmWindow.Populate:Content.Client.Atmos.Monitor.UI.AirAlarmWindow.xaml(null, A_0);
		}

		// Token: 0x04000DA4 RID: 3492
		private Dictionary<string, PumpControl> _pumps = new Dictionary<string, PumpControl>();

		// Token: 0x04000DA5 RID: 3493
		private Dictionary<string, ScrubberControl> _scrubbers = new Dictionary<string, ScrubberControl>();

		// Token: 0x04000DA6 RID: 3494
		private Dictionary<string, SensorInfo> _sensors = new Dictionary<string, SensorInfo>();

		// Token: 0x04000DA7 RID: 3495
		private Dictionary<Gas, Label> _gasLabels = new Dictionary<Gas, Label>();
	}
}
