using System;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Shared.Atmos.Monitor;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.Maths;

namespace Content.Client.Atmos.Monitor.UI.Widgets
{
	// Token: 0x02000451 RID: 1105
	[GenerateTypedNameReferences]
	public sealed class ThresholdBoundControl : BoxContainer
	{
		// Token: 0x170005CA RID: 1482
		// (get) Token: 0x06001B85 RID: 7045 RVA: 0x0009F75F File Offset: 0x0009D95F
		// (set) Token: 0x06001B86 RID: 7046 RVA: 0x0009F76E File Offset: 0x0009D96E
		private float ScaledValue
		{
			get
			{
				return this._value * this._uiValueScale;
			}
			set
			{
				this._value = value / this._uiValueScale;
			}
		}

		// Token: 0x140000AF RID: 175
		// (add) Token: 0x06001B87 RID: 7047 RVA: 0x0009F780 File Offset: 0x0009D980
		// (remove) Token: 0x06001B88 RID: 7048 RVA: 0x0009F7B8 File Offset: 0x0009D9B8
		[Nullable(2)]
		[method: NullableContext(2)]
		[Nullable(2)]
		public event Action OnValidBoundChanged;

		// Token: 0x06001B89 RID: 7049 RVA: 0x0009F7ED File Offset: 0x0009D9ED
		public void SetValue(float value)
		{
			this._value = value;
			this.CSpinner.Value = this.ScaledValue;
		}

		// Token: 0x06001B8A RID: 7050 RVA: 0x0009F807 File Offset: 0x0009DA07
		public void SetEnabled(bool enabled)
		{
			this.CBoundEnabled.Pressed = enabled;
			if (enabled)
			{
				this.CBoundLabel.RemoveStyleClass("Disabled");
				return;
			}
			this.CBoundLabel.SetOnlyStyleClass("Disabled");
		}

		// Token: 0x06001B8B RID: 7051 RVA: 0x0009F83C File Offset: 0x0009DA3C
		public void SetWarningState(AtmosAlarmType alarm)
		{
			if (alarm == AtmosAlarmType.Normal)
			{
				this.CBoundLabel.FontColorOverride = null;
				return;
			}
			this.CBoundLabel.FontColorOverride = new Color?(AirAlarmWindow.ColorForAlarm(alarm));
		}

		// Token: 0x06001B8C RID: 7052 RVA: 0x0009F878 File Offset: 0x0009DA78
		[NullableContext(1)]
		public ThresholdBoundControl(string controlLabel, float value, float uiValueScale = 1f)
		{
			ThresholdBoundControl.!XamlIlPopulateTrampoline(this);
			this._uiValueScale = ((uiValueScale > 0f) ? uiValueScale : 1f);
			this._value = value;
			this.CBoundLabel.Text = controlLabel;
			this.CSpinner.Value = this.ScaledValue;
			BaseButton cboundEnabled = this.CBoundEnabled;
			float value2 = this._value;
			cboundEnabled.Pressed = true;
			this.CSpinner.OnValueChanged += this.SpinnerValueChanged;
			this.CBoundEnabled.OnToggled += this.CheckboxToggled;
		}

		// Token: 0x06001B8D RID: 7053 RVA: 0x0009F90C File Offset: 0x0009DB0C
		[NullableContext(1)]
		private void SpinnerValueChanged(FloatSpinBox.FloatSpinBoxEventArgs args)
		{
			this.ScaledValue = args.Value;
			this.OnBoundChanged(this._value);
			this.OnValidBoundChanged();
		}

		// Token: 0x06001B8E RID: 7054 RVA: 0x0009F936 File Offset: 0x0009DB36
		[NullableContext(1)]
		private void CheckboxToggled(BaseButton.ButtonToggledEventArgs args)
		{
			this.OnBoundEnabled(args.Pressed);
			this.OnValidBoundChanged();
		}

		// Token: 0x170005CB RID: 1483
		// (get) Token: 0x06001B8F RID: 7055 RVA: 0x0009F954 File Offset: 0x0009DB54
		private Label CBoundLabel
		{
			get
			{
				return base.FindControl<Label>("CBoundLabel");
			}
		}

		// Token: 0x170005CC RID: 1484
		// (get) Token: 0x06001B90 RID: 7056 RVA: 0x0009F961 File Offset: 0x0009DB61
		private CheckBox CBoundEnabled
		{
			get
			{
				return base.FindControl<CheckBox>("CBoundEnabled");
			}
		}

		// Token: 0x170005CD RID: 1485
		// (get) Token: 0x06001B91 RID: 7057 RVA: 0x0009F96E File Offset: 0x0009DB6E
		private FloatSpinBox CSpinner
		{
			get
			{
				return base.FindControl<FloatSpinBox>("CSpinner");
			}
		}

		// Token: 0x06001B92 RID: 7058 RVA: 0x0009F97C File Offset: 0x0009DB7C
		static void xaml(IServiceProvider A_0, BoxContainer A_1)
		{
			XamlIlContext.Context<BoxContainer> context = new XamlIlContext.Context<BoxContainer>(A_0, null, "resm:Content.Client.Atmos.Monitor.UI.Widgets.ThresholdBoundControl.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.HorizontalExpand = true;
			A_1.Orientation = 1;
			A_1.Margin = new Thickness(20f, 0f, 0f, 0f);
			A_1.MinSize = new Vector2(160f, 0f);
			Label label = new Label();
			label.Name = "CBoundLabel";
			Control control = label;
			context.RobustNameScope.Register("CBoundLabel", control);
			label.HorizontalAlignment = 2;
			control = label;
			A_1.XamlChildren.Add(control);
			CheckBox checkBox = new CheckBox();
			checkBox.Name = "CBoundEnabled";
			control = checkBox;
			context.RobustNameScope.Register("CBoundEnabled", control);
			checkBox.HorizontalAlignment = 2;
			checkBox.Text = (string)new LocExtension("Enable").ProvideValue();
			control = checkBox;
			A_1.XamlChildren.Add(control);
			FloatSpinBox floatSpinBox = new FloatSpinBox();
			floatSpinBox.Name = "CSpinner";
			control = floatSpinBox;
			context.RobustNameScope.Register("CSpinner", control);
			control = floatSpinBox;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06001B93 RID: 7059 RVA: 0x0009FB2D File Offset: 0x0009DD2D
		private static void !XamlIlPopulateTrampoline(ThresholdBoundControl A_0)
		{
			ThresholdBoundControl.Populate:Content.Client.Atmos.Monitor.UI.Widgets.ThresholdBoundControl.xaml(null, A_0);
		}

		// Token: 0x04000DBC RID: 3516
		private float _value;

		// Token: 0x04000DBD RID: 3517
		private float _uiValueScale;

		// Token: 0x04000DBF RID: 3519
		[Nullable(2)]
		public Action<float> OnBoundChanged;

		// Token: 0x04000DC0 RID: 3520
		[Nullable(2)]
		public Action<bool> OnBoundEnabled;
	}
}
