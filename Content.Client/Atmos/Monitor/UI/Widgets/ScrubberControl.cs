using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Shared.Atmos;
using Content.Shared.Atmos.Monitor.Components;
using Content.Shared.Atmos.Piping.Unary.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.Localization;
using Robust.Shared.Maths;

namespace Content.Client.Atmos.Monitor.UI.Widgets
{
	// Token: 0x0200044D RID: 1101
	[NullableContext(1)]
	[Nullable(0)]
	[GenerateTypedNameReferences]
	public sealed class ScrubberControl : BoxContainer
	{
		// Token: 0x140000AE RID: 174
		// (add) Token: 0x06001B5C RID: 7004 RVA: 0x0009DF4C File Offset: 0x0009C14C
		// (remove) Token: 0x06001B5D RID: 7005 RVA: 0x0009DF84 File Offset: 0x0009C184
		[Nullable(new byte[]
		{
			2,
			1,
			1
		})]
		[Nullable(new byte[]
		{
			2,
			1,
			1
		})]
		public event Action<string, IAtmosDeviceData> ScrubberDataChanged;

		// Token: 0x170005B7 RID: 1463
		// (get) Token: 0x06001B5E RID: 7006 RVA: 0x0009DFB9 File Offset: 0x0009C1B9
		private CheckBox _enabled
		{
			get
			{
				return this.CEnableDevice;
			}
		}

		// Token: 0x170005B8 RID: 1464
		// (get) Token: 0x06001B5F RID: 7007 RVA: 0x0009DFC1 File Offset: 0x0009C1C1
		private CollapsibleHeading _addressLabel
		{
			get
			{
				return this.CAddress;
			}
		}

		// Token: 0x170005B9 RID: 1465
		// (get) Token: 0x06001B60 RID: 7008 RVA: 0x0009DFC9 File Offset: 0x0009C1C9
		private OptionButton _pumpDirection
		{
			get
			{
				return this.CPumpDirection;
			}
		}

		// Token: 0x170005BA RID: 1466
		// (get) Token: 0x06001B61 RID: 7009 RVA: 0x0009DFD1 File Offset: 0x0009C1D1
		private FloatSpinBox _volumeRate
		{
			get
			{
				return this.CVolumeRate;
			}
		}

		// Token: 0x170005BB RID: 1467
		// (get) Token: 0x06001B62 RID: 7010 RVA: 0x0009DFD9 File Offset: 0x0009C1D9
		private CheckBox _wideNet
		{
			get
			{
				return this.CWideNet;
			}
		}

		// Token: 0x170005BC RID: 1468
		// (get) Token: 0x06001B63 RID: 7011 RVA: 0x0009DFE1 File Offset: 0x0009C1E1
		private GridContainer _gases
		{
			get
			{
				return this.CGasContainer;
			}
		}

		// Token: 0x06001B64 RID: 7012 RVA: 0x0009DFEC File Offset: 0x0009C1EC
		public ScrubberControl(GasVentScrubberData data, string address)
		{
			ScrubberControl.!XamlIlPopulateTrampoline(this);
			base.Name = address;
			this._data = data;
			this._address = address;
			this._addressLabel.Title = Loc.GetString("air-alarm-ui-atmos-net-device-label", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("address", address ?? "")
			});
			this._enabled.Pressed = data.Enabled;
			this._enabled.OnToggled += delegate(BaseButton.ButtonToggledEventArgs _)
			{
				this._data.Enabled = this._enabled.Pressed;
				Action<string, IAtmosDeviceData> scrubberDataChanged = this.ScrubberDataChanged;
				if (scrubberDataChanged == null)
				{
					return;
				}
				scrubberDataChanged(this._address, this._data);
			};
			this._wideNet.Pressed = data.WideNet;
			this._wideNet.OnToggled += delegate(BaseButton.ButtonToggledEventArgs _)
			{
				this._data.WideNet = this._wideNet.Pressed;
				Action<string, IAtmosDeviceData> scrubberDataChanged = this.ScrubberDataChanged;
				if (scrubberDataChanged == null)
				{
					return;
				}
				scrubberDataChanged(this._address, this._data);
			};
			this._volumeRate.Value = this._data.VolumeRate;
			this._volumeRate.OnValueChanged += delegate(FloatSpinBox.FloatSpinBoxEventArgs _)
			{
				this._data.VolumeRate = this._volumeRate.Value;
				Action<string, IAtmosDeviceData> scrubberDataChanged = this.ScrubberDataChanged;
				if (scrubberDataChanged == null)
				{
					return;
				}
				scrubberDataChanged(this._address, this._data);
			};
			FloatSpinBox volumeRate = this._volumeRate;
			volumeRate.IsValid = (Func<float, bool>)Delegate.Combine(volumeRate.IsValid, new Func<float, bool>((float value) => value >= 0f));
			foreach (ScrubberPumpDirection value2 in Enum.GetValues<ScrubberPumpDirection>())
			{
				OptionButton pumpDirection = this._pumpDirection;
				DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(0, 1);
				defaultInterpolatedStringHandler.AppendFormatted<ScrubberPumpDirection>(value2);
				pumpDirection.AddItem(Loc.GetString(defaultInterpolatedStringHandler.ToStringAndClear()), new int?((int)value2));
			}
			this._pumpDirection.SelectId((int)this._data.PumpDirection);
			this._pumpDirection.OnItemSelected += delegate(OptionButton.ItemSelectedEventArgs args)
			{
				this._pumpDirection.SelectId(args.Id);
				this._data.PumpDirection = (ScrubberPumpDirection)args.Id;
				Action<string, IAtmosDeviceData> scrubberDataChanged = this.ScrubberDataChanged;
				if (scrubberDataChanged == null)
				{
					return;
				}
				scrubberDataChanged(this._address, this._data);
			};
			Gas[] values2 = Enum.GetValues<Gas>();
			for (int i = 0; i < values2.Length; i++)
			{
				Gas value = values2[i];
				Button button = new Button();
				button.Name = value.ToString();
				DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(0, 1);
				defaultInterpolatedStringHandler.AppendFormatted<Gas>(value);
				button.Text = Loc.GetString(defaultInterpolatedStringHandler.ToStringAndClear());
				button.ToggleMode = true;
				button.HorizontalExpand = true;
				button.Pressed = this._data.FilterGases.Contains(value);
				Button button2 = button;
				button2.OnToggled += delegate(BaseButton.ButtonToggledEventArgs args)
				{
					if (args.Pressed)
					{
						this._data.FilterGases.Add(value);
					}
					else
					{
						this._data.FilterGases.Remove(value);
					}
					Action<string, IAtmosDeviceData> scrubberDataChanged = this.ScrubberDataChanged;
					if (scrubberDataChanged == null)
					{
						return;
					}
					scrubberDataChanged(this._address, this._data);
				};
				this._gasControls.Add(value, button2);
				this._gases.AddChild(button2);
			}
		}

		// Token: 0x06001B65 RID: 7013 RVA: 0x0009E264 File Offset: 0x0009C464
		public void ChangeData(GasVentScrubberData data)
		{
			this._data.Enabled = data.Enabled;
			this._enabled.Pressed = this._data.Enabled;
			this._data.PumpDirection = data.PumpDirection;
			this._pumpDirection.Select((int)this._data.PumpDirection);
			this._data.VolumeRate = data.VolumeRate;
			this._volumeRate.Value = this._data.VolumeRate;
			this._data.WideNet = data.WideNet;
			this._wideNet.Pressed = this._data.WideNet;
			this._data.FilterGases = data.FilterGases;
			foreach (Gas gas in Enum.GetValues<Gas>())
			{
				this._gasControls[gas].Pressed = data.FilterGases.Contains(gas);
			}
		}

		// Token: 0x170005BD RID: 1469
		// (get) Token: 0x06001B66 RID: 7014 RVA: 0x0009D818 File Offset: 0x0009BA18
		[Nullable(0)]
		private CollapsibleHeading CAddress
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<CollapsibleHeading>("CAddress");
			}
		}

		// Token: 0x170005BE RID: 1470
		// (get) Token: 0x06001B67 RID: 7015 RVA: 0x0009D825 File Offset: 0x0009BA25
		[Nullable(0)]
		private CheckBox CEnableDevice
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<CheckBox>("CEnableDevice");
			}
		}

		// Token: 0x170005BF RID: 1471
		// (get) Token: 0x06001B68 RID: 7016 RVA: 0x0009D832 File Offset: 0x0009BA32
		[Nullable(0)]
		private OptionButton CPumpDirection
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<OptionButton>("CPumpDirection");
			}
		}

		// Token: 0x170005C0 RID: 1472
		// (get) Token: 0x06001B69 RID: 7017 RVA: 0x0009E353 File Offset: 0x0009C553
		[Nullable(0)]
		private FloatSpinBox CVolumeRate
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<FloatSpinBox>("CVolumeRate");
			}
		}

		// Token: 0x170005C1 RID: 1473
		// (get) Token: 0x06001B6A RID: 7018 RVA: 0x0009E360 File Offset: 0x0009C560
		[Nullable(0)]
		private CheckBox CWideNet
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<CheckBox>("CWideNet");
			}
		}

		// Token: 0x170005C2 RID: 1474
		// (get) Token: 0x06001B6B RID: 7019 RVA: 0x0009E36D File Offset: 0x0009C56D
		[Nullable(0)]
		private GridContainer CGasContainer
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<GridContainer>("CGasContainer");
			}
		}

		// Token: 0x06001B70 RID: 7024 RVA: 0x0009E464 File Offset: 0x0009C664
		static void xaml(IServiceProvider A_0, BoxContainer A_1)
		{
			XamlIlContext.Context<BoxContainer> context = new XamlIlContext.Context<BoxContainer>(A_0, null, "resm:Content.Client.Atmos.Monitor.UI.Widgets.ScrubberControl.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Orientation = 1;
			A_1.Margin = new Thickness(2f, 0f, 2f, 4f);
			Collapsible collapsible = new Collapsible();
			collapsible.Orientation = 1;
			CollapsibleHeading collapsibleHeading = new CollapsibleHeading();
			collapsibleHeading.Name = "CAddress";
			Control control = collapsibleHeading;
			context.RobustNameScope.Register("CAddress", control);
			control = collapsibleHeading;
			collapsible.XamlChildren.Add(control);
			CollapsibleBody collapsibleBody = new CollapsibleBody();
			collapsibleBody.Margin = new Thickness(20f, 0f, 0f, 0f);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 0;
			boxContainer2.Margin = new Thickness(0f, 0f, 0f, 2f);
			CheckBox checkBox = new CheckBox();
			checkBox.Name = "CEnableDevice";
			control = checkBox;
			context.RobustNameScope.Register("CEnableDevice", control);
			checkBox.Text = (string)new LocExtension("air-alarm-ui-widget-enable").ProvideValue();
			control = checkBox;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 0;
			boxContainer3.Margin = new Thickness(0f, 0f, 0f, 2f);
			boxContainer3.HorizontalExpand = true;
			BoxContainer boxContainer4 = new BoxContainer();
			boxContainer4.Orientation = 1;
			boxContainer4.HorizontalExpand = true;
			control = new Label
			{
				Text = (string)new LocExtension("air-alarm-ui-scrubber-pump-direction-label").ProvideValue(),
				Margin = new Thickness(0f, 0f, 0f, 1f)
			};
			boxContainer4.XamlChildren.Add(control);
			OptionButton optionButton = new OptionButton();
			optionButton.Name = "CPumpDirection";
			control = optionButton;
			context.RobustNameScope.Register("CPumpDirection", control);
			optionButton.HorizontalExpand = true;
			control = optionButton;
			boxContainer4.XamlChildren.Add(control);
			control = boxContainer4;
			boxContainer3.XamlChildren.Add(control);
			BoxContainer boxContainer5 = new BoxContainer();
			boxContainer5.Orientation = 1;
			boxContainer5.HorizontalExpand = true;
			control = new Label
			{
				Text = (string)new LocExtension("air-alarm-ui-scrubber-volume-rate-label").ProvideValue(),
				Margin = new Thickness(0f, 0f, 0f, 1f)
			};
			boxContainer5.XamlChildren.Add(control);
			FloatSpinBox floatSpinBox = new FloatSpinBox();
			floatSpinBox.Name = "CVolumeRate";
			control = floatSpinBox;
			context.RobustNameScope.Register("CVolumeRate", control);
			floatSpinBox.HorizontalExpand = true;
			control = floatSpinBox;
			boxContainer5.XamlChildren.Add(control);
			control = boxContainer5;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer6 = new BoxContainer();
			CheckBox checkBox2 = new CheckBox();
			checkBox2.Name = "CWideNet";
			control = checkBox2;
			context.RobustNameScope.Register("CWideNet", control);
			checkBox2.Text = (string)new LocExtension("air-alarm-ui-scrubber-wide-net-label").ProvideValue();
			control = checkBox2;
			boxContainer6.XamlChildren.Add(control);
			control = boxContainer6;
			boxContainer.XamlChildren.Add(control);
			Collapsible collapsible2 = new Collapsible();
			collapsible2.Orientation = 1;
			collapsible2.Margin = new Thickness(2f, 2f, 2f, 2f);
			control = new CollapsibleHeading
			{
				Title = "Gas filters"
			};
			collapsible2.XamlChildren.Add(control);
			CollapsibleBody collapsibleBody2 = new CollapsibleBody();
			collapsibleBody2.Margin = new Thickness(20f, 0f, 0f, 0f);
			GridContainer gridContainer = new GridContainer();
			gridContainer.HorizontalExpand = true;
			gridContainer.Name = "CGasContainer";
			control = gridContainer;
			context.RobustNameScope.Register("CGasContainer", control);
			gridContainer.Columns = 3;
			control = gridContainer;
			collapsibleBody2.XamlChildren.Add(control);
			control = collapsibleBody2;
			collapsible2.XamlChildren.Add(control);
			control = collapsible2;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			collapsibleBody.XamlChildren.Add(control);
			control = collapsibleBody;
			collapsible.XamlChildren.Add(control);
			control = collapsible;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06001B71 RID: 7025 RVA: 0x0009E9A6 File Offset: 0x0009CBA6
		private static void !XamlIlPopulateTrampoline(ScrubberControl A_0)
		{
			ScrubberControl.Populate:Content.Client.Atmos.Monitor.UI.Widgets.ScrubberControl.xaml(null, A_0);
		}

		// Token: 0x04000DAE RID: 3502
		private GasVentScrubberData _data;

		// Token: 0x04000DAF RID: 3503
		private string _address;

		// Token: 0x04000DB1 RID: 3505
		private Dictionary<Gas, Button> _gasControls = new Dictionary<Gas, Button>();
	}
}
