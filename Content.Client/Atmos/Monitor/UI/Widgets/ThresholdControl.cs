using System;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Shared.Atmos;
using Content.Shared.Atmos.Monitor;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.Localization;
using Robust.Shared.Maths;

namespace Content.Client.Atmos.Monitor.UI.Widgets
{
	// Token: 0x02000452 RID: 1106
	[NullableContext(1)]
	[Nullable(0)]
	[GenerateTypedNameReferences]
	public sealed class ThresholdControl : BoxContainer
	{
		// Token: 0x140000B0 RID: 176
		// (add) Token: 0x06001B94 RID: 7060 RVA: 0x0009FB38 File Offset: 0x0009DD38
		// (remove) Token: 0x06001B95 RID: 7061 RVA: 0x0009FB70 File Offset: 0x0009DD70
		[Nullable(new byte[]
		{
			2,
			1
		})]
		[Nullable(new byte[]
		{
			2,
			1
		})]
		public event Action<AtmosMonitorThresholdType, AtmosAlarmThreshold, Gas?> ThresholdDataChanged;

		// Token: 0x170005CE RID: 1486
		// (get) Token: 0x06001B96 RID: 7062 RVA: 0x0009FBA5 File Offset: 0x0009DDA5
		private CollapsibleHeading _name
		{
			get
			{
				return this.CName;
			}
		}

		// Token: 0x170005CF RID: 1487
		// (get) Token: 0x06001B97 RID: 7063 RVA: 0x0009FBAD File Offset: 0x0009DDAD
		private CheckBox _enabled
		{
			get
			{
				return this.CEnabled;
			}
		}

		// Token: 0x170005D0 RID: 1488
		// (get) Token: 0x06001B98 RID: 7064 RVA: 0x0009FBB5 File Offset: 0x0009DDB5
		private BoxContainer _dangerBounds
		{
			get
			{
				return this.CDangerBounds;
			}
		}

		// Token: 0x170005D1 RID: 1489
		// (get) Token: 0x06001B99 RID: 7065 RVA: 0x0009FBBD File Offset: 0x0009DDBD
		private BoxContainer _warningBounds
		{
			get
			{
				return this.CWarningBounds;
			}
		}

		// Token: 0x06001B9A RID: 7066 RVA: 0x0009FBC8 File Offset: 0x0009DDC8
		public ThresholdControl(string name, AtmosAlarmThreshold threshold, AtmosMonitorThresholdType type, Gas? gas = null, float modifier = 1f)
		{
			ThresholdControl.!XamlIlPopulateTrampoline(this);
			this._threshold = threshold;
			this._type = type;
			this._gas = gas;
			this._name.Title = name;
			this._upperBoundControl = new ThresholdBoundControl(this.LabelForBound("upper-bound"), this._threshold.UpperBound.Value, modifier);
			ThresholdBoundControl upperBoundControl = this._upperBoundControl;
			upperBoundControl.OnBoundChanged = (Action<float>)Delegate.Combine(upperBoundControl.OnBoundChanged, new Action<float>(delegate(float value)
			{
				this._threshold.SetLimit(AtmosMonitorLimitType.UpperDanger, value);
			}));
			ThresholdBoundControl upperBoundControl2 = this._upperBoundControl;
			upperBoundControl2.OnBoundEnabled = (Action<bool>)Delegate.Combine(upperBoundControl2.OnBoundEnabled, new Action<bool>(delegate(bool isEnabled)
			{
				this._threshold.SetEnabled(AtmosMonitorLimitType.UpperDanger, isEnabled);
			}));
			this._upperBoundControl.OnValidBoundChanged += delegate()
			{
				this.ThresholdDataChanged(this._type, this._threshold, this._gas);
			};
			this._dangerBounds.AddChild(this._upperBoundControl);
			this._lowerBoundControl = new ThresholdBoundControl(this.LabelForBound("lower-bound"), this._threshold.LowerBound.Value, modifier);
			ThresholdBoundControl lowerBoundControl = this._lowerBoundControl;
			lowerBoundControl.OnBoundChanged = (Action<float>)Delegate.Combine(lowerBoundControl.OnBoundChanged, new Action<float>(delegate(float value)
			{
				this._threshold.SetLimit(AtmosMonitorLimitType.LowerDanger, value);
			}));
			ThresholdBoundControl lowerBoundControl2 = this._lowerBoundControl;
			lowerBoundControl2.OnBoundEnabled = (Action<bool>)Delegate.Combine(lowerBoundControl2.OnBoundEnabled, new Action<bool>(delegate(bool isEnabled)
			{
				this._threshold.SetEnabled(AtmosMonitorLimitType.LowerDanger, isEnabled);
			}));
			this._lowerBoundControl.OnValidBoundChanged += delegate()
			{
				this.ThresholdDataChanged(this._type, this._threshold, this._gas);
			};
			this._dangerBounds.AddChild(this._lowerBoundControl);
			this._upperWarningBoundControl = new ThresholdBoundControl(this.LabelForBound("upper-warning-bound"), this._threshold.UpperWarningBound.Value, modifier);
			ThresholdBoundControl upperWarningBoundControl = this._upperWarningBoundControl;
			upperWarningBoundControl.OnBoundChanged = (Action<float>)Delegate.Combine(upperWarningBoundControl.OnBoundChanged, new Action<float>(delegate(float value)
			{
				this._threshold.SetLimit(AtmosMonitorLimitType.UpperWarning, value);
			}));
			ThresholdBoundControl upperWarningBoundControl2 = this._upperWarningBoundControl;
			upperWarningBoundControl2.OnBoundEnabled = (Action<bool>)Delegate.Combine(upperWarningBoundControl2.OnBoundEnabled, new Action<bool>(delegate(bool isEnabled)
			{
				this._threshold.SetEnabled(AtmosMonitorLimitType.UpperWarning, isEnabled);
			}));
			this._upperWarningBoundControl.OnValidBoundChanged += delegate()
			{
				this.ThresholdDataChanged(this._type, this._threshold, this._gas);
			};
			this._warningBounds.AddChild(this._upperWarningBoundControl);
			this._lowerWarningBoundControl = new ThresholdBoundControl(this.LabelForBound("lower-warning-bound"), this._threshold.LowerWarningBound.Value, modifier);
			ThresholdBoundControl lowerWarningBoundControl = this._lowerWarningBoundControl;
			lowerWarningBoundControl.OnBoundChanged = (Action<float>)Delegate.Combine(lowerWarningBoundControl.OnBoundChanged, new Action<float>(delegate(float value)
			{
				this._threshold.SetLimit(AtmosMonitorLimitType.LowerWarning, value);
			}));
			ThresholdBoundControl lowerWarningBoundControl2 = this._lowerWarningBoundControl;
			lowerWarningBoundControl2.OnBoundEnabled = (Action<bool>)Delegate.Combine(lowerWarningBoundControl2.OnBoundEnabled, new Action<bool>(delegate(bool isEnabled)
			{
				this._threshold.SetEnabled(AtmosMonitorLimitType.LowerWarning, isEnabled);
			}));
			this._lowerWarningBoundControl.OnValidBoundChanged += delegate()
			{
				this.ThresholdDataChanged(this._type, this._threshold, this._gas);
			};
			this._warningBounds.AddChild(this._lowerWarningBoundControl);
			this._enabled.OnToggled += delegate(BaseButton.ButtonToggledEventArgs args)
			{
				this._threshold.Ignore = !args.Pressed;
				this.ThresholdDataChanged(this._type, this._threshold, this._gas);
			};
			this._enabled.Pressed = !this._threshold.Ignore;
		}

		// Token: 0x06001B9B RID: 7067 RVA: 0x0009FEB7 File Offset: 0x0009E0B7
		private string LabelForBound(string boundType)
		{
			return Loc.GetString("air-alarm-ui-thresholds-" + boundType);
		}

		// Token: 0x06001B9C RID: 7068 RVA: 0x0009FECC File Offset: 0x0009E0CC
		public void UpdateThresholdData(AtmosAlarmThreshold threshold, float currentAmount)
		{
			AtmosAlarmType atmosAlarmType;
			AtmosMonitorThresholdBound atmosMonitorThresholdBound;
			threshold.CheckThreshold(currentAmount, out atmosAlarmType, out atmosMonitorThresholdBound);
			AtmosAlarmType warningState = AtmosAlarmType.Normal;
			AtmosAlarmType warningState2 = AtmosAlarmType.Normal;
			AtmosAlarmType warningState3 = AtmosAlarmType.Normal;
			AtmosAlarmType warningState4 = AtmosAlarmType.Normal;
			if (atmosAlarmType == AtmosAlarmType.Danger)
			{
				if (atmosMonitorThresholdBound == AtmosMonitorThresholdBound.Upper)
				{
					warningState = atmosAlarmType;
				}
				else
				{
					warningState2 = atmosAlarmType;
				}
			}
			else if (atmosAlarmType == AtmosAlarmType.Warning)
			{
				if (atmosMonitorThresholdBound == AtmosMonitorThresholdBound.Upper)
				{
					warningState3 = atmosAlarmType;
				}
				else
				{
					warningState4 = atmosAlarmType;
				}
			}
			this._upperBoundControl.SetValue(threshold.UpperBound.Value);
			this._upperBoundControl.SetEnabled(threshold.UpperBound.Enabled);
			this._upperBoundControl.SetWarningState(warningState);
			this._lowerBoundControl.SetValue(threshold.LowerBound.Value);
			this._lowerBoundControl.SetEnabled(threshold.LowerBound.Enabled);
			this._lowerBoundControl.SetWarningState(warningState2);
			this._upperWarningBoundControl.SetValue(threshold.UpperWarningBound.Value);
			this._upperWarningBoundControl.SetEnabled(threshold.UpperWarningBound.Enabled);
			this._upperWarningBoundControl.SetWarningState(warningState3);
			this._lowerWarningBoundControl.SetValue(threshold.LowerWarningBound.Value);
			this._lowerWarningBoundControl.SetEnabled(threshold.LowerWarningBound.Enabled);
			this._lowerWarningBoundControl.SetWarningState(warningState4);
			this._enabled.Pressed = !threshold.Ignore;
		}

		// Token: 0x170005D2 RID: 1490
		// (get) Token: 0x06001B9D RID: 7069 RVA: 0x000A0023 File Offset: 0x0009E223
		[Nullable(0)]
		private CollapsibleHeading CName
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<CollapsibleHeading>("CName");
			}
		}

		// Token: 0x170005D3 RID: 1491
		// (get) Token: 0x06001B9E RID: 7070 RVA: 0x000A0030 File Offset: 0x0009E230
		[Nullable(0)]
		private CheckBox CEnabled
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<CheckBox>("CEnabled");
			}
		}

		// Token: 0x170005D4 RID: 1492
		// (get) Token: 0x06001B9F RID: 7071 RVA: 0x000A003D File Offset: 0x0009E23D
		[Nullable(0)]
		private BoxContainer CDangerBounds
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<BoxContainer>("CDangerBounds");
			}
		}

		// Token: 0x170005D5 RID: 1493
		// (get) Token: 0x06001BA0 RID: 7072 RVA: 0x000A004A File Offset: 0x0009E24A
		[Nullable(0)]
		private BoxContainer CWarningBounds
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<BoxContainer>("CWarningBounds");
			}
		}

		// Token: 0x06001BAE RID: 7086 RVA: 0x000A0124 File Offset: 0x0009E324
		static void xaml(IServiceProvider A_0, BoxContainer A_1)
		{
			XamlIlContext.Context<BoxContainer> context = new XamlIlContext.Context<BoxContainer>(A_0, null, "resm:Content.Client.Atmos.Monitor.UI.Widgets.ThresholdControl.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Orientation = 1;
			A_1.Margin = new Thickness(0f, 0f, 0f, 4f);
			Collapsible collapsible = new Collapsible();
			collapsible.Orientation = 1;
			CollapsibleHeading collapsibleHeading = new CollapsibleHeading();
			collapsibleHeading.Name = "CName";
			Control control = collapsibleHeading;
			context.RobustNameScope.Register("CName", control);
			control = collapsibleHeading;
			collapsible.XamlChildren.Add(control);
			CollapsibleBody collapsibleBody = new CollapsibleBody();
			collapsibleBody.Margin = new Thickness(20f, 0f, 0f, 0f);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 0;
			CheckBox checkBox = new CheckBox();
			checkBox.Name = "CEnabled";
			control = checkBox;
			context.RobustNameScope.Register("CEnabled", control);
			checkBox.Text = (string)new LocExtension("Enabled").ProvideValue();
			control = checkBox;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Name = "CDangerBounds";
			control = boxContainer3;
			context.RobustNameScope.Register("CDangerBounds", control);
			boxContainer3.Orientation = 0;
			boxContainer3.Margin = new Thickness(0f, 0f, 0f, 2f);
			control = boxContainer3;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer4 = new BoxContainer();
			boxContainer4.Name = "CWarningBounds";
			control = boxContainer4;
			context.RobustNameScope.Register("CWarningBounds", control);
			boxContainer4.Orientation = 0;
			boxContainer4.Margin = new Thickness(0f, 6f, 0f, 2f);
			control = boxContainer4;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			collapsibleBody.XamlChildren.Add(control);
			control = collapsibleBody;
			collapsible.XamlChildren.Add(control);
			control = collapsible;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06001BAF RID: 7087 RVA: 0x000A03D2 File Offset: 0x0009E5D2
		private static void !XamlIlPopulateTrampoline(ThresholdControl A_0)
		{
			ThresholdControl.Populate:Content.Client.Atmos.Monitor.UI.Widgets.ThresholdControl.xaml(null, A_0);
		}

		// Token: 0x04000DC1 RID: 3521
		private AtmosAlarmThreshold _threshold;

		// Token: 0x04000DC2 RID: 3522
		private AtmosMonitorThresholdType _type;

		// Token: 0x04000DC3 RID: 3523
		private Gas? _gas;

		// Token: 0x04000DC5 RID: 3525
		private ThresholdBoundControl _upperBoundControl;

		// Token: 0x04000DC6 RID: 3526
		private ThresholdBoundControl _lowerBoundControl;

		// Token: 0x04000DC7 RID: 3527
		private ThresholdBoundControl _upperWarningBoundControl;

		// Token: 0x04000DC8 RID: 3528
		private ThresholdBoundControl _lowerWarningBoundControl;
	}
}
