using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.Maths;

namespace Content.Client.NetworkConfigurator
{
	// Token: 0x02000220 RID: 544
	[GenerateTypedNameReferences]
	public sealed class NetworkConfiguratorDeviceList : ScrollContainer
	{
		// Token: 0x06000E31 RID: 3633 RVA: 0x00055F14 File Offset: 0x00054114
		[NullableContext(2)]
		public void UpdateState(NetworkConfiguratorBoundUserInterface ui, [TupleElementNames(new string[]
		{
			"address",
			"name"
		})] [Nullable(new byte[]
		{
			1,
			0,
			1,
			1
		})] HashSet<ValueTuple<string, string>> devices)
		{
			this.DeviceList.RemoveAllChildren();
			foreach (ValueTuple<string, string> savedDevice in devices)
			{
				this.DeviceList.AddChild(NetworkConfiguratorDeviceList.BuildDeviceListRow(ui, savedDevice));
			}
		}

		// Token: 0x06000E32 RID: 3634 RVA: 0x00055F78 File Offset: 0x00054178
		[NullableContext(1)]
		private static BoxContainer BuildDeviceListRow([Nullable(2)] NetworkConfiguratorBoundUserInterface ui, [TupleElementNames(new string[]
		{
			"address",
			"name"
		})] [Nullable(new byte[]
		{
			0,
			1,
			1
		})] ValueTuple<string, string> savedDevice)
		{
			BoxContainer boxContainer = new BoxContainer
			{
				Orientation = 0,
				Margin = new Thickness(8f)
			};
			Label label = new Label
			{
				Text = savedDevice.Item2.Substring(0, Math.Min(11, savedDevice.Item2.Length)),
				SetWidth = 84f
			};
			Label label2 = new Label
			{
				Text = savedDevice.Item1,
				HorizontalExpand = true,
				Align = 1
			};
			TextureButton textureButton = new TextureButton
			{
				StyleClasses = 
				{
					"CrossButtonRed"
				},
				VerticalAlignment = 2,
				Scale = new Vector2(0.5f, 0.5f)
			};
			boxContainer.AddChild(label);
			boxContainer.AddChild(label2);
			if (ui != null)
			{
				boxContainer.AddChild(textureButton);
				textureButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
				{
					ui.OnRemoveButtonPressed(savedDevice.Item1);
				};
			}
			return boxContainer;
		}

		// Token: 0x1700030B RID: 779
		// (get) Token: 0x06000E33 RID: 3635 RVA: 0x0005607F File Offset: 0x0005427F
		private BoxContainer DeviceList
		{
			get
			{
				return base.FindControl<BoxContainer>("DeviceList");
			}
		}

		// Token: 0x06000E34 RID: 3636 RVA: 0x0005608C File Offset: 0x0005428C
		public NetworkConfiguratorDeviceList()
		{
			NetworkConfiguratorDeviceList.!XamlIlPopulateTrampoline(this);
		}

		// Token: 0x06000E35 RID: 3637 RVA: 0x0005609C File Offset: 0x0005429C
		static void xaml(IServiceProvider A_0, ScrollContainer A_1)
		{
			XamlIlContext.Context<ScrollContainer> context = new XamlIlContext.Context<ScrollContainer>(A_0, null, "resm:Content.Client.NetworkConfigurator.NetworkConfiguratorDeviceList.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.HorizontalExpand = true;
			A_1.VerticalExpand = true;
			Control control = new Control();
			control.VerticalExpand = true;
			PanelContainer panelContainer = new PanelContainer();
			string item = "PanelBackgroundBaseDark";
			panelContainer.StyleClasses.Add(item);
			Control control2 = panelContainer;
			control.XamlChildren.Add(control2);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			boxContainer.Name = "DeviceList";
			control2 = boxContainer;
			context.RobustNameScope.Register("DeviceList", control2);
			boxContainer.VerticalExpand = true;
			boxContainer.SeparationOverride = new int?(4);
			control2 = boxContainer;
			control.XamlChildren.Add(control2);
			control2 = control;
			A_1.XamlChildren.Add(control2);
			if ((control2 = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control2.NameScope);
				control2.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06000E36 RID: 3638 RVA: 0x000561E2 File Offset: 0x000543E2
		private static void !XamlIlPopulateTrampoline(NetworkConfiguratorDeviceList A_0)
		{
			NetworkConfiguratorDeviceList.Populate:Content.Client.NetworkConfigurator.NetworkConfiguratorDeviceList.xaml(null, A_0);
		}
	}
}
