using System;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.UserInterface.Controls;
using Content.Shared.Gravity;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;

namespace Content.Client.Gravity.UI
{
	// Token: 0x020002FC RID: 764
	[GenerateTypedNameReferences]
	public sealed class GravityGeneratorWindow : FancyWindow
	{
		// Token: 0x06001327 RID: 4903 RVA: 0x00071D80 File Offset: 0x0006FF80
		[NullableContext(1)]
		public GravityGeneratorWindow(GravityGeneratorBoundUserInterface ui, ClientUserInterfaceComponent component)
		{
			GravityGeneratorWindow.!XamlIlPopulateTrampoline(this);
			IoCManager.InjectDependencies<GravityGeneratorWindow>(this);
			this._owner = ui;
			this.OnButton.Group = this._buttonGroup;
			this.OffButton.Group = this._buttonGroup;
			this.OnButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this._owner.SetPowerSwitch(true);
			};
			this.OffButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this._owner.SetPowerSwitch(false);
			};
			this.EntityView.Sprite = IoCManager.Resolve<IEntityManager>().GetComponent<SpriteComponent>(component.Owner);
		}

		// Token: 0x06001328 RID: 4904 RVA: 0x00071E20 File Offset: 0x00070020
		[NullableContext(1)]
		public void UpdateState(SharedGravityGeneratorComponent.GeneratorState state)
		{
			if (state.On)
			{
				this.OnButton.Pressed = true;
			}
			else
			{
				this.OffButton.Pressed = true;
			}
			this.PowerLabel.Text = Loc.GetString("gravity-generator-window-power-label", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("draw", state.PowerDraw),
				new ValueTuple<string, object>("max", state.PowerDrawMax)
			});
			this.PowerLabel.SetOnlyStyleClass(MathHelper.CloseTo((float)state.PowerDraw, (float)state.PowerDrawMax, 1E-07f) ? "Good" : "Caution");
			this.ChargeBar.Value = (float)state.Charge;
			this.ChargeText.Text = ((float)state.Charge / 255f).ToString("P0");
			Label statusLabel = this.StatusLabel;
			string text;
			switch (state.PowerStatus)
			{
			case GravityGeneratorPowerStatus.Off:
				text = "gravity-generator-window-status-off";
				break;
			case GravityGeneratorPowerStatus.Discharging:
				text = "gravity-generator-window-status-discharging";
				break;
			case GravityGeneratorPowerStatus.Charging:
				text = "gravity-generator-window-status-charging";
				break;
			case GravityGeneratorPowerStatus.FullyCharged:
				text = "gravity-generator-window-status-fully-charged";
				break;
			default:
				throw new ArgumentOutOfRangeException();
			}
			statusLabel.Text = Loc.GetString(text);
			statusLabel = this.StatusLabel;
			switch (state.PowerStatus)
			{
			case GravityGeneratorPowerStatus.Off:
				text = "Danger";
				break;
			case GravityGeneratorPowerStatus.Discharging:
				text = "Caution";
				break;
			case GravityGeneratorPowerStatus.Charging:
				text = "Caution";
				break;
			case GravityGeneratorPowerStatus.FullyCharged:
				text = "Good";
				break;
			default:
				throw new ArgumentOutOfRangeException();
			}
			statusLabel.SetOnlyStyleClass(text);
			this.EtaLabel.Text = ((state.EtaSeconds >= 0) ? Loc.GetString("gravity-generator-window-eta-value", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("left", TimeSpan.FromSeconds((double)state.EtaSeconds))
			}) : Loc.GetString("gravity-generator-window-eta-none"));
			this.EtaLabel.SetOnlyStyleClass((state.EtaSeconds >= 0) ? "Caution" : "Disabled");
		}

		// Token: 0x170003FF RID: 1023
		// (get) Token: 0x06001329 RID: 4905 RVA: 0x00072027 File Offset: 0x00070227
		private Button OnButton
		{
			get
			{
				return base.FindControl<Button>("OnButton");
			}
		}

		// Token: 0x17000400 RID: 1024
		// (get) Token: 0x0600132A RID: 4906 RVA: 0x00072034 File Offset: 0x00070234
		private Button OffButton
		{
			get
			{
				return base.FindControl<Button>("OffButton");
			}
		}

		// Token: 0x17000401 RID: 1025
		// (get) Token: 0x0600132B RID: 4907 RVA: 0x00040AAB File Offset: 0x0003ECAB
		private Label PowerLabel
		{
			get
			{
				return base.FindControl<Label>("PowerLabel");
			}
		}

		// Token: 0x17000402 RID: 1026
		// (get) Token: 0x0600132C RID: 4908 RVA: 0x00072041 File Offset: 0x00070241
		private Label StatusLabel
		{
			get
			{
				return base.FindControl<Label>("StatusLabel");
			}
		}

		// Token: 0x17000403 RID: 1027
		// (get) Token: 0x0600132D RID: 4909 RVA: 0x0007204E File Offset: 0x0007024E
		private Label EtaLabel
		{
			get
			{
				return base.FindControl<Label>("EtaLabel");
			}
		}

		// Token: 0x17000404 RID: 1028
		// (get) Token: 0x0600132E RID: 4910 RVA: 0x00040AC5 File Offset: 0x0003ECC5
		private ProgressBar ChargeBar
		{
			get
			{
				return base.FindControl<ProgressBar>("ChargeBar");
			}
		}

		// Token: 0x17000405 RID: 1029
		// (get) Token: 0x0600132F RID: 4911 RVA: 0x0007205B File Offset: 0x0007025B
		private Label ChargeText
		{
			get
			{
				return base.FindControl<Label>("ChargeText");
			}
		}

		// Token: 0x17000406 RID: 1030
		// (get) Token: 0x06001330 RID: 4912 RVA: 0x00072068 File Offset: 0x00070268
		private SpriteView EntityView
		{
			get
			{
				return base.FindControl<SpriteView>("EntityView");
			}
		}

		// Token: 0x06001333 RID: 4915 RVA: 0x00072094 File Offset: 0x00070294
		static void xaml(IServiceProvider A_0, FancyWindow A_1)
		{
			XamlIlContext.Context<FancyWindow> context = new XamlIlContext.Context<FancyWindow>(A_0, null, "resm:Content.Client.Gravity.UI.GravityGeneratorWindow.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Title = (string)new LocExtension("gravity-generator-window-title").ProvideValue();
			A_1.MinSize = new Vector2(270f, 130f);
			A_1.SetSize = new Vector2(360f, 180f);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Margin = new Thickness(4f, 0f, 4f, 0f);
			boxContainer.Orientation = 0;
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 1;
			boxContainer2.HorizontalExpand = true;
			GridContainer gridContainer = new GridContainer();
			gridContainer.Margin = new Thickness(2f, 0f, 0f, 0f);
			gridContainer.Columns = 2;
			Label label = new Label();
			label.Text = (string)new LocExtension("gravity-generator-window-power").ProvideValue();
			label.HorizontalExpand = true;
			string item = "StatusFieldTitle";
			label.StyleClasses.Add(item);
			Control control = label;
			gridContainer.XamlChildren.Add(control);
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 0;
			boxContainer3.MinWidth = 120f;
			Button button = new Button();
			button.Name = "OnButton";
			control = button;
			context.RobustNameScope.Register("OnButton", control);
			button.Text = (string)new LocExtension("gravity-generator-window-power-on").ProvideValue();
			item = "OpenRight";
			button.StyleClasses.Add(item);
			control = button;
			boxContainer3.XamlChildren.Add(control);
			Button button2 = new Button();
			button2.Name = "OffButton";
			control = button2;
			context.RobustNameScope.Register("OffButton", control);
			button2.Text = (string)new LocExtension("gravity-generator-window-power-off").ProvideValue();
			item = "OpenLeft";
			button2.StyleClasses.Add(item);
			control = button2;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			gridContainer.XamlChildren.Add(control);
			control = new Control();
			gridContainer.XamlChildren.Add(control);
			Label label2 = new Label();
			label2.Name = "PowerLabel";
			control = label2;
			context.RobustNameScope.Register("PowerLabel", control);
			label2.Text = "0 / 0 W";
			control = label2;
			gridContainer.XamlChildren.Add(control);
			Label label3 = new Label();
			label3.Text = (string)new LocExtension("gravity-generator-window-status").ProvideValue();
			item = "StatusFieldTitle";
			label3.StyleClasses.Add(item);
			control = label3;
			gridContainer.XamlChildren.Add(control);
			Label label4 = new Label();
			label4.Name = "StatusLabel";
			control = label4;
			context.RobustNameScope.Register("StatusLabel", control);
			label4.Text = (string)new LocExtension("gravity-generator-window-status-fully-charged").ProvideValue();
			control = label4;
			gridContainer.XamlChildren.Add(control);
			Label label5 = new Label();
			label5.Text = (string)new LocExtension("gravity-generator-window-eta").ProvideValue();
			item = "StatusFieldTitle";
			label5.StyleClasses.Add(item);
			control = label5;
			gridContainer.XamlChildren.Add(control);
			Label label6 = new Label();
			label6.Name = "EtaLabel";
			control = label6;
			context.RobustNameScope.Register("EtaLabel", control);
			label6.Text = "N/A";
			control = label6;
			gridContainer.XamlChildren.Add(control);
			Label label7 = new Label();
			label7.Text = (string)new LocExtension("gravity-generator-window-charge").ProvideValue();
			item = "StatusFieldTitle";
			label7.StyleClasses.Add(item);
			control = label7;
			gridContainer.XamlChildren.Add(control);
			ProgressBar progressBar = new ProgressBar();
			progressBar.Name = "ChargeBar";
			control = progressBar;
			context.RobustNameScope.Register("ChargeBar", control);
			progressBar.MaxValue = 255f;
			Label label8 = new Label();
			label8.Name = "ChargeText";
			control = label8;
			context.RobustNameScope.Register("ChargeText", control);
			label8.Margin = new Thickness(4f, 0f, 4f, 0f);
			label8.Text = "0 %";
			control = label8;
			progressBar.XamlChildren.Add(control);
			control = progressBar;
			gridContainer.XamlChildren.Add(control);
			control = gridContainer;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			PanelContainer panelContainer = new PanelContainer();
			panelContainer.Margin = new Thickness(12f, 0f, 0f, 0f);
			item = "Inset";
			panelContainer.StyleClasses.Add(item);
			panelContainer.VerticalAlignment = 2;
			SpriteView spriteView = new SpriteView();
			spriteView.Name = "EntityView";
			control = spriteView;
			context.RobustNameScope.Register("EntityView", control);
			spriteView.SetSize = new Vector2(96f, 96f);
			spriteView.OverrideDirection = new Direction?(0);
			control = spriteView;
			panelContainer.XamlChildren.Add(control);
			control = panelContainer;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06001334 RID: 4916 RVA: 0x000726CD File Offset: 0x000708CD
		private static void !XamlIlPopulateTrampoline(GravityGeneratorWindow A_0)
		{
			GravityGeneratorWindow.Populate:Content.Client.Gravity.UI.GravityGeneratorWindow.xaml(null, A_0);
		}

		// Token: 0x04000998 RID: 2456
		[Nullable(1)]
		private readonly ButtonGroup _buttonGroup = new ButtonGroup();

		// Token: 0x04000999 RID: 2457
		[Nullable(1)]
		private readonly GravityGeneratorBoundUserInterface _owner;
	}
}
