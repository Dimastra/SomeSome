using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Shared.Research.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.Utility;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;
using Robust.Shared.Prototypes;

namespace Content.Client.Research.UI
{
	// Token: 0x02000172 RID: 370
	[GenerateTypedNameReferences]
	public sealed class ResearchConsoleMenu : DefaultWindow
	{
		// Token: 0x170001BB RID: 443
		// (get) Token: 0x060009A5 RID: 2469 RVA: 0x00037E60 File Offset: 0x00036060
		[Nullable(1)]
		public ResearchConsoleBoundUserInterface Owner { [NullableContext(1)] get; }

		// Token: 0x060009A6 RID: 2470 RVA: 0x00037E68 File Offset: 0x00036068
		[NullableContext(1)]
		public ResearchConsoleMenu(ResearchConsoleBoundUserInterface owner)
		{
			ResearchConsoleMenu.!XamlIlPopulateTrampoline(this);
			IoCManager.InjectDependencies<ResearchConsoleMenu>(this);
			this.Owner = owner;
			this.UnlockedTechnologies.OnItemSelected += this.UnlockedTechnologySelected;
			this.UnlockableTechnologies.OnItemSelected += this.UnlockableTechnologySelected;
			this.FutureTechnologies.OnItemSelected += this.FutureTechnologySelected;
			this.PointLabel.Text = Loc.GetString("research-console-menu-research-points-text", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("points", 0)
			});
			this.PointsPerSecondLabel.Text = Loc.GetString("research-console-menu-points-per-second-text", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("pointsPerSecond", 0)
			});
			this.UnlockButton.Text = Loc.GetString("research-console-menu-server-unlock-button");
			this.UnlockButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this.CleanSelectedTechnology();
			};
			this.Populate();
		}

		// Token: 0x060009A7 RID: 2471 RVA: 0x00037F8C File Offset: 0x0003618C
		private void CleanSelectedTechnology()
		{
			this.UnlockButton.Disabled = true;
			this.TechnologyIcon.Texture = Texture.Transparent;
			this.TechnologyName.Text = string.Empty;
			this.TechnologyDescription.Text = string.Empty;
			this.TechnologyRequirements.Text = string.Empty;
		}

		// Token: 0x060009A8 RID: 2472 RVA: 0x00037FE5 File Offset: 0x000361E5
		[NullableContext(1)]
		private void UnlockedTechnologySelected(ItemList.ItemListSelectedEventArgs obj)
		{
			this.TechnologySelected = this._unlockedTechnologyPrototypes[obj.ItemIndex];
			this.UnlockButton.Disabled = true;
			this.PopulateSelectedTechnology();
		}

		// Token: 0x060009A9 RID: 2473 RVA: 0x00038010 File Offset: 0x00036210
		[NullableContext(1)]
		private void UnlockableTechnologySelected(ItemList.ItemListSelectedEventArgs obj)
		{
			this.TechnologySelected = this._unlockableTechnologyPrototypes[obj.ItemIndex];
			this.UnlockButton.Disabled = (this.Owner.Points < this.TechnologySelected.RequiredPoints);
			this.PopulateSelectedTechnology();
		}

		// Token: 0x060009AA RID: 2474 RVA: 0x0003805D File Offset: 0x0003625D
		[NullableContext(1)]
		private void FutureTechnologySelected(ItemList.ItemListSelectedEventArgs obj)
		{
			this.TechnologySelected = this._futureTechnologyPrototypes[obj.ItemIndex];
			this.UnlockButton.Disabled = true;
			this.PopulateSelectedTechnology();
		}

		// Token: 0x060009AB RID: 2475 RVA: 0x00038088 File Offset: 0x00036288
		public void PopulateItemLists()
		{
			this.UnlockedTechnologies.Clear();
			this.UnlockableTechnologies.Clear();
			this.FutureTechnologies.Clear();
			this._unlockedTechnologyPrototypes.Clear();
			this._unlockableTechnologyPrototypes.Clear();
			this._futureTechnologyPrototypes.Clear();
			foreach (TechnologyPrototype technologyPrototype in IoCManager.Resolve<IPrototypeManager>().EnumeratePrototypes<TechnologyPrototype>())
			{
				string techName = this.GetTechName(technologyPrototype);
				if (this.Owner.IsTechnologyUnlocked(technologyPrototype))
				{
					this.UnlockedTechnologies.AddItem(techName, SpriteSpecifierExt.Frame0(technologyPrototype.Icon), true);
					this._unlockedTechnologyPrototypes.Add(technologyPrototype);
				}
				else if (this.Owner.CanUnlockTechnology(technologyPrototype))
				{
					this.UnlockableTechnologies.AddItem(techName, SpriteSpecifierExt.Frame0(technologyPrototype.Icon), true);
					this._unlockableTechnologyPrototypes.Add(technologyPrototype);
				}
				else
				{
					this.FutureTechnologies.AddItem(techName, SpriteSpecifierExt.Frame0(technologyPrototype.Icon), true);
					this._futureTechnologyPrototypes.Add(technologyPrototype);
				}
			}
		}

		// Token: 0x060009AC RID: 2476 RVA: 0x000381B4 File Offset: 0x000363B4
		[NullableContext(1)]
		private string GetTechName(TechnologyPrototype prototype)
		{
			string name = prototype.Name;
			if (name != null)
			{
				return Loc.GetString(name);
			}
			return prototype.ID;
		}

		// Token: 0x060009AD RID: 2477 RVA: 0x000381D8 File Offset: 0x000363D8
		public void PopulateSelectedTechnology()
		{
			if (this.TechnologySelected == null)
			{
				this.TechnologyName.Text = string.Empty;
				this.TechnologyDescription.Text = string.Empty;
				this.TechnologyRequirements.Text = string.Empty;
				return;
			}
			this.TechnologyIcon.Texture = SpriteSpecifierExt.Frame0(this.TechnologySelected.Icon);
			this.TechnologyName.Text = this.GetTechName(this.TechnologySelected);
			string @string = Loc.GetString(this.TechnologySelected.Description);
			Label technologyDescription = this.TechnologyDescription;
			string str = @string;
			DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(2, 1);
			defaultInterpolatedStringHandler.AppendLiteral("\n");
			defaultInterpolatedStringHandler.AppendFormatted<int>(this.TechnologySelected.RequiredPoints);
			defaultInterpolatedStringHandler.AppendLiteral(" ");
			technologyDescription.Text = str + defaultInterpolatedStringHandler.ToStringAndClear() + Loc.GetString("research-console-menu-research-points-text", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("points", this.Owner.Points)
			}).ToLowerInvariant();
			this.TechnologyRequirements.Text = Loc.GetString("research-console-tech-requirements-none");
			IPrototypeManager prototypeManager = IoCManager.Resolve<IPrototypeManager>();
			for (int i = 0; i < this.TechnologySelected.RequiredTechnologies.Count; i++)
			{
				string text = this.TechnologySelected.RequiredTechnologies[i];
				TechnologyPrototype prototype;
				if (prototypeManager.TryIndex<TechnologyPrototype>(text, ref prototype))
				{
					string techName = this.GetTechName(prototype);
					if (i == 0)
					{
						this.TechnologyRequirements.Text = Loc.GetString("research-console-tech-requirements-prototype-name", new ValueTuple<string, object>[]
						{
							new ValueTuple<string, object>("prototypeName", techName)
						});
					}
					else
					{
						Label technologyRequirements = this.TechnologyRequirements;
						technologyRequirements.Text = technologyRequirements.Text + ", " + techName;
					}
				}
			}
		}

		// Token: 0x060009AE RID: 2478 RVA: 0x00038394 File Offset: 0x00036594
		public void PopulatePoints()
		{
			this.PointLabel.Text = Loc.GetString("research-console-menu-research-points-text", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("points", this.Owner.Points)
			});
			this.PointsPerSecondLabel.Text = Loc.GetString("research-console-menu-points-per-second-text", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("pointsPerSecond", this.Owner.PointsPerSecond)
			});
		}

		// Token: 0x060009AF RID: 2479 RVA: 0x00038419 File Offset: 0x00036619
		public void Populate()
		{
			this.PopulatePoints();
			this.PopulateSelectedTechnology();
			this.PopulateItemLists();
		}

		// Token: 0x170001BC RID: 444
		// (get) Token: 0x060009B0 RID: 2480 RVA: 0x0003842D File Offset: 0x0003662D
		private ItemList UnlockedTechnologies
		{
			get
			{
				return base.FindControl<ItemList>("UnlockedTechnologies");
			}
		}

		// Token: 0x170001BD RID: 445
		// (get) Token: 0x060009B1 RID: 2481 RVA: 0x0003843A File Offset: 0x0003663A
		private ItemList UnlockableTechnologies
		{
			get
			{
				return base.FindControl<ItemList>("UnlockableTechnologies");
			}
		}

		// Token: 0x170001BE RID: 446
		// (get) Token: 0x060009B2 RID: 2482 RVA: 0x00038447 File Offset: 0x00036647
		private ItemList FutureTechnologies
		{
			get
			{
				return base.FindControl<ItemList>("FutureTechnologies");
			}
		}

		// Token: 0x170001BF RID: 447
		// (get) Token: 0x060009B3 RID: 2483 RVA: 0x00038454 File Offset: 0x00036654
		private TextureRect TechnologyIcon
		{
			get
			{
				return base.FindControl<TextureRect>("TechnologyIcon");
			}
		}

		// Token: 0x170001C0 RID: 448
		// (get) Token: 0x060009B4 RID: 2484 RVA: 0x00038461 File Offset: 0x00036661
		private Label TechnologyName
		{
			get
			{
				return base.FindControl<Label>("TechnologyName");
			}
		}

		// Token: 0x170001C1 RID: 449
		// (get) Token: 0x060009B5 RID: 2485 RVA: 0x0003846E File Offset: 0x0003666E
		private Label TechnologyDescription
		{
			get
			{
				return base.FindControl<Label>("TechnologyDescription");
			}
		}

		// Token: 0x170001C2 RID: 450
		// (get) Token: 0x060009B6 RID: 2486 RVA: 0x0003847B File Offset: 0x0003667B
		private Label TechnologyRequirements
		{
			get
			{
				return base.FindControl<Label>("TechnologyRequirements");
			}
		}

		// Token: 0x170001C3 RID: 451
		// (get) Token: 0x060009B7 RID: 2487 RVA: 0x00038488 File Offset: 0x00036688
		private Label PointLabel
		{
			get
			{
				return base.FindControl<Label>("PointLabel");
			}
		}

		// Token: 0x170001C4 RID: 452
		// (get) Token: 0x060009B8 RID: 2488 RVA: 0x00038495 File Offset: 0x00036695
		private Label PointsPerSecondLabel
		{
			get
			{
				return base.FindControl<Label>("PointsPerSecondLabel");
			}
		}

		// Token: 0x170001C5 RID: 453
		// (get) Token: 0x060009B9 RID: 2489 RVA: 0x000027FF File Offset: 0x000009FF
		public Button ServerSelectionButton
		{
			get
			{
				return base.FindControl<Button>("ServerSelectionButton");
			}
		}

		// Token: 0x170001C6 RID: 454
		// (get) Token: 0x060009BA RID: 2490 RVA: 0x000384A2 File Offset: 0x000366A2
		public Button ServerSyncButton
		{
			get
			{
				return base.FindControl<Button>("ServerSyncButton");
			}
		}

		// Token: 0x170001C7 RID: 455
		// (get) Token: 0x060009BB RID: 2491 RVA: 0x000384AF File Offset: 0x000366AF
		public Button UnlockButton
		{
			get
			{
				return base.FindControl<Button>("UnlockButton");
			}
		}

		// Token: 0x060009BD RID: 2493 RVA: 0x000384C4 File Offset: 0x000366C4
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.Research.UI.ResearchConsoleMenu.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Title = (string)new LocExtension("research-console-menu-title").ProvideValue();
			A_1.MinSize = new Vector2(800f, 400f);
			A_1.SetSize = new Vector2(800f, 400f);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			boxContainer.HorizontalExpand = true;
			boxContainer.VerticalExpand = true;
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 0;
			boxContainer2.HorizontalExpand = true;
			boxContainer2.VerticalExpand = true;
			boxContainer2.SizeFlagsStretchRatio = 2f;
			boxContainer2.SeparationOverride = new int?(10);
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 1;
			boxContainer3.HorizontalExpand = true;
			boxContainer3.VerticalExpand = true;
			Control control = new Label
			{
				Text = (string)new LocExtension("research-console-menu-unlocked-technologies-label").ProvideValue()
			};
			boxContainer3.XamlChildren.Add(control);
			ItemList itemList = new ItemList();
			itemList.Name = "UnlockedTechnologies";
			control = itemList;
			context.RobustNameScope.Register("UnlockedTechnologies", control);
			itemList.SelectMode = 3;
			itemList.HorizontalExpand = true;
			itemList.VerticalExpand = true;
			control = itemList;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer2.XamlChildren.Add(control);
			BoxContainer boxContainer4 = new BoxContainer();
			boxContainer4.Orientation = 1;
			boxContainer4.HorizontalExpand = true;
			boxContainer4.VerticalExpand = true;
			control = new Label
			{
				Text = (string)new LocExtension("research-console-menu-unlockable-technologies-label").ProvideValue()
			};
			boxContainer4.XamlChildren.Add(control);
			ItemList itemList2 = new ItemList();
			itemList2.Name = "UnlockableTechnologies";
			control = itemList2;
			context.RobustNameScope.Register("UnlockableTechnologies", control);
			itemList2.SelectMode = 3;
			itemList2.HorizontalExpand = true;
			itemList2.VerticalExpand = true;
			control = itemList2;
			boxContainer4.XamlChildren.Add(control);
			control = boxContainer4;
			boxContainer2.XamlChildren.Add(control);
			BoxContainer boxContainer5 = new BoxContainer();
			boxContainer5.Orientation = 1;
			boxContainer5.HorizontalExpand = true;
			boxContainer5.VerticalExpand = true;
			control = new Label
			{
				Text = (string)new LocExtension("research-console-menu-future-technologies-label").ProvideValue()
			};
			boxContainer5.XamlChildren.Add(control);
			ItemList itemList3 = new ItemList();
			itemList3.Name = "FutureTechnologies";
			control = itemList3;
			context.RobustNameScope.Register("FutureTechnologies", control);
			itemList3.SelectMode = 3;
			itemList3.HorizontalExpand = true;
			itemList3.VerticalExpand = true;
			control = itemList3;
			boxContainer5.XamlChildren.Add(control);
			control = boxContainer5;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer6 = new BoxContainer();
			boxContainer6.Orientation = 0;
			boxContainer6.HorizontalExpand = true;
			boxContainer6.VerticalExpand = true;
			boxContainer6.SizeFlagsStretchRatio = 1f;
			TextureRect textureRect = new TextureRect();
			textureRect.Name = "TechnologyIcon";
			control = textureRect;
			context.RobustNameScope.Register("TechnologyIcon", control);
			textureRect.HorizontalExpand = true;
			textureRect.VerticalExpand = true;
			textureRect.SizeFlagsStretchRatio = 1f;
			textureRect.Stretch = 7;
			control = textureRect;
			boxContainer6.XamlChildren.Add(control);
			BoxContainer boxContainer7 = new BoxContainer();
			boxContainer7.Orientation = 1;
			boxContainer7.HorizontalExpand = true;
			boxContainer7.VerticalExpand = true;
			boxContainer7.SizeFlagsStretchRatio = 3f;
			Label label = new Label();
			label.Name = "TechnologyName";
			control = label;
			context.RobustNameScope.Register("TechnologyName", control);
			control = label;
			boxContainer7.XamlChildren.Add(control);
			Label label2 = new Label();
			label2.Name = "TechnologyDescription";
			control = label2;
			context.RobustNameScope.Register("TechnologyDescription", control);
			control = label2;
			boxContainer7.XamlChildren.Add(control);
			Label label3 = new Label();
			label3.Name = "TechnologyRequirements";
			control = label3;
			context.RobustNameScope.Register("TechnologyRequirements", control);
			control = label3;
			boxContainer7.XamlChildren.Add(control);
			control = boxContainer7;
			boxContainer6.XamlChildren.Add(control);
			BoxContainer boxContainer8 = new BoxContainer();
			boxContainer8.Orientation = 1;
			boxContainer8.HorizontalExpand = true;
			boxContainer8.VerticalExpand = true;
			boxContainer8.SizeFlagsStretchRatio = 1f;
			Label label4 = new Label();
			label4.Name = "PointLabel";
			control = label4;
			context.RobustNameScope.Register("PointLabel", control);
			control = label4;
			boxContainer8.XamlChildren.Add(control);
			Label label5 = new Label();
			label5.Name = "PointsPerSecondLabel";
			control = label5;
			context.RobustNameScope.Register("PointsPerSecondLabel", control);
			control = label5;
			boxContainer8.XamlChildren.Add(control);
			BoxContainer boxContainer9 = new BoxContainer();
			boxContainer9.Orientation = 1;
			boxContainer9.Align = 2;
			boxContainer9.HorizontalExpand = true;
			boxContainer9.VerticalExpand = true;
			Button button = new Button();
			button.Name = "ServerSelectionButton";
			control = button;
			context.RobustNameScope.Register("ServerSelectionButton", control);
			button.Access = new AccessLevel?(0);
			button.Text = (string)new LocExtension("research-console-menu-server-selection-button").ProvideValue();
			control = button;
			boxContainer9.XamlChildren.Add(control);
			Button button2 = new Button();
			button2.Name = "ServerSyncButton";
			control = button2;
			context.RobustNameScope.Register("ServerSyncButton", control);
			button2.Access = new AccessLevel?(0);
			button2.Text = (string)new LocExtension("research-console-menu-server-sync-button").ProvideValue();
			control = button2;
			boxContainer9.XamlChildren.Add(control);
			Button button3 = new Button();
			button3.Name = "UnlockButton";
			control = button3;
			context.RobustNameScope.Register("UnlockButton", control);
			button3.Access = new AccessLevel?(0);
			button3.Disabled = true;
			control = button3;
			boxContainer9.XamlChildren.Add(control);
			control = boxContainer9;
			boxContainer8.XamlChildren.Add(control);
			control = boxContainer8;
			boxContainer6.XamlChildren.Add(control);
			control = boxContainer6;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x060009BE RID: 2494 RVA: 0x00038C5C File Offset: 0x00036E5C
		private static void !XamlIlPopulateTrampoline(ResearchConsoleMenu A_0)
		{
			ResearchConsoleMenu.Populate:Content.Client.Research.UI.ResearchConsoleMenu.xaml(null, A_0);
		}

		// Token: 0x040004D2 RID: 1234
		[Nullable(1)]
		private readonly List<TechnologyPrototype> _unlockedTechnologyPrototypes = new List<TechnologyPrototype>();

		// Token: 0x040004D3 RID: 1235
		[Nullable(1)]
		private readonly List<TechnologyPrototype> _unlockableTechnologyPrototypes = new List<TechnologyPrototype>();

		// Token: 0x040004D4 RID: 1236
		[Nullable(1)]
		private readonly List<TechnologyPrototype> _futureTechnologyPrototypes = new List<TechnologyPrototype>();

		// Token: 0x040004D5 RID: 1237
		[Nullable(2)]
		public TechnologyPrototype TechnologySelected;
	}
}
