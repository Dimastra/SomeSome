using System;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.Stylesheets;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;
using Robust.Shared.Timing;

namespace Content.Client.Voting.UI
{
	// Token: 0x0200004C RID: 76
	[GenerateTypedNameReferences]
	public sealed class VotePopup : Control
	{
		// Token: 0x0600015D RID: 349 RVA: 0x0000B338 File Offset: 0x00009538
		[NullableContext(1)]
		public VotePopup(VoteManager.ActiveVote vote)
		{
			VotePopup <>4__this = this;
			this._vote = vote;
			IoCManager.InjectDependencies<VotePopup>(this);
			VotePopup.!XamlIlPopulateTrampoline(this);
			base.Stylesheet = IoCManager.Resolve<IStylesheetManager>().SheetSpace;
			base.Modulate = Color.White.WithAlpha(0.75f);
			this._voteButtons = new Button[vote.Entries.Length];
			ButtonGroup group = new ButtonGroup();
			for (int i = 0; i < this._voteButtons.Length; i++)
			{
				Button button = new Button
				{
					ToggleMode = true,
					Group = group
				};
				this._voteButtons[i] = button;
				this.VoteOptionsContainer.AddChild(button);
				int i1 = i;
				button.OnPressed += delegate(BaseButton.ButtonEventArgs _)
				{
					<>4__this._voteManager.SendCastVote(vote.Id, i1);
				};
			}
		}

		// Token: 0x0600015E RID: 350 RVA: 0x0000B428 File Offset: 0x00009628
		public void UpdateData()
		{
			this.VoteTitle.Text = this._vote.Title;
			this.VoteCaller.Text = Loc.GetString("ui-vote-created", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("initiator", this._vote.Initiator)
			});
			for (int i = 0; i < this._voteButtons.Length; i++)
			{
				VoteManager.VoteEntry voteEntry = this._vote.Entries[i];
				this._voteButtons[i].Text = Loc.GetString("ui-vote-button", new ValueTuple<string, object>[]
				{
					new ValueTuple<string, object>("text", voteEntry.Text),
					new ValueTuple<string, object>("votes", voteEntry.Votes)
				});
				int? ourVote = this._vote.OurVote;
				int num = i;
				if (ourVote.GetValueOrDefault() == num & ourVote != null)
				{
					this._voteButtons[i].Pressed = true;
				}
			}
		}

		// Token: 0x0600015F RID: 351 RVA: 0x0000B52C File Offset: 0x0000972C
		protected override void FrameUpdate(FrameEventArgs args)
		{
			TimeSpan realTime = this._gameTiming.RealTime;
			TimeSpan timeSpan = this._vote.EndTime - realTime;
			if (timeSpan < TimeSpan.Zero)
			{
				timeSpan = TimeSpan.Zero;
			}
			timeSpan = TimeSpan.FromSeconds(Math.Ceiling(timeSpan.TotalSeconds));
			this.TimeLeftBar.Value = Math.Min(1f, (float)((realTime.TotalSeconds - this._vote.StartTime.TotalSeconds) / (this._vote.EndTime.TotalSeconds - this._vote.StartTime.TotalSeconds)));
			Label timeLeftText = this.TimeLeftText;
			DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(0, 1);
			defaultInterpolatedStringHandler.AppendFormatted<TimeSpan>(timeSpan, "m\\:ss");
			timeLeftText.Text = defaultInterpolatedStringHandler.ToStringAndClear();
		}

		// Token: 0x1700002D RID: 45
		// (get) Token: 0x06000160 RID: 352 RVA: 0x0000B5F4 File Offset: 0x000097F4
		private Label VoteCaller
		{
			get
			{
				return base.FindControl<Label>("VoteCaller");
			}
		}

		// Token: 0x1700002E RID: 46
		// (get) Token: 0x06000161 RID: 353 RVA: 0x0000B601 File Offset: 0x00009801
		private Label VoteTitle
		{
			get
			{
				return base.FindControl<Label>("VoteTitle");
			}
		}

		// Token: 0x1700002F RID: 47
		// (get) Token: 0x06000162 RID: 354 RVA: 0x0000B60E File Offset: 0x0000980E
		private GridContainer VoteOptionsContainer
		{
			get
			{
				return base.FindControl<GridContainer>("VoteOptionsContainer");
			}
		}

		// Token: 0x17000030 RID: 48
		// (get) Token: 0x06000163 RID: 355 RVA: 0x0000B61B File Offset: 0x0000981B
		private ProgressBar TimeLeftBar
		{
			get
			{
				return base.FindControl<ProgressBar>("TimeLeftBar");
			}
		}

		// Token: 0x17000031 RID: 49
		// (get) Token: 0x06000164 RID: 356 RVA: 0x0000B628 File Offset: 0x00009828
		private Label TimeLeftText
		{
			get
			{
				return base.FindControl<Label>("TimeLeftText");
			}
		}

		// Token: 0x06000165 RID: 357 RVA: 0x0000B638 File Offset: 0x00009838
		static void xaml(IServiceProvider A_0, Control A_1)
		{
			XamlIlContext.Context<Control> context = new XamlIlContext.Context<Control>(A_0, null, "resm:Content.Client.Voting.UI.VotePopup.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.MinWidth = 300f;
			PanelContainer panelContainer = new PanelContainer();
			string item = "AngleRect";
			panelContainer.StyleClasses.Add(item);
			Control control = panelContainer;
			A_1.XamlChildren.Add(control);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Margin = new Thickness(4f, 4f, 4f, 4f);
			boxContainer.Orientation = 1;
			Label label = new Label();
			label.Name = "VoteCaller";
			control = label;
			context.RobustNameScope.Register("VoteCaller", control);
			control = label;
			boxContainer.XamlChildren.Add(control);
			Label label2 = new Label();
			label2.Name = "VoteTitle";
			control = label2;
			context.RobustNameScope.Register("VoteTitle", control);
			control = label2;
			boxContainer.XamlChildren.Add(control);
			GridContainer gridContainer = new GridContainer();
			gridContainer.Columns = 3;
			gridContainer.Name = "VoteOptionsContainer";
			control = gridContainer;
			context.RobustNameScope.Register("VoteOptionsContainer", control);
			control = gridContainer;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 0;
			ProgressBar progressBar = new ProgressBar();
			progressBar.Margin = new Thickness(4f, 4f, 4f, 4f);
			progressBar.HorizontalExpand = true;
			progressBar.Name = "TimeLeftBar";
			control = progressBar;
			context.RobustNameScope.Register("TimeLeftBar", control);
			progressBar.MinValue = 0f;
			progressBar.MaxValue = 1f;
			control = progressBar;
			boxContainer2.XamlChildren.Add(control);
			Label label3 = new Label();
			label3.Name = "TimeLeftText";
			control = label3;
			context.RobustNameScope.Register("TimeLeftText", control);
			control = label3;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06000166 RID: 358 RVA: 0x0000B8D6 File Offset: 0x00009AD6
		private static void !XamlIlPopulateTrampoline(VotePopup A_0)
		{
			VotePopup.Populate:Content.Client.Voting.UI.VotePopup.xaml(null, A_0);
		}

		// Token: 0x040000ED RID: 237
		[Nullable(1)]
		[Dependency]
		private readonly IGameTiming _gameTiming;

		// Token: 0x040000EE RID: 238
		[Nullable(1)]
		[Dependency]
		private readonly IVoteManager _voteManager;

		// Token: 0x040000EF RID: 239
		[Nullable(1)]
		private readonly VoteManager.ActiveVote _vote;

		// Token: 0x040000F0 RID: 240
		[Nullable(1)]
		private readonly Button[] _voteButtons;
	}
}
