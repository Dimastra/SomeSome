using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.Stylesheets;
using Content.Shared.Decals;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.Utility;
using Robust.Shared.GameObjects;
using Robust.Shared.Maths;

namespace Content.Client.Decals.UI
{
	// Token: 0x0200035D RID: 861
	[GenerateTypedNameReferences]
	public sealed class DecalPlacerWindow : DefaultWindow
	{
		// Token: 0x06001547 RID: 5447 RVA: 0x0007D228 File Offset: 0x0007B428
		public DecalPlacerWindow()
		{
			DecalPlacerWindow.!XamlIlPopulateTrampoline(this);
			this._decalPlacementSystem = EntitySystem.Get<DecalPlacementSystem>();
			this.RotationSpinBox = new FloatSpinBox(90f, 0)
			{
				HorizontalExpand = true
			};
			this.SpinBoxContainer.AddChild(this.RotationSpinBox);
			this.Search.OnTextChanged += delegate(LineEdit.LineEditEventArgs _)
			{
				this.RefreshList();
			};
			ColorSelectorSliders colorPicker = this.ColorPicker;
			colorPicker.OnColorChanged = (Action<Color>)Delegate.Combine(colorPicker.OnColorChanged, new Action<Color>(this.OnColorPicked));
			this.PickerOpen.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				if (this._picker == null)
				{
					this._picker = new PaletteColorPicker();
					this._picker.OpenToLeft();
					this._picker.PaletteList.OnItemSelected += delegate(ItemList.ItemListSelectedEventArgs args)
					{
						Color value = (args.ItemList.GetSelected().First<ItemList.Item>().Metadata as Color?).Value;
						this.ColorPicker.Color = value;
						this.OnColorPicked(value);
					};
					return;
				}
				if (this._picker.IsOpen)
				{
					this._picker.Close();
					return;
				}
				this._picker.Open();
			};
			this.RotationSpinBox.OnValueChanged += delegate(FloatSpinBox.FloatSpinBoxEventArgs args)
			{
				this._rotation = args.Value;
				this.UpdateDecalPlacementInfo();
			};
			this.EnableColor.OnToggled += delegate(BaseButton.ButtonToggledEventArgs args)
			{
				this._useColor = args.Pressed;
				this.UpdateDecalPlacementInfo();
				this.RefreshList();
			};
			this.EnableSnap.OnToggled += delegate(BaseButton.ButtonToggledEventArgs args)
			{
				this._snap = args.Pressed;
				this.UpdateDecalPlacementInfo();
			};
			this.EnableCleanable.OnToggled += delegate(BaseButton.ButtonToggledEventArgs args)
			{
				this._cleanable = args.Pressed;
				this.UpdateDecalPlacementInfo();
			};
			this.ZIndexSpinBox.ValueChanged += this.ZIndexSpinboxChanged;
		}

		// Token: 0x06001548 RID: 5448 RVA: 0x0007D348 File Offset: 0x0007B548
		private void OnColorPicked(Color color)
		{
			this._color = color;
			this.UpdateDecalPlacementInfo();
			this.RefreshList();
		}

		// Token: 0x06001549 RID: 5449 RVA: 0x0007D360 File Offset: 0x0007B560
		private void UpdateDecalPlacementInfo()
		{
			if (this._selected == null)
			{
				return;
			}
			Color color = this._useColor ? this._color : Color.White;
			this._decalPlacementSystem.UpdateDecalInfo(this._selected, color, this._rotation, this._snap, this._zIndex, this._cleanable);
		}

		// Token: 0x0600154A RID: 5450 RVA: 0x0007D3B8 File Offset: 0x0007B5B8
		private void RefreshList()
		{
			this.Grid.RemoveAllChildren();
			if (this._decals == null)
			{
				return;
			}
			string text = this.Search.Text;
			foreach (KeyValuePair<string, Texture> keyValuePair in this._decals)
			{
				string text2;
				Texture texture;
				keyValuePair.Deconstruct(out text2, out texture);
				string text3 = text2;
				Texture textureNormal = texture;
				if (text3.ToLowerInvariant().Contains(text.ToLowerInvariant()))
				{
					TextureButton textureButton = new TextureButton
					{
						TextureNormal = textureNormal,
						Name = text3,
						ToolTip = text3,
						Modulate = (this._useColor ? this._color : Color.White)
					};
					textureButton.OnPressed += this.ButtonOnPressed;
					if (this._selected == text3)
					{
						PanelContainer panelContainer = new PanelContainer();
						panelContainer.PanelOverride = new StyleBoxFlat
						{
							BackgroundColor = StyleNano.ButtonColorDefault
						};
						panelContainer.Children.Add(textureButton);
						PanelContainer panelContainer2 = panelContainer;
						this.Grid.AddChild(panelContainer2);
					}
					else
					{
						this.Grid.AddChild(textureButton);
					}
				}
			}
		}

		// Token: 0x0600154B RID: 5451 RVA: 0x0007D4F0 File Offset: 0x0007B6F0
		[NullableContext(1)]
		private void ZIndexSpinboxChanged([Nullable(2)] object sender, ValueChangedEventArgs e)
		{
			this._zIndex = e.Value;
			this.UpdateDecalPlacementInfo();
		}

		// Token: 0x0600154C RID: 5452 RVA: 0x0007D504 File Offset: 0x0007B704
		[NullableContext(1)]
		private void ButtonOnPressed(BaseButton.ButtonEventArgs obj)
		{
			if (obj.Button.Name == null)
			{
				return;
			}
			this._selected = obj.Button.Name;
			this.UpdateDecalPlacementInfo();
			this.RefreshList();
		}

		// Token: 0x0600154D RID: 5453 RVA: 0x0007D534 File Offset: 0x0007B734
		[NullableContext(1)]
		public void Populate(IEnumerable<DecalPrototype> prototypes)
		{
			this._decals = new SortedDictionary<string, Texture>();
			foreach (DecalPrototype decalPrototype in prototypes)
			{
				if (decalPrototype.ShowMenu)
				{
					this._decals.Add(decalPrototype.ID, SpriteSpecifierExt.Frame0(decalPrototype.Sprite));
				}
			}
			this.RefreshList();
		}

		// Token: 0x0600154E RID: 5454 RVA: 0x0007D5AC File Offset: 0x0007B7AC
		protected override void Opened()
		{
			base.Opened();
			this._decalPlacementSystem.SetActive(true);
		}

		// Token: 0x0600154F RID: 5455 RVA: 0x0007D5C0 File Offset: 0x0007B7C0
		public override void Close()
		{
			base.Close();
			this._decalPlacementSystem.SetActive(false);
		}

		// Token: 0x1700044B RID: 1099
		// (get) Token: 0x06001550 RID: 5456 RVA: 0x0007D5D4 File Offset: 0x0007B7D4
		private LineEdit Search
		{
			get
			{
				return base.FindControl<LineEdit>("Search");
			}
		}

		// Token: 0x1700044C RID: 1100
		// (get) Token: 0x06001551 RID: 5457 RVA: 0x0007D5E1 File Offset: 0x0007B7E1
		private GridContainer Grid
		{
			get
			{
				return base.FindControl<GridContainer>("Grid");
			}
		}

		// Token: 0x1700044D RID: 1101
		// (get) Token: 0x06001552 RID: 5458 RVA: 0x0007D5EE File Offset: 0x0007B7EE
		private ColorSelectorSliders ColorPicker
		{
			get
			{
				return base.FindControl<ColorSelectorSliders>("ColorPicker");
			}
		}

		// Token: 0x1700044E RID: 1102
		// (get) Token: 0x06001553 RID: 5459 RVA: 0x0007D5FB File Offset: 0x0007B7FB
		private Button PickerOpen
		{
			get
			{
				return base.FindControl<Button>("PickerOpen");
			}
		}

		// Token: 0x1700044F RID: 1103
		// (get) Token: 0x06001554 RID: 5460 RVA: 0x0007D608 File Offset: 0x0007B808
		private CheckBox EnableColor
		{
			get
			{
				return base.FindControl<CheckBox>("EnableColor");
			}
		}

		// Token: 0x17000450 RID: 1104
		// (get) Token: 0x06001555 RID: 5461 RVA: 0x0007D615 File Offset: 0x0007B815
		private CheckBox EnableSnap
		{
			get
			{
				return base.FindControl<CheckBox>("EnableSnap");
			}
		}

		// Token: 0x17000451 RID: 1105
		// (get) Token: 0x06001556 RID: 5462 RVA: 0x0007D622 File Offset: 0x0007B822
		private CheckBox EnableCleanable
		{
			get
			{
				return base.FindControl<CheckBox>("EnableCleanable");
			}
		}

		// Token: 0x17000452 RID: 1106
		// (get) Token: 0x06001557 RID: 5463 RVA: 0x0007D62F File Offset: 0x0007B82F
		private BoxContainer SpinBoxContainer
		{
			get
			{
				return base.FindControl<BoxContainer>("SpinBoxContainer");
			}
		}

		// Token: 0x17000453 RID: 1107
		// (get) Token: 0x06001558 RID: 5464 RVA: 0x0007D63C File Offset: 0x0007B83C
		private SpinBox ZIndexSpinBox
		{
			get
			{
				return base.FindControl<SpinBox>("ZIndexSpinBox");
			}
		}

		// Token: 0x06001560 RID: 5472 RVA: 0x0007D760 File Offset: 0x0007B960
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.Decals.UI.DecalPlacerWindow.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Title = (string)new LocExtension("decal-placer-window-title").ProvideValue();
			A_1.MinSize = new Vector2(250f, 500f);
			A_1.SetSize = new Vector2(250f, 500f);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			LineEdit lineEdit = new LineEdit();
			lineEdit.Name = "Search";
			Control control = lineEdit;
			context.RobustNameScope.Register("Search", control);
			control = lineEdit;
			boxContainer.XamlChildren.Add(control);
			ScrollContainer scrollContainer = new ScrollContainer();
			scrollContainer.VerticalExpand = true;
			GridContainer gridContainer = new GridContainer();
			gridContainer.Name = "Grid";
			control = gridContainer;
			context.RobustNameScope.Register("Grid", control);
			gridContainer.Columns = 6;
			control = gridContainer;
			scrollContainer.XamlChildren.Add(control);
			control = scrollContainer;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 1;
			ColorSelectorSliders colorSelectorSliders = new ColorSelectorSliders();
			colorSelectorSliders.Name = "ColorPicker";
			control = colorSelectorSliders;
			context.RobustNameScope.Register("ColorPicker", control);
			colorSelectorSliders.IsAlphaVisible = true;
			control = colorSelectorSliders;
			boxContainer2.XamlChildren.Add(control);
			Button button = new Button();
			button.Name = "PickerOpen";
			control = button;
			context.RobustNameScope.Register("PickerOpen", control);
			button.Text = (string)new LocExtension("decal-placer-window-palette").ProvideValue();
			control = button;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			CheckBox checkBox = new CheckBox();
			checkBox.Name = "EnableColor";
			control = checkBox;
			context.RobustNameScope.Register("EnableColor", control);
			checkBox.Text = (string)new LocExtension("decal-placer-window-use-color").ProvideValue();
			control = checkBox;
			boxContainer.XamlChildren.Add(control);
			CheckBox checkBox2 = new CheckBox();
			checkBox2.Name = "EnableSnap";
			control = checkBox2;
			context.RobustNameScope.Register("EnableSnap", control);
			checkBox2.Text = (string)new LocExtension("decal-placer-window-enable-snap").ProvideValue();
			control = checkBox2;
			boxContainer.XamlChildren.Add(control);
			CheckBox checkBox3 = new CheckBox();
			checkBox3.Name = "EnableCleanable";
			control = checkBox3;
			context.RobustNameScope.Register("EnableCleanable", control);
			checkBox3.Text = (string)new LocExtension("decal-placer-window-enable-cleanable").ProvideValue();
			control = checkBox3;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Name = "SpinBoxContainer";
			control = boxContainer3;
			context.RobustNameScope.Register("SpinBoxContainer", control);
			boxContainer3.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("decal-placer-window-rotation").ProvideValue(),
				Margin = new Thickness(0f, 0f, 0f, 1f)
			};
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer4 = new BoxContainer();
			boxContainer4.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("decal-placer-window-zindex").ProvideValue(),
				Margin = new Thickness(0f, 0f, 0f, 1f)
			};
			boxContainer4.XamlChildren.Add(control);
			SpinBox spinBox = new SpinBox();
			spinBox.Name = "ZIndexSpinBox";
			control = spinBox;
			context.RobustNameScope.Register("ZIndexSpinBox", control);
			spinBox.HorizontalExpand = true;
			control = spinBox;
			boxContainer4.XamlChildren.Add(control);
			control = boxContainer4;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06001561 RID: 5473 RVA: 0x0007DC23 File Offset: 0x0007BE23
		private static void !XamlIlPopulateTrampoline(DecalPlacerWindow A_0)
		{
			DecalPlacerWindow.Populate:Content.Client.Decals.UI.DecalPlacerWindow.xaml(null, A_0);
		}

		// Token: 0x04000B12 RID: 2834
		[Nullable(1)]
		private readonly DecalPlacementSystem _decalPlacementSystem;

		// Token: 0x04000B13 RID: 2835
		[Nullable(1)]
		public FloatSpinBox RotationSpinBox;

		// Token: 0x04000B14 RID: 2836
		[Nullable(2)]
		private PaletteColorPicker _picker;

		// Token: 0x04000B15 RID: 2837
		[Nullable(new byte[]
		{
			2,
			1,
			1
		})]
		private SortedDictionary<string, Texture> _decals;

		// Token: 0x04000B16 RID: 2838
		[Nullable(2)]
		private string _selected;

		// Token: 0x04000B17 RID: 2839
		private Color _color = Color.White;

		// Token: 0x04000B18 RID: 2840
		private bool _useColor;

		// Token: 0x04000B19 RID: 2841
		private bool _snap;

		// Token: 0x04000B1A RID: 2842
		private float _rotation;

		// Token: 0x04000B1B RID: 2843
		private bool _cleanable;

		// Token: 0x04000B1C RID: 2844
		private int _zIndex;
	}
}
