using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Shared.StationRecords;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.Localization;
using Robust.Shared.Maths;

namespace Content.Client.StationRecords
{
	// Token: 0x02000131 RID: 305
	[GenerateTypedNameReferences]
	public sealed class GeneralStationRecordConsoleWindow : DefaultWindow
	{
		// Token: 0x06000834 RID: 2100 RVA: 0x0002F985 File Offset: 0x0002DB85
		public GeneralStationRecordConsoleWindow()
		{
			GeneralStationRecordConsoleWindow.!XamlIlPopulateTrampoline(this);
			this.RecordListing.OnItemSelected += delegate(ItemList.ItemListSelectedEventArgs args)
			{
				if (!this._isPopulating)
				{
					object metadata = this.RecordListing.get_IndexItem(args.ItemIndex).Metadata;
					if (metadata is StationRecordKey)
					{
						StationRecordKey value = (StationRecordKey)metadata;
						Action<StationRecordKey?> onKeySelected = this.OnKeySelected;
						if (onKeySelected == null)
						{
							return;
						}
						onKeySelected(new StationRecordKey?(value));
						return;
					}
				}
			};
			this.RecordListing.OnItemDeselected += delegate(ItemList.ItemListDeselectedEventArgs _)
			{
				if (!this._isPopulating)
				{
					Action<StationRecordKey?> onKeySelected = this.OnKeySelected;
					if (onKeySelected == null)
					{
						return;
					}
					onKeySelected(null);
				}
			};
		}

		// Token: 0x06000835 RID: 2101 RVA: 0x0002F9C4 File Offset: 0x0002DBC4
		[NullableContext(1)]
		public void UpdateState(GeneralStationRecordConsoleState state)
		{
			if (state.RecordListing == null)
			{
				this.RecordListingStatus.Visible = true;
				this.RecordListing.Visible = false;
				this.RecordListingStatus.Text = Loc.GetString("general-station-record-console-empty-state");
				return;
			}
			this.RecordListingStatus.Visible = false;
			this.RecordListing.Visible = true;
			this.PopulateRecordListing(state.RecordListing, state.SelectedKey);
			this.RecordContainerStatus.Visible = (state.Record == null);
			if (state.Record != null)
			{
				this.RecordContainerStatus.Visible = (state.SelectedKey == null);
				this.RecordContainerStatus.Text = ((state.SelectedKey == null) ? Loc.GetString("general-station-record-console-no-record-found") : Loc.GetString("general-station-record-console-select-record-info"));
				this.PopulateRecordContainer(state.Record);
				return;
			}
			this.RecordContainer.DisposeAllChildren();
			this.RecordContainer.RemoveAllChildren();
		}

		// Token: 0x06000836 RID: 2102 RVA: 0x0002FAC0 File Offset: 0x0002DCC0
		[NullableContext(1)]
		private void PopulateRecordListing(Dictionary<StationRecordKey, string> listing, StationRecordKey? selected)
		{
			this.RecordListing.Clear();
			this.RecordListing.ClearSelected(null);
			this._isPopulating = true;
			foreach (KeyValuePair<StationRecordKey, string> keyValuePair in listing)
			{
				StationRecordKey value;
				string text;
				keyValuePair.Deconstruct(out value, out text);
				StationRecordKey stationRecordKey = value;
				string text2 = text;
				ItemList.Item item = this.RecordListing.AddItem(text2, null, true);
				item.Metadata = stationRecordKey;
				if (selected != null)
				{
					uint id = stationRecordKey.ID;
					value = selected.Value;
					if (id == value.ID)
					{
						item.Selected = true;
					}
				}
			}
			this._isPopulating = false;
			this.RecordListing.SortItemsByText();
		}

		// Token: 0x06000837 RID: 2103 RVA: 0x0002FB98 File Offset: 0x0002DD98
		[NullableContext(1)]
		private void PopulateRecordContainer(GeneralStationRecord record)
		{
			this.RecordContainer.DisposeAllChildren();
			this.RecordContainer.RemoveAllChildren();
			foreach (Control control in new Control[]
			{
				new Label
				{
					Text = record.Name,
					StyleClasses = 
					{
						"LabelBig"
					}
				},
				new Label
				{
					Text = Loc.GetString("general-station-record-console-record-age", new ValueTuple<string, object>[]
					{
						new ValueTuple<string, object>("age", record.Age.ToString())
					})
				},
				new Label
				{
					Text = Loc.GetString("general-station-record-console-record-title", new ValueTuple<string, object>[]
					{
						new ValueTuple<string, object>("job", Loc.GetString(record.JobTitle))
					})
				},
				new Label
				{
					Text = Loc.GetString("general-station-record-console-record-species", new ValueTuple<string, object>[]
					{
						new ValueTuple<string, object>("species", record.Species)
					})
				},
				new Label
				{
					Text = Loc.GetString("general-station-record-console-record-gender", new ValueTuple<string, object>[]
					{
						new ValueTuple<string, object>("gender", record.Gender.ToString())
					})
				},
				new Label
				{
					Text = Loc.GetString("general-station-record-console-record-fingerprint", new ValueTuple<string, object>[]
					{
						new ValueTuple<string, object>("fingerprint", record.Fingerprint)
					})
				}
			})
			{
				this.RecordContainer.AddChild(control);
			}
		}

		// Token: 0x17000170 RID: 368
		// (get) Token: 0x06000838 RID: 2104 RVA: 0x0002FD2C File Offset: 0x0002DF2C
		private Label RecordListingStatus
		{
			get
			{
				return base.FindControl<Label>("RecordListingStatus");
			}
		}

		// Token: 0x17000171 RID: 369
		// (get) Token: 0x06000839 RID: 2105 RVA: 0x0002FD39 File Offset: 0x0002DF39
		private ItemList RecordListing
		{
			get
			{
				return base.FindControl<ItemList>("RecordListing");
			}
		}

		// Token: 0x17000172 RID: 370
		// (get) Token: 0x0600083A RID: 2106 RVA: 0x0002FD46 File Offset: 0x0002DF46
		private Label RecordContainerStatus
		{
			get
			{
				return base.FindControl<Label>("RecordContainerStatus");
			}
		}

		// Token: 0x17000173 RID: 371
		// (get) Token: 0x0600083B RID: 2107 RVA: 0x0002FD53 File Offset: 0x0002DF53
		private BoxContainer RecordContainer
		{
			get
			{
				return base.FindControl<BoxContainer>("RecordContainer");
			}
		}

		// Token: 0x0600083E RID: 2110 RVA: 0x0002FDE4 File Offset: 0x0002DFE4
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.StationRecords.GeneralStationRecordConsoleWindow.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Title = (string)new LocExtension("general-station-record-console-window-title").ProvideValue();
			A_1.MinSize = new Vector2(750f, 500f);
			BoxContainer boxContainer = new BoxContainer();
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 1;
			boxContainer2.Margin = new Thickness(5f, 5f, 5f, 5f);
			boxContainer2.MinWidth = 250f;
			boxContainer2.VerticalExpand = true;
			Label label = new Label();
			label.Name = "RecordListingStatus";
			Control control = label;
			context.RobustNameScope.Register("RecordListingStatus", control);
			label.Visible = false;
			control = label;
			boxContainer2.XamlChildren.Add(control);
			ScrollContainer scrollContainer = new ScrollContainer();
			scrollContainer.VerticalExpand = true;
			ItemList itemList = new ItemList();
			itemList.Name = "RecordListing";
			control = itemList;
			context.RobustNameScope.Register("RecordListing", control);
			control = itemList;
			scrollContainer.XamlChildren.Add(control);
			control = scrollContainer;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 1;
			boxContainer3.Margin = new Thickness(5f, 5f, 5f, 5f);
			Label label2 = new Label();
			label2.Name = "RecordContainerStatus";
			control = label2;
			context.RobustNameScope.Register("RecordContainerStatus", control);
			label2.Visible = false;
			label2.Text = (string)new LocExtension("general-station-record-console-select-record-info").ProvideValue();
			control = label2;
			boxContainer3.XamlChildren.Add(control);
			BoxContainer boxContainer4 = new BoxContainer();
			boxContainer4.Name = "RecordContainer";
			control = boxContainer4;
			context.RobustNameScope.Register("RecordContainer", control);
			boxContainer4.Orientation = 1;
			control = boxContainer4;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x0600083F RID: 2111 RVA: 0x0003009B File Offset: 0x0002E29B
		private static void !XamlIlPopulateTrampoline(GeneralStationRecordConsoleWindow A_0)
		{
			GeneralStationRecordConsoleWindow.Populate:Content.Client.StationRecords.GeneralStationRecordConsoleWindow.xaml(null, A_0);
		}

		// Token: 0x04000428 RID: 1064
		[Nullable(2)]
		public Action<StationRecordKey?> OnKeySelected;

		// Token: 0x04000429 RID: 1065
		private bool _isPopulating;
	}
}
