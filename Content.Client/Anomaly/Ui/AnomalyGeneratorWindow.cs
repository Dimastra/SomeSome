using System;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.Message;
using Content.Client.UserInterface.Controls;
using Content.Shared.Anomaly;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;
using Robust.Shared.Timing;

namespace Content.Client.Anomaly.Ui
{
	// Token: 0x0200046C RID: 1132
	[GenerateTypedNameReferences]
	public sealed class AnomalyGeneratorWindow : FancyWindow
	{
		// Token: 0x06001C15 RID: 7189 RVA: 0x000A2D00 File Offset: 0x000A0F00
		public AnomalyGeneratorWindow(EntityUid gen)
		{
			AnomalyGeneratorWindow.!XamlIlPopulateTrampoline(this);
			IoCManager.InjectDependencies<AnomalyGeneratorWindow>(this);
			this.EntityView.Sprite = this._entityManager.GetComponent<SpriteComponent>(gen);
			this.GenerateButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				Action onGenerateButtonPressed = this.OnGenerateButtonPressed;
				if (onGenerateButtonPressed == null)
				{
					return;
				}
				onGenerateButtonPressed();
			};
		}

		// Token: 0x06001C16 RID: 7190 RVA: 0x000A2D5C File Offset: 0x000A0F5C
		[NullableContext(1)]
		public void UpdateState(AnomalyGeneratorUserInterfaceState state)
		{
			this._cooldownEnd = state.CooldownEndTime;
			this._hasEnoughFuel = (state.FuelCost <= state.FuelAmount);
			float value = Math.Clamp((float)state.FuelAmount / (float)state.FuelCost, 0f, 1f);
			this.FuelBar.Value = value;
			int num = state.FuelAmount / state.FuelCost;
			this.FuelText.Text = Loc.GetString("anomaly-generator-charges", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("charges", num)
			});
			this.UpdateTimer();
			this.UpdateReady();
		}

		// Token: 0x06001C17 RID: 7191 RVA: 0x000A2E04 File Offset: 0x000A1004
		public void UpdateTimer()
		{
			if (this._timing.CurTime > this._cooldownEnd)
			{
				this.CooldownLabel.SetMarkup(Loc.GetString("anomaly-generator-no-cooldown"));
				return;
			}
			TimeSpan timeSpan = this._cooldownEnd - this._timing.CurTime;
			DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(1, 2);
			defaultInterpolatedStringHandler.AppendFormatted<int>(timeSpan.Minutes, "0");
			defaultInterpolatedStringHandler.AppendLiteral(":");
			defaultInterpolatedStringHandler.AppendFormatted<int>(timeSpan.Seconds, "00");
			string item = defaultInterpolatedStringHandler.ToStringAndClear();
			this.CooldownLabel.SetMarkup(Loc.GetString("anomaly-generator-cooldown", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("time", item)
			}));
			this.UpdateReady();
		}

		// Token: 0x06001C18 RID: 7192 RVA: 0x000A2ECC File Offset: 0x000A10CC
		public void UpdateReady()
		{
			bool flag = this._hasEnoughFuel && this._timing.CurTime > this._cooldownEnd;
			string markup = flag ? Loc.GetString("anomaly-generator-yes-fire") : Loc.GetString("anomaly-generator-no-fire");
			this.ReadyLabel.SetMarkup(markup);
			this.GenerateButton.Disabled = !flag;
		}

		// Token: 0x06001C19 RID: 7193 RVA: 0x000A2F30 File Offset: 0x000A1130
		protected override void FrameUpdate(FrameEventArgs args)
		{
			base.FrameUpdate(args);
			this.UpdateTimer();
		}

		// Token: 0x170005D7 RID: 1495
		// (get) Token: 0x06001C1A RID: 7194 RVA: 0x000A2F3F File Offset: 0x000A113F
		private ProgressBar FuelBar
		{
			get
			{
				return base.FindControl<ProgressBar>("FuelBar");
			}
		}

		// Token: 0x170005D8 RID: 1496
		// (get) Token: 0x06001C1B RID: 7195 RVA: 0x000A2F4C File Offset: 0x000A114C
		private Label FuelText
		{
			get
			{
				return base.FindControl<Label>("FuelText");
			}
		}

		// Token: 0x170005D9 RID: 1497
		// (get) Token: 0x06001C1C RID: 7196 RVA: 0x000A2F59 File Offset: 0x000A1159
		private RichTextLabel CooldownLabel
		{
			get
			{
				return base.FindControl<RichTextLabel>("CooldownLabel");
			}
		}

		// Token: 0x170005DA RID: 1498
		// (get) Token: 0x06001C1D RID: 7197 RVA: 0x000A2F66 File Offset: 0x000A1166
		private RichTextLabel ReadyLabel
		{
			get
			{
				return base.FindControl<RichTextLabel>("ReadyLabel");
			}
		}

		// Token: 0x170005DB RID: 1499
		// (get) Token: 0x06001C1E RID: 7198 RVA: 0x00072068 File Offset: 0x00070268
		private SpriteView EntityView
		{
			get
			{
				return base.FindControl<SpriteView>("EntityView");
			}
		}

		// Token: 0x170005DC RID: 1500
		// (get) Token: 0x06001C1F RID: 7199 RVA: 0x000A2F73 File Offset: 0x000A1173
		private Button GenerateButton
		{
			get
			{
				return base.FindControl<Button>("GenerateButton");
			}
		}

		// Token: 0x06001C21 RID: 7201 RVA: 0x000A2F94 File Offset: 0x000A1194
		static void xaml(IServiceProvider A_0, FancyWindow A_1)
		{
			XamlIlContext.Context<FancyWindow> context = new XamlIlContext.Context<FancyWindow>(A_0, null, "resm:Content.Client.Anomaly.Ui.AnomalyGeneratorWindow.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Title = (string)new LocExtension("anomaly-generator-ui-title").ProvideValue();
			A_1.MinSize = new Vector2(270f, 180f);
			A_1.SetSize = new Vector2(360f, 180f);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Margin = new Thickness(10f, 0f, 10f, 0f);
			boxContainer.Orientation = 1;
			boxContainer.HorizontalExpand = true;
			boxContainer.VerticalExpand = true;
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 0;
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 1;
			boxContainer3.HorizontalExpand = true;
			BoxContainer boxContainer4 = new BoxContainer();
			boxContainer4.Orientation = 0;
			boxContainer4.HorizontalExpand = true;
			boxContainer4.VerticalExpand = true;
			boxContainer4.Margin = new Thickness(0f, 0f, 0f, 0f);
			boxContainer4.VerticalAlignment = 2;
			Label label = new Label();
			label.Text = (string)new LocExtension("anomaly-generator-fuel-display").ProvideValue();
			string item = "StatusFieldTitle";
			label.StyleClasses.Add(item);
			Control control = label;
			boxContainer4.XamlChildren.Add(control);
			ProgressBar progressBar = new ProgressBar();
			progressBar.Name = "FuelBar";
			control = progressBar;
			context.RobustNameScope.Register("FuelBar", control);
			progressBar.HorizontalExpand = true;
			progressBar.MaxValue = 1f;
			progressBar.MinValue = 0f;
			progressBar.SetHeight = 25f;
			progressBar.Margin = new Thickness(10f, 0f, 10f, 0f);
			progressBar.VerticalAlignment = 2;
			Label label2 = new Label();
			label2.Name = "FuelText";
			control = label2;
			context.RobustNameScope.Register("FuelText", control);
			label2.Margin = new Thickness(4f, 0f, 4f, 0f);
			label2.Text = "0 %";
			control = label2;
			progressBar.XamlChildren.Add(control);
			control = progressBar;
			boxContainer4.XamlChildren.Add(control);
			control = boxContainer4;
			boxContainer3.XamlChildren.Add(control);
			RichTextLabel richTextLabel = new RichTextLabel();
			richTextLabel.Name = "CooldownLabel";
			control = richTextLabel;
			context.RobustNameScope.Register("CooldownLabel", control);
			item = "StatusFieldTitle";
			richTextLabel.StyleClasses.Add(item);
			control = richTextLabel;
			boxContainer3.XamlChildren.Add(control);
			RichTextLabel richTextLabel2 = new RichTextLabel();
			richTextLabel2.Name = "ReadyLabel";
			control = richTextLabel2;
			context.RobustNameScope.Register("ReadyLabel", control);
			item = "StatusFieldTitle";
			richTextLabel2.StyleClasses.Add(item);
			control = richTextLabel2;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer2.XamlChildren.Add(control);
			PanelContainer panelContainer = new PanelContainer();
			panelContainer.Margin = new Thickness(12f, 0f, 0f, 0f);
			item = "Inset";
			panelContainer.StyleClasses.Add(item);
			panelContainer.VerticalAlignment = 2;
			SpriteView spriteView = new SpriteView();
			spriteView.Name = "EntityView";
			control = spriteView;
			context.RobustNameScope.Register("EntityView", control);
			spriteView.SetSize = new Vector2(96f, 96f);
			spriteView.OverrideDirection = new Direction?(0);
			control = spriteView;
			panelContainer.XamlChildren.Add(control);
			control = panelContainer;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer5 = new BoxContainer();
			boxContainer5.VerticalExpand = true;
			boxContainer5.HorizontalAlignment = 2;
			boxContainer5.VerticalAlignment = 2;
			Button button = new Button();
			button.Name = "GenerateButton";
			control = button;
			context.RobustNameScope.Register("GenerateButton", control);
			button.Text = (string)new LocExtension("anomaly-generator-generate").ProvideValue();
			control = button;
			boxContainer5.XamlChildren.Add(control);
			control = boxContainer5;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06001C22 RID: 7202 RVA: 0x000A34A8 File Offset: 0x000A16A8
		private static void !XamlIlPopulateTrampoline(AnomalyGeneratorWindow A_0)
		{
			AnomalyGeneratorWindow.Populate:Content.Client.Anomaly.Ui.AnomalyGeneratorWindow.xaml(null, A_0);
		}

		// Token: 0x04000E1D RID: 3613
		[Nullable(1)]
		[Dependency]
		private readonly IEntityManager _entityManager;

		// Token: 0x04000E1E RID: 3614
		[Nullable(1)]
		[Dependency]
		private readonly IGameTiming _timing;

		// Token: 0x04000E1F RID: 3615
		private TimeSpan _cooldownEnd = TimeSpan.Zero;

		// Token: 0x04000E20 RID: 3616
		private bool _hasEnoughFuel;

		// Token: 0x04000E21 RID: 3617
		[Nullable(2)]
		public Action OnGenerateButtonPressed;
	}
}
