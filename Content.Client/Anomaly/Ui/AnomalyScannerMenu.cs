using System;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.Message;
using Content.Client.UserInterface.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Client.Anomaly.Ui
{
	// Token: 0x0200046E RID: 1134
	[GenerateTypedNameReferences]
	public sealed class AnomalyScannerMenu : FancyWindow
	{
		// Token: 0x06001C27 RID: 7207 RVA: 0x000A3542 File Offset: 0x000A1742
		public AnomalyScannerMenu()
		{
			AnomalyScannerMenu.!XamlIlPopulateTrampoline(this);
			IoCManager.InjectDependencies<AnomalyScannerMenu>(this);
		}

		// Token: 0x06001C28 RID: 7208 RVA: 0x000A3564 File Offset: 0x000A1764
		public void UpdateMenu()
		{
			FormattedMessage formattedMessage = new FormattedMessage(this.LastMessage);
			if (this.NextPulseTime != null)
			{
				formattedMessage.PushNewline();
				formattedMessage.PushNewline();
				TimeSpan timeSpan = this.NextPulseTime.Value - this._timing.CurTime;
				DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(1, 2);
				defaultInterpolatedStringHandler.AppendFormatted<int>(timeSpan.Minutes, "00");
				defaultInterpolatedStringHandler.AppendLiteral(":");
				defaultInterpolatedStringHandler.AppendFormatted<int>(timeSpan.Seconds, "00");
				string item = defaultInterpolatedStringHandler.ToStringAndClear();
				formattedMessage.AddMarkup(Loc.GetString("anomaly-scanner-pulse-timer", new ValueTuple<string, object>[]
				{
					new ValueTuple<string, object>("time", item)
				}));
			}
			this.TextDisplay.SetMarkup(formattedMessage.ToMarkup());
		}

		// Token: 0x06001C29 RID: 7209 RVA: 0x000A3631 File Offset: 0x000A1831
		protected override void FrameUpdate(FrameEventArgs args)
		{
			base.FrameUpdate(args);
			if (this.NextPulseTime != null)
			{
				this.UpdateMenu();
			}
		}

		// Token: 0x170005DD RID: 1501
		// (get) Token: 0x06001C2A RID: 7210 RVA: 0x000A364D File Offset: 0x000A184D
		private RichTextLabel TextDisplay
		{
			get
			{
				return base.FindControl<RichTextLabel>("TextDisplay");
			}
		}

		// Token: 0x06001C2B RID: 7211 RVA: 0x000A365C File Offset: 0x000A185C
		static void xaml(IServiceProvider A_0, FancyWindow A_1)
		{
			XamlIlContext.Context<FancyWindow> context = new XamlIlContext.Context<FancyWindow>(A_0, null, "resm:Content.Client.Anomaly.Ui.AnomalyScannerMenu.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Title = (string)new LocExtension("anomaly-scanner-ui-title").ProvideValue();
			A_1.MinSize = new Vector2(350f, 260f);
			A_1.SetSize = new Vector2(350f, 260f);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			boxContainer.VerticalExpand = true;
			boxContainer.Margin = new Thickness(10f, 0f, 10f, 10f);
			RichTextLabel richTextLabel = new RichTextLabel();
			richTextLabel.Name = "TextDisplay";
			Control control = richTextLabel;
			context.RobustNameScope.Register("TextDisplay", control);
			control = richTextLabel;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06001C2C RID: 7212 RVA: 0x000A37A6 File Offset: 0x000A19A6
		private static void !XamlIlPopulateTrampoline(AnomalyScannerMenu A_0)
		{
			AnomalyScannerMenu.Populate:Content.Client.Anomaly.Ui.AnomalyScannerMenu.xaml(null, A_0);
		}

		// Token: 0x04000E23 RID: 3619
		[Nullable(1)]
		[Dependency]
		private readonly IGameTiming _timing;

		// Token: 0x04000E24 RID: 3620
		[Nullable(1)]
		public FormattedMessage LastMessage = new FormattedMessage();

		// Token: 0x04000E25 RID: 3621
		public TimeSpan? NextPulseTime;
	}
}
