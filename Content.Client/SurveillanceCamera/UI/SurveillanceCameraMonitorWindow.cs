using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.Resources;
using Content.Client.Viewport;
using Content.Shared.DeviceNetwork;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;
using Robust.Shared.Prototypes;

namespace Content.Client.SurveillanceCamera.UI
{
	// Token: 0x0200010B RID: 267
	[GenerateTypedNameReferences]
	public sealed class SurveillanceCameraMonitorWindow : DefaultWindow
	{
		// Token: 0x14000035 RID: 53
		// (add) Token: 0x0600075D RID: 1885 RVA: 0x000268AC File Offset: 0x00024AAC
		// (remove) Token: 0x0600075E RID: 1886 RVA: 0x000268E4 File Offset: 0x00024AE4
		[Nullable(new byte[]
		{
			2,
			1
		})]
		[Nullable(new byte[]
		{
			2,
			1
		})]
		public event Action<string> CameraSelected;

		// Token: 0x14000036 RID: 54
		// (add) Token: 0x0600075F RID: 1887 RVA: 0x0002691C File Offset: 0x00024B1C
		// (remove) Token: 0x06000760 RID: 1888 RVA: 0x00026954 File Offset: 0x00024B54
		[Nullable(new byte[]
		{
			2,
			1
		})]
		[Nullable(new byte[]
		{
			2,
			1
		})]
		public event Action<string> SubnetOpened;

		// Token: 0x14000037 RID: 55
		// (add) Token: 0x06000761 RID: 1889 RVA: 0x0002698C File Offset: 0x00024B8C
		// (remove) Token: 0x06000762 RID: 1890 RVA: 0x000269C4 File Offset: 0x00024BC4
		[Nullable(2)]
		[method: NullableContext(2)]
		[Nullable(2)]
		public event Action CameraRefresh;

		// Token: 0x14000038 RID: 56
		// (add) Token: 0x06000763 RID: 1891 RVA: 0x000269FC File Offset: 0x00024BFC
		// (remove) Token: 0x06000764 RID: 1892 RVA: 0x00026A34 File Offset: 0x00024C34
		[Nullable(2)]
		[method: NullableContext(2)]
		[Nullable(2)]
		public event Action SubnetRefresh;

		// Token: 0x14000039 RID: 57
		// (add) Token: 0x06000765 RID: 1893 RVA: 0x00026A6C File Offset: 0x00024C6C
		// (remove) Token: 0x06000766 RID: 1894 RVA: 0x00026AA4 File Offset: 0x00024CA4
		[Nullable(2)]
		[method: NullableContext(2)]
		[Nullable(2)]
		public event Action CameraSwitchTimer;

		// Token: 0x1400003A RID: 58
		// (add) Token: 0x06000767 RID: 1895 RVA: 0x00026ADC File Offset: 0x00024CDC
		// (remove) Token: 0x06000768 RID: 1896 RVA: 0x00026B14 File Offset: 0x00024D14
		[Nullable(2)]
		[method: NullableContext(2)]
		[Nullable(2)]
		public event Action CameraDisconnect;

		// Token: 0x17000144 RID: 324
		// (get) Token: 0x06000769 RID: 1897 RVA: 0x00026B49 File Offset: 0x00024D49
		[Nullable(2)]
		private string SelectedSubnet
		{
			[NullableContext(2)]
			get
			{
				if (this.SubnetSelector.ItemCount == 0 || this.SubnetSelector.SelectedMetadata == null)
				{
					return null;
				}
				return (string)this.SubnetSelector.SelectedMetadata;
			}
		}

		// Token: 0x0600076A RID: 1898 RVA: 0x00026B78 File Offset: 0x00024D78
		public SurveillanceCameraMonitorWindow()
		{
			SurveillanceCameraMonitorWindow.!XamlIlPopulateTrampoline(this);
			IoCManager.InjectDependencies<SurveillanceCameraMonitorWindow>(this);
			Texture texture = this._resourceCache.GetTexture("/Textures/Interface/Nano/square_black.png");
			ShaderInstance shaderOverride = this._prototypeManager.Index<ShaderPrototype>("CameraStatic").Instance().Duplicate();
			this.CameraView.ViewportSize = new Vector2i(500, 500);
			this.CameraView.Eye = this._defaultEye;
			this.CameraViewBackground.Stretch = 1;
			this.CameraViewBackground.Texture = texture;
			this.CameraViewBackground.ShaderOverride = shaderOverride;
			this.SubnetList.OnItemSelected += this.OnSubnetListSelect;
			this.SubnetSelector.OnItemSelected += delegate(OptionButton.ItemSelectedEventArgs args)
			{
				this.SubnetOpened((string)args.Button.GetItemMetadata(args.Id));
			};
			this.SubnetRefreshButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this.SubnetRefresh();
			};
			this.CameraRefreshButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this.CameraRefresh();
			};
			this.CameraDisconnectButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this.CameraDisconnect();
			};
		}

		// Token: 0x0600076B RID: 1899 RVA: 0x00026CA8 File Offset: 0x00024EA8
		[NullableContext(1)]
		public void UpdateState([Nullable(2)] IEye eye, HashSet<string> subnets, string activeAddress, string activeSubnet, Dictionary<string, string> cameras)
		{
			this._currentAddress = activeAddress;
			this.SetCameraView(eye);
			if (subnets.Count == 0)
			{
				this.SubnetSelector.AddItem(Loc.GetString("surveillance-camera-monitor-ui-no-subnets"), null);
				this.SubnetSelector.Disabled = true;
				return;
			}
			if (this.SubnetSelector.Disabled && subnets.Count != 0)
			{
				this.SubnetSelector.Clear();
				this.SubnetSelector.Disabled = false;
			}
			if (string.IsNullOrEmpty(activeSubnet))
			{
				this.SubnetOpened(subnets.First<string>());
				return;
			}
			if (this.SubnetSelector.ItemCount != subnets.Count)
			{
				this.SubnetSelector.Clear();
				this._subnetMap.Clear();
				foreach (string text in subnets)
				{
					int value = this.AddSubnet(text);
					this._subnetMap.Add(text, value);
				}
			}
			int num;
			if (this._subnetMap.TryGetValue(activeSubnet, out num))
			{
				this.SubnetSelector.Select(num);
			}
			this.PopulateCameraList(cameras);
		}

		// Token: 0x0600076C RID: 1900 RVA: 0x00026DDC File Offset: 0x00024FDC
		[NullableContext(1)]
		private void PopulateCameraList(Dictionary<string, string> cameras)
		{
			this.SubnetList.Clear();
			foreach (KeyValuePair<string, string> keyValuePair in cameras)
			{
				string text;
				string text2;
				keyValuePair.Deconstruct(out text, out text2);
				string address = text;
				string name = text2;
				this.AddCameraToList(name, address);
			}
			this.SubnetList.SortItemsByText();
		}

		// Token: 0x0600076D RID: 1901 RVA: 0x00026E54 File Offset: 0x00025054
		[NullableContext(2)]
		private void SetCameraView(IEye eye)
		{
			bool flag = eye != this.CameraView.Eye || this.CameraView.Eye == null;
			this.CameraView.Eye = (eye ?? this._defaultEye);
			this.CameraView.Visible = (!flag && !this._isSwitching);
			this.CameraDisconnectButton.Disabled = (eye == null);
			if (eye == null)
			{
				this.CameraViewBackground.Visible = true;
				this.CameraStatus.Text = Loc.GetString("surveillance-camera-monitor-ui-status-disconnected");
				return;
			}
			if (!flag)
			{
				return;
			}
			this._isSwitching = true;
			this.CameraViewBackground.Visible = true;
			this.CameraStatus.Text = Loc.GetString("surveillance-camera-monitor-ui-status", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("status", Loc.GetString("surveillance-camera-monitor-ui-status-connecting")),
				new ValueTuple<string, object>("address", this._currentAddress)
			});
			this.CameraSwitchTimer();
		}

		// Token: 0x0600076E RID: 1902 RVA: 0x00026F54 File Offset: 0x00025154
		public void OnSwitchTimerComplete()
		{
			this._isSwitching = false;
			this.CameraView.Visible = (this.CameraView.Eye != this._defaultEye);
			this.CameraViewBackground.Visible = (this.CameraView.Eye == this._defaultEye);
			this.CameraStatus.Text = Loc.GetString("surveillance-camera-monitor-ui-status", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("status", Loc.GetString("surveillance-camera-monitor-ui-status-connected")),
				new ValueTuple<string, object>("address", this._currentAddress)
			});
		}

		// Token: 0x0600076F RID: 1903 RVA: 0x00026FF4 File Offset: 0x000251F4
		[NullableContext(1)]
		private int AddSubnet(string subnet)
		{
			string text = subnet;
			DeviceFrequencyPrototype deviceFrequencyPrototype;
			if (this._prototypeManager.TryIndex<DeviceFrequencyPrototype>(subnet, ref deviceFrequencyPrototype))
			{
				text = Loc.GetString(deviceFrequencyPrototype.Name ?? subnet);
			}
			this.SubnetSelector.AddItem(text, null);
			this.SubnetSelector.SetItemMetadata(this.SubnetSelector.ItemCount - 1, subnet);
			return this.SubnetSelector.ItemCount - 1;
		}

		// Token: 0x06000770 RID: 1904 RVA: 0x0002705F File Offset: 0x0002525F
		[NullableContext(1)]
		private void AddCameraToList(string name, string address)
		{
			this.SubnetList.AddItem(name + ": " + address, null, true).Metadata = address;
		}

		// Token: 0x06000771 RID: 1905 RVA: 0x00027080 File Offset: 0x00025280
		[NullableContext(1)]
		private void OnSubnetListSelect(ItemList.ItemListSelectedEventArgs args)
		{
			this.CameraSelected((string)this.SubnetList.get_IndexItem(args.ItemIndex).Metadata);
		}

		// Token: 0x17000145 RID: 325
		// (get) Token: 0x06000772 RID: 1906 RVA: 0x000270A8 File Offset: 0x000252A8
		private OptionButton SubnetSelector
		{
			get
			{
				return base.FindControl<OptionButton>("SubnetSelector");
			}
		}

		// Token: 0x17000146 RID: 326
		// (get) Token: 0x06000773 RID: 1907 RVA: 0x000270B5 File Offset: 0x000252B5
		private Button SubnetRefreshButton
		{
			get
			{
				return base.FindControl<Button>("SubnetRefreshButton");
			}
		}

		// Token: 0x17000147 RID: 327
		// (get) Token: 0x06000774 RID: 1908 RVA: 0x000270C2 File Offset: 0x000252C2
		private ItemList SubnetList
		{
			get
			{
				return base.FindControl<ItemList>("SubnetList");
			}
		}

		// Token: 0x17000148 RID: 328
		// (get) Token: 0x06000775 RID: 1909 RVA: 0x000270CF File Offset: 0x000252CF
		private Button CameraRefreshButton
		{
			get
			{
				return base.FindControl<Button>("CameraRefreshButton");
			}
		}

		// Token: 0x17000149 RID: 329
		// (get) Token: 0x06000776 RID: 1910 RVA: 0x000270DC File Offset: 0x000252DC
		private Button CameraDisconnectButton
		{
			get
			{
				return base.FindControl<Button>("CameraDisconnectButton");
			}
		}

		// Token: 0x1700014A RID: 330
		// (get) Token: 0x06000777 RID: 1911 RVA: 0x000270E9 File Offset: 0x000252E9
		private Label CameraStatus
		{
			get
			{
				return base.FindControl<Label>("CameraStatus");
			}
		}

		// Token: 0x1700014B RID: 331
		// (get) Token: 0x06000778 RID: 1912 RVA: 0x000270F6 File Offset: 0x000252F6
		private Control CameraViewBox
		{
			get
			{
				return base.FindControl<Control>("CameraViewBox");
			}
		}

		// Token: 0x1700014C RID: 332
		// (get) Token: 0x06000779 RID: 1913 RVA: 0x00027103 File Offset: 0x00025303
		private ScalingViewport CameraView
		{
			get
			{
				return base.FindControl<ScalingViewport>("CameraView");
			}
		}

		// Token: 0x1700014D RID: 333
		// (get) Token: 0x0600077A RID: 1914 RVA: 0x00027110 File Offset: 0x00025310
		private TextureRect CameraViewBackground
		{
			get
			{
				return base.FindControl<TextureRect>("CameraViewBackground");
			}
		}

		// Token: 0x0600077F RID: 1919 RVA: 0x00027168 File Offset: 0x00025368
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.SurveillanceCamera.UI.SurveillanceCameraMonitorWindow.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Title = (string)new LocExtension("surveillance-camera-monitor-ui-window").ProvideValue();
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 0;
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 1;
			boxContainer2.MinWidth = 350f;
			boxContainer2.VerticalExpand = true;
			OptionButton optionButton = new OptionButton();
			optionButton.Name = "SubnetSelector";
			Control control = optionButton;
			context.RobustNameScope.Register("SubnetSelector", control);
			control = optionButton;
			boxContainer2.XamlChildren.Add(control);
			Button button = new Button();
			button.Name = "SubnetRefreshButton";
			control = button;
			context.RobustNameScope.Register("SubnetRefreshButton", control);
			button.Text = (string)new LocExtension("surveillance-camera-monitor-ui-refresh-subnets").ProvideValue();
			control = button;
			boxContainer2.XamlChildren.Add(control);
			ScrollContainer scrollContainer = new ScrollContainer();
			scrollContainer.VerticalExpand = true;
			ItemList itemList = new ItemList();
			itemList.Name = "SubnetList";
			control = itemList;
			context.RobustNameScope.Register("SubnetList", control);
			control = itemList;
			scrollContainer.XamlChildren.Add(control);
			control = scrollContainer;
			boxContainer2.XamlChildren.Add(control);
			Button button2 = new Button();
			button2.Name = "CameraRefreshButton";
			control = button2;
			context.RobustNameScope.Register("CameraRefreshButton", control);
			button2.Text = (string)new LocExtension("surveillance-camera-monitor-ui-refresh-cameras").ProvideValue();
			control = button2;
			boxContainer2.XamlChildren.Add(control);
			Button button3 = new Button();
			button3.Name = "CameraDisconnectButton";
			control = button3;
			context.RobustNameScope.Register("CameraDisconnectButton", control);
			button3.Text = (string)new LocExtension("surveillance-camera-monitor-ui-disconnect").ProvideValue();
			control = button3;
			boxContainer2.XamlChildren.Add(control);
			Label label = new Label();
			label.Name = "CameraStatus";
			control = label;
			context.RobustNameScope.Register("CameraStatus", control);
			control = label;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			Control control2 = new Control();
			control2.VerticalExpand = true;
			control2.HorizontalExpand = true;
			control2.Margin = new Thickness(5f, 5f, 5f, 5f);
			control2.Name = "CameraViewBox";
			control = control2;
			context.RobustNameScope.Register("CameraViewBox", control);
			ScalingViewport scalingViewport = new ScalingViewport();
			scalingViewport.Name = "CameraView";
			control = scalingViewport;
			context.RobustNameScope.Register("CameraView", control);
			scalingViewport.VerticalExpand = true;
			scalingViewport.HorizontalExpand = true;
			scalingViewport.MinSize = new Vector2(500f, 500f);
			scalingViewport.MouseFilter = 2;
			control = scalingViewport;
			control2.XamlChildren.Add(control);
			TextureRect textureRect = new TextureRect();
			textureRect.VerticalExpand = true;
			textureRect.HorizontalExpand = true;
			textureRect.MinSize = new Vector2(500f, 500f);
			textureRect.Name = "CameraViewBackground";
			control = textureRect;
			context.RobustNameScope.Register("CameraViewBackground", control);
			control = textureRect;
			control2.XamlChildren.Add(control);
			control = control2;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06000780 RID: 1920 RVA: 0x0002759C File Offset: 0x0002579C
		private static void !XamlIlPopulateTrampoline(SurveillanceCameraMonitorWindow A_0)
		{
			SurveillanceCameraMonitorWindow.Populate:Content.Client.SurveillanceCamera.UI.SurveillanceCameraMonitorWindow.xaml(null, A_0);
		}

		// Token: 0x0400036C RID: 876
		[Nullable(1)]
		[Dependency]
		private readonly IPrototypeManager _prototypeManager;

		// Token: 0x0400036D RID: 877
		[Nullable(1)]
		[Dependency]
		private readonly IResourceCache _resourceCache;

		// Token: 0x04000374 RID: 884
		[Nullable(1)]
		private string _currentAddress = string.Empty;

		// Token: 0x04000375 RID: 885
		private bool _isSwitching;

		// Token: 0x04000376 RID: 886
		[Nullable(1)]
		private readonly FixedEye _defaultEye = new FixedEye();

		// Token: 0x04000377 RID: 887
		[Nullable(1)]
		private readonly Dictionary<string, int> _subnetMap = new Dictionary<string, int>();
	}
}
