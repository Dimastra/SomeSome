using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Shared.Access;
using Content.Shared.Access.Components;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Log;
using Robust.Shared.Maths;
using Robust.Shared.Prototypes;

namespace Content.Client.Access.UI
{
	// Token: 0x020004FC RID: 1276
	[GenerateTypedNameReferences]
	public sealed class IdCardConsoleWindow : DefaultWindow
	{
		// Token: 0x0600206F RID: 8303 RVA: 0x000BBEB4 File Offset: 0x000BA0B4
		[NullableContext(1)]
		public IdCardConsoleWindow(IdCardConsoleBoundUserInterface owner, IPrototypeManager prototypeManager, List<string> accessLevels)
		{
			IdCardConsoleWindow.!XamlIlPopulateTrampoline(this);
			IoCManager.InjectDependencies<IdCardConsoleWindow>(this);
			this._owner = owner;
			this.FullNameLineEdit.OnTextEntered += delegate(LineEdit.LineEditEventArgs _)
			{
				this.SubmitData();
			};
			this.FullNameLineEdit.OnTextChanged += delegate(LineEdit.LineEditEventArgs _)
			{
				this.FullNameSaveButton.Disabled = (this.FullNameSaveButton.Text == this._lastFullName);
			};
			this.FullNameSaveButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this.SubmitData();
			};
			this.JobTitleLineEdit.OnTextEntered += delegate(LineEdit.LineEditEventArgs _)
			{
				this.SubmitData();
			};
			this.JobTitleLineEdit.OnTextChanged += delegate(LineEdit.LineEditEventArgs _)
			{
				this.JobTitleSaveButton.Disabled = (this.JobTitleLineEdit.Text == this._lastJobTitle);
			};
			this.JobTitleSaveButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this.SubmitData();
			};
			foreach (JobPrototype jobPrototype in this._prototypeManager.EnumeratePrototypes<JobPrototype>())
			{
				if (jobPrototype.SetPreference)
				{
					this._jobPrototypeIds.Add(jobPrototype.ID);
					this.JobPresetOptionButton.AddItem(Loc.GetString(jobPrototype.Name), new int?(this._jobPrototypeIds.Count - 1));
				}
			}
			this.JobPresetOptionButton.OnItemSelected += this.SelectJobPreset;
			List<Button> list = new List<Button>();
			foreach (string text in accessLevels)
			{
				AccessLevelPrototype accessLevelPrototype;
				if (!prototypeManager.TryIndex<AccessLevelPrototype>(text, ref accessLevelPrototype))
				{
					Logger.ErrorS("idconsole", "Unable to find accesslevel for " + text);
				}
				else
				{
					Button button = new Button
					{
						Text = IdCardConsoleWindow.GetAccessLevelName(accessLevelPrototype),
						ToggleMode = true
					};
					this._accessButtons.Add(accessLevelPrototype.ID, button);
					button.OnPressed += delegate(BaseButton.ButtonEventArgs _)
					{
						this.SubmitData();
					};
					list.Add(button);
				}
			}
			list.Sort((Button x, Button y) => string.Compare(x.Text, y.Text, StringComparison.Ordinal));
			foreach (Button button2 in list)
			{
				this.AccessLevelGrid.AddChild(button2);
			}
		}

		// Token: 0x06002070 RID: 8304 RVA: 0x000BC128 File Offset: 0x000BA328
		[NullableContext(1)]
		private static string GetAccessLevelName(AccessLevelPrototype prototype)
		{
			string name = prototype.Name;
			if (name != null)
			{
				return Loc.GetString(name);
			}
			return prototype.ID;
		}

		// Token: 0x06002071 RID: 8305 RVA: 0x000BC14C File Offset: 0x000BA34C
		private void ClearAllAccess()
		{
			foreach (Button button in this._accessButtons.Values)
			{
				if (button.Pressed)
				{
					button.Pressed = false;
				}
			}
		}

		// Token: 0x06002072 RID: 8306 RVA: 0x000BC1AC File Offset: 0x000BA3AC
		[NullableContext(1)]
		private void SelectJobPreset(OptionButton.ItemSelectedEventArgs args)
		{
			JobPrototype jobPrototype;
			if (!this._prototypeManager.TryIndex<JobPrototype>(this._jobPrototypeIds[args.Id], ref jobPrototype))
			{
				return;
			}
			this.JobTitleLineEdit.Text = Loc.GetString(jobPrototype.Name);
			args.Button.SelectId(args.Id);
			this.ClearAllAccess();
			foreach (string key in jobPrototype.Access)
			{
				Button button;
				if (this._accessButtons.TryGetValue(key, out button))
				{
					button.Pressed = true;
				}
			}
			foreach (string text in jobPrototype.AccessGroups)
			{
				AccessGroupPrototype accessGroupPrototype;
				if (this._prototypeManager.TryIndex<AccessGroupPrototype>(text, ref accessGroupPrototype))
				{
					foreach (string key2 in accessGroupPrototype.Tags)
					{
						Button button2;
						if (this._accessButtons.TryGetValue(key2, out button2))
						{
							button2.Pressed = true;
						}
					}
				}
			}
			this.SubmitData();
		}

		// Token: 0x06002073 RID: 8307 RVA: 0x000BC2FC File Offset: 0x000BA4FC
		[NullableContext(1)]
		public void UpdateState(SharedIdCardConsoleComponent.IdCardConsoleBoundUserInterfaceState state)
		{
			this.PrivilegedIdButton.Text = (state.IsPrivilegedIdPresent ? Loc.GetString("id-card-console-window-eject-button") : Loc.GetString("id-card-console-window-insert-button"));
			this.PrivilegedIdLabel.Text = state.PrivilegedIdName;
			this.TargetIdButton.Text = (state.IsTargetIdPresent ? Loc.GetString("id-card-console-window-eject-button") : Loc.GetString("id-card-console-window-insert-button"));
			this.TargetIdLabel.Text = state.TargetIdName;
			bool flag = state.IsPrivilegedIdPresent && state.IsPrivilegedIdAuthorized && state.IsTargetIdPresent;
			bool flag2 = this._lastFullName != null && this.FullNameLineEdit.Text != state.TargetIdFullName;
			bool flag3 = this._lastJobTitle != null && this.JobTitleLineEdit.Text != state.TargetIdJobTitle;
			this.FullNameLabel.Modulate = (flag ? Color.White : Color.Gray);
			this.FullNameLineEdit.Editable = flag;
			if (!flag2)
			{
				this.FullNameLineEdit.Text = (state.TargetIdFullName ?? string.Empty);
			}
			this.FullNameSaveButton.Disabled = (!flag || !flag2);
			this.JobTitleLabel.Modulate = (flag ? Color.White : Color.Gray);
			this.JobTitleLineEdit.Editable = flag;
			if (!flag3)
			{
				this.JobTitleLineEdit.Text = (state.TargetIdJobTitle ?? string.Empty);
			}
			this.JobTitleSaveButton.Disabled = (!flag || !flag3);
			this.JobPresetOptionButton.Disabled = !flag;
			foreach (KeyValuePair<string, Button> keyValuePair in this._accessButtons)
			{
				string text;
				Button button;
				keyValuePair.Deconstruct(out text, out button);
				string value = text;
				Button button2 = button;
				button2.Disabled = !flag;
				if (flag)
				{
					BaseButton baseButton = button2;
					string[] targetIdAccessList = state.TargetIdAccessList;
					baseButton.Pressed = (targetIdAccessList != null && targetIdAccessList.Contains(value));
				}
			}
			int num = this._jobPrototypeIds.IndexOf(state.TargetIdJobPrototype);
			if (num >= 0)
			{
				this.JobPresetOptionButton.SelectId(num);
			}
			this._lastFullName = state.TargetIdFullName;
			this._lastJobTitle = state.TargetIdJobTitle;
			this._lastJobProto = state.TargetIdJobPrototype;
		}

		// Token: 0x06002074 RID: 8308 RVA: 0x000BC560 File Offset: 0x000BA760
		private void SubmitData()
		{
			bool flag = this._lastJobProto != null && this._jobPrototypeIds[this.JobPresetOptionButton.SelectedId] != this._lastJobProto;
			this._owner.SubmitData(this.FullNameLineEdit.Text, this.JobTitleLineEdit.Text, (from x in this._accessButtons
			where x.Value.Pressed
			select x.Key).ToList<string>(), flag ? this._jobPrototypeIds[this.JobPresetOptionButton.SelectedId] : string.Empty);
		}

		// Token: 0x17000704 RID: 1796
		// (get) Token: 0x06002075 RID: 8309 RVA: 0x000BC62E File Offset: 0x000BA82E
		public Button PrivilegedIdButton
		{
			get
			{
				return base.FindControl<Button>("PrivilegedIdButton");
			}
		}

		// Token: 0x17000705 RID: 1797
		// (get) Token: 0x06002076 RID: 8310 RVA: 0x000BC63B File Offset: 0x000BA83B
		private Label PrivilegedIdLabel
		{
			get
			{
				return base.FindControl<Label>("PrivilegedIdLabel");
			}
		}

		// Token: 0x17000706 RID: 1798
		// (get) Token: 0x06002077 RID: 8311 RVA: 0x000BC648 File Offset: 0x000BA848
		public Button TargetIdButton
		{
			get
			{
				return base.FindControl<Button>("TargetIdButton");
			}
		}

		// Token: 0x17000707 RID: 1799
		// (get) Token: 0x06002078 RID: 8312 RVA: 0x000BC655 File Offset: 0x000BA855
		private Label TargetIdLabel
		{
			get
			{
				return base.FindControl<Label>("TargetIdLabel");
			}
		}

		// Token: 0x17000708 RID: 1800
		// (get) Token: 0x06002079 RID: 8313 RVA: 0x000BC662 File Offset: 0x000BA862
		public Button CrewManifestButton
		{
			get
			{
				return base.FindControl<Button>("CrewManifestButton");
			}
		}

		// Token: 0x17000709 RID: 1801
		// (get) Token: 0x0600207A RID: 8314 RVA: 0x000BC66F File Offset: 0x000BA86F
		private Label FullNameLabel
		{
			get
			{
				return base.FindControl<Label>("FullNameLabel");
			}
		}

		// Token: 0x1700070A RID: 1802
		// (get) Token: 0x0600207B RID: 8315 RVA: 0x000BC67C File Offset: 0x000BA87C
		private LineEdit FullNameLineEdit
		{
			get
			{
				return base.FindControl<LineEdit>("FullNameLineEdit");
			}
		}

		// Token: 0x1700070B RID: 1803
		// (get) Token: 0x0600207C RID: 8316 RVA: 0x000BC689 File Offset: 0x000BA889
		private Button FullNameSaveButton
		{
			get
			{
				return base.FindControl<Button>("FullNameSaveButton");
			}
		}

		// Token: 0x1700070C RID: 1804
		// (get) Token: 0x0600207D RID: 8317 RVA: 0x000BC696 File Offset: 0x000BA896
		private Label JobTitleLabel
		{
			get
			{
				return base.FindControl<Label>("JobTitleLabel");
			}
		}

		// Token: 0x1700070D RID: 1805
		// (get) Token: 0x0600207E RID: 8318 RVA: 0x000BC6A3 File Offset: 0x000BA8A3
		private LineEdit JobTitleLineEdit
		{
			get
			{
				return base.FindControl<LineEdit>("JobTitleLineEdit");
			}
		}

		// Token: 0x1700070E RID: 1806
		// (get) Token: 0x0600207F RID: 8319 RVA: 0x000BC6B0 File Offset: 0x000BA8B0
		private Button JobTitleSaveButton
		{
			get
			{
				return base.FindControl<Button>("JobTitleSaveButton");
			}
		}

		// Token: 0x1700070F RID: 1807
		// (get) Token: 0x06002080 RID: 8320 RVA: 0x000BC6BD File Offset: 0x000BA8BD
		private OptionButton JobPresetOptionButton
		{
			get
			{
				return base.FindControl<OptionButton>("JobPresetOptionButton");
			}
		}

		// Token: 0x17000710 RID: 1808
		// (get) Token: 0x06002081 RID: 8321 RVA: 0x000BC6CA File Offset: 0x000BA8CA
		private GridContainer AccessLevelGrid
		{
			get
			{
				return base.FindControl<GridContainer>("AccessLevelGrid");
			}
		}

		// Token: 0x06002089 RID: 8329 RVA: 0x000BC728 File Offset: 0x000BA928
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.Access.UI.IdCardConsoleWindow.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.MinSize = new Vector2(650f, 290f);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			GridContainer gridContainer = new GridContainer();
			gridContainer.Columns = 2;
			GridContainer gridContainer2 = new GridContainer();
			gridContainer2.Columns = 3;
			gridContainer2.HorizontalExpand = true;
			Control control = new Label
			{
				Text = (string)new LocExtension("id-card-console-window-privileged-id").ProvideValue()
			};
			gridContainer2.XamlChildren.Add(control);
			Button button = new Button();
			button.Name = "PrivilegedIdButton";
			control = button;
			context.RobustNameScope.Register("PrivilegedIdButton", control);
			button.Access = new AccessLevel?(0);
			control = button;
			gridContainer2.XamlChildren.Add(control);
			Label label = new Label();
			label.Name = "PrivilegedIdLabel";
			control = label;
			context.RobustNameScope.Register("PrivilegedIdLabel", control);
			control = label;
			gridContainer2.XamlChildren.Add(control);
			control = new Label
			{
				Text = (string)new LocExtension("id-card-console-window-target-id").ProvideValue()
			};
			gridContainer2.XamlChildren.Add(control);
			Button button2 = new Button();
			button2.Name = "TargetIdButton";
			control = button2;
			context.RobustNameScope.Register("TargetIdButton", control);
			button2.Access = new AccessLevel?(0);
			control = button2;
			gridContainer2.XamlChildren.Add(control);
			Label label2 = new Label();
			label2.Name = "TargetIdLabel";
			control = label2;
			context.RobustNameScope.Register("TargetIdLabel", control);
			control = label2;
			gridContainer2.XamlChildren.Add(control);
			control = gridContainer2;
			gridContainer.XamlChildren.Add(control);
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 1;
			Button button3 = new Button();
			button3.Name = "CrewManifestButton";
			control = button3;
			context.RobustNameScope.Register("CrewManifestButton", control);
			button3.Access = new AccessLevel?(0);
			button3.Text = (string)new LocExtension("crew-manifest-button-label").ProvideValue();
			control = button3;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			gridContainer.XamlChildren.Add(control);
			control = gridContainer;
			boxContainer.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(0f, 8f)
			};
			boxContainer.XamlChildren.Add(control);
			GridContainer gridContainer3 = new GridContainer();
			gridContainer3.Columns = 3;
			gridContainer3.HSeparationOverride = new int?(4);
			Label label3 = new Label();
			label3.Name = "FullNameLabel";
			control = label3;
			context.RobustNameScope.Register("FullNameLabel", control);
			label3.Text = (string)new LocExtension("id-card-console-window-full-name-label").ProvideValue();
			control = label3;
			gridContainer3.XamlChildren.Add(control);
			LineEdit lineEdit = new LineEdit();
			lineEdit.Name = "FullNameLineEdit";
			control = lineEdit;
			context.RobustNameScope.Register("FullNameLineEdit", control);
			lineEdit.HorizontalExpand = true;
			control = lineEdit;
			gridContainer3.XamlChildren.Add(control);
			Button button4 = new Button();
			button4.Name = "FullNameSaveButton";
			control = button4;
			context.RobustNameScope.Register("FullNameSaveButton", control);
			button4.Text = (string)new LocExtension("id-card-console-window-save-button").ProvideValue();
			button4.Disabled = true;
			control = button4;
			gridContainer3.XamlChildren.Add(control);
			Label label4 = new Label();
			label4.Name = "JobTitleLabel";
			control = label4;
			context.RobustNameScope.Register("JobTitleLabel", control);
			label4.Text = (string)new LocExtension("id-card-console-window-job-title-label").ProvideValue();
			control = label4;
			gridContainer3.XamlChildren.Add(control);
			LineEdit lineEdit2 = new LineEdit();
			lineEdit2.Name = "JobTitleLineEdit";
			control = lineEdit2;
			context.RobustNameScope.Register("JobTitleLineEdit", control);
			lineEdit2.HorizontalExpand = true;
			control = lineEdit2;
			gridContainer3.XamlChildren.Add(control);
			Button button5 = new Button();
			button5.Name = "JobTitleSaveButton";
			control = button5;
			context.RobustNameScope.Register("JobTitleSaveButton", control);
			button5.Text = (string)new LocExtension("id-card-console-window-save-button").ProvideValue();
			button5.Disabled = true;
			control = button5;
			gridContainer3.XamlChildren.Add(control);
			control = gridContainer3;
			boxContainer.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(0f, 8f)
			};
			boxContainer.XamlChildren.Add(control);
			GridContainer gridContainer4 = new GridContainer();
			gridContainer4.Columns = 2;
			control = new Label
			{
				Text = (string)new LocExtension("id-card-console-window-job-selection-label").ProvideValue()
			};
			gridContainer4.XamlChildren.Add(control);
			OptionButton optionButton = new OptionButton();
			optionButton.Name = "JobPresetOptionButton";
			control = optionButton;
			context.RobustNameScope.Register("JobPresetOptionButton", control);
			control = optionButton;
			gridContainer4.XamlChildren.Add(control);
			control = gridContainer4;
			boxContainer.XamlChildren.Add(control);
			GridContainer gridContainer5 = new GridContainer();
			gridContainer5.Name = "AccessLevelGrid";
			control = gridContainer5;
			context.RobustNameScope.Register("AccessLevelGrid", control);
			gridContainer5.Columns = 5;
			gridContainer5.HorizontalAlignment = 2;
			control = gridContainer5;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x0600208A RID: 8330 RVA: 0x000BCDC9 File Offset: 0x000BAFC9
		private static void !XamlIlPopulateTrampoline(IdCardConsoleWindow A_0)
		{
			IdCardConsoleWindow.Populate:Content.Client.Access.UI.IdCardConsoleWindow.xaml(null, A_0);
		}

		// Token: 0x04000F73 RID: 3955
		[Nullable(1)]
		[Dependency]
		private readonly IPrototypeManager _prototypeManager;

		// Token: 0x04000F74 RID: 3956
		[Nullable(1)]
		private readonly IdCardConsoleBoundUserInterface _owner;

		// Token: 0x04000F75 RID: 3957
		[Nullable(1)]
		private readonly Dictionary<string, Button> _accessButtons = new Dictionary<string, Button>();

		// Token: 0x04000F76 RID: 3958
		[Nullable(1)]
		private readonly List<string> _jobPrototypeIds = new List<string>();

		// Token: 0x04000F77 RID: 3959
		[Nullable(2)]
		private string _lastFullName;

		// Token: 0x04000F78 RID: 3960
		[Nullable(2)]
		private string _lastJobTitle;

		// Token: 0x04000F79 RID: 3961
		[Nullable(2)]
		private string _lastJobProto;
	}
}
