using System;
using System.Linq;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Shared.Chemistry;
using Content.Shared.Chemistry.Components;
using Content.Shared.Chemistry.Reagent;
using Content.Shared.FixedPoint;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.Utility;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.Chemistry.UI
{
	// Token: 0x020003D2 RID: 978
	[GenerateTypedNameReferences]
	public sealed class ChemMasterWindow : DefaultWindow
	{
		// Token: 0x1400008C RID: 140
		// (add) Token: 0x0600180A RID: 6154 RVA: 0x0008A11C File Offset: 0x0008831C
		// (remove) Token: 0x0600180B RID: 6155 RVA: 0x0008A154 File Offset: 0x00088354
		[Nullable(new byte[]
		{
			2,
			1,
			1
		})]
		[Nullable(new byte[]
		{
			2,
			1,
			1
		})]
		public event Action<BaseButton.ButtonEventArgs, ReagentButton> OnReagentButtonPressed;

		// Token: 0x0600180C RID: 6156 RVA: 0x0008A18C File Offset: 0x0008838C
		public ChemMasterWindow()
		{
			ChemMasterWindow.!XamlIlPopulateTrampoline(this);
			IoCManager.InjectDependencies<ChemMasterWindow>(this);
			ResourcePath resourcePath = new ResourcePath("/Textures/Objects/Specific/Chemistry/pills.rsi", "/");
			ButtonGroup group = new ButtonGroup();
			this.PillTypeButtons = new Button[20];
			uint num = 0U;
			while ((ulong)num < (ulong)((long)this.PillTypeButtons.Length))
			{
				string item = "OpenBoth";
				uint num2 = num % 10U;
				if (num > 0U && num2 == 0U)
				{
					item = "OpenRight";
				}
				else if (num > 0U && num2 == 9U)
				{
					item = "OpenLeft";
				}
				else if (num == 0U)
				{
					item = "OpenRight";
				}
				this.PillTypeButtons[(int)num] = new Button
				{
					Access = new AccessLevel?(0),
					StyleClasses = 
					{
						item
					},
					MaxSize = new ValueTuple<float, float>(42f, 28f),
					Group = group
				};
				SpriteSpecifier.Rsi rsi = new SpriteSpecifier.Rsi(resourcePath, "pill" + (num + 1U).ToString());
				TextureRect textureRect = new TextureRect
				{
					Texture = SpriteSpecifierExt.Frame0(rsi),
					TextureScale = new ValueTuple<float, float>(1.75f, 1.75f),
					Stretch = 4
				};
				this.PillTypeButtons[(int)num].AddChild(textureRect);
				this.Grid.AddChild(this.PillTypeButtons[(int)num]);
				num += 1U;
			}
			this.PillDosage.InitDefaultButtons();
			this.PillNumber.InitDefaultButtons();
			this.BottleDosage.InitDefaultButtons();
			this.LabelLineEdit.IsValid = ((string s) => (long)s.Length <= 50L);
			this.Tabs.SetTabTitle(0, Loc.GetString("chem-master-window-input-tab"));
			this.Tabs.SetTabTitle(1, Loc.GetString("chem-master-window-output-tab"));
		}

		// Token: 0x0600180D RID: 6157 RVA: 0x0008A354 File Offset: 0x00088554
		[NullableContext(1)]
		private ReagentButton MakeReagentButton(string text, ChemMasterReagentAmount amount, string id, bool isBuffer, string styleClass)
		{
			ReagentButton button = new ReagentButton(text, amount, id, isBuffer, styleClass);
			button.OnPressed += delegate(BaseButton.ButtonEventArgs args)
			{
				Action<BaseButton.ButtonEventArgs, ReagentButton> onReagentButtonPressed = this.OnReagentButtonPressed;
				if (onReagentButtonPressed == null)
				{
					return;
				}
				onReagentButtonPressed(args, button);
			};
			return button;
		}

		// Token: 0x0600180E RID: 6158 RVA: 0x0008A3A0 File Offset: 0x000885A0
		[NullableContext(1)]
		public void UpdateState(BoundUserInterfaceState state)
		{
			ChemMasterBoundUserInterfaceState castState = (ChemMasterBoundUserInterfaceState)state;
			if (castState.UpdateLabel)
			{
				this.LabelLine = this.GenerateLabel(castState);
			}
			this.UpdatePanelInfo(castState);
			ContainerInfo outputContainerInfo = castState.OutputContainerInfo;
			Label bufferCurrentVolume = this.BufferCurrentVolume;
			DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(2, 1);
			defaultInterpolatedStringHandler.AppendLiteral(" ");
			ChemMasterBoundUserInterfaceState castState2 = castState;
			defaultInterpolatedStringHandler.AppendFormatted<int>((castState2.BufferCurrentVolume != null) ? castState2.BufferCurrentVolume.GetValueOrDefault().Int() : 0);
			defaultInterpolatedStringHandler.AppendLiteral("u");
			bufferCurrentVolume.Text = defaultInterpolatedStringHandler.ToStringAndClear();
			this.InputEjectButton.Disabled = (castState.InputContainerInfo == null);
			this.OutputEjectButton.Disabled = (outputContainerInfo == null);
			this.CreateBottleButton.Disabled = (outputContainerInfo == null || !outputContainerInfo.HoldsReagents);
			this.CreatePillButton.Disabled = (outputContainerInfo == null || outputContainerInfo.HoldsReagents);
			int num = (outputContainerInfo == null) ? 0 : (outputContainerInfo.MaxVolume - outputContainerInfo.CurrentVolume).Int();
			bool flag = outputContainerInfo != null && outputContainerInfo.HoldsReagents;
			int pillNumberMax = flag ? 0 : num;
			int bottleAmountMax = flag ? num : 0;
			this.PillTypeButtons[(int)castState.SelectedPillType].Pressed = true;
			this.PillNumber.IsValid = ((int x) => x >= 0 && x <= pillNumberMax);
			this.PillDosage.IsValid = ((int x) => x > 0 && (long)x <= (long)((ulong)castState.PillDosageLimit));
			this.BottleDosage.IsValid = ((int x) => x >= 0 && x <= bottleAmountMax);
			if (this.PillNumber.Value > pillNumberMax)
			{
				this.PillNumber.Value = pillNumberMax;
			}
			if (this.BottleDosage.Value > bottleAmountMax)
			{
				this.BottleDosage.Value = bottleAmountMax;
			}
		}

		// Token: 0x0600180F RID: 6159 RVA: 0x0008A59C File Offset: 0x0008879C
		[NullableContext(1)]
		private string GenerateLabel(ChemMasterBoundUserInterfaceState state)
		{
			FixedPoint2? bufferCurrentVolume = state.BufferCurrentVolume;
			FixedPoint2 b = 0;
			if (bufferCurrentVolume != null && (bufferCurrentVolume == null || bufferCurrentVolume.GetValueOrDefault() == b))
			{
				return "";
			}
			Solution.ReagentQuantity reagentQuantity = (from r in state.BufferReagents
			orderby r.Quantity
			select r).First<Solution.ReagentQuantity>();
			ReagentPrototype reagentPrototype;
			this._prototypeManager.TryIndex<ReagentPrototype>(reagentQuantity.ReagentId, ref reagentPrototype);
			return ((reagentPrototype != null) ? reagentPrototype.LocalizedName : null) ?? "";
		}

		// Token: 0x06001810 RID: 6160 RVA: 0x0008A640 File Offset: 0x00088840
		[NullableContext(1)]
		private void UpdatePanelInfo(ChemMasterBoundUserInterfaceState state)
		{
			this.BufferTransferButton.Pressed = (state.Mode == ChemMasterMode.Transfer);
			this.BufferDiscardButton.Pressed = (state.Mode == ChemMasterMode.Discard);
			this.BuildContainerUI(this.InputContainerInfo, state.InputContainerInfo, true);
			this.BuildContainerUI(this.OutputContainerInfo, state.OutputContainerInfo, false);
			this.BufferInfo.Children.Clear();
			if (!state.BufferReagents.Any<Solution.ReagentQuantity>())
			{
				this.BufferInfo.Children.Add(new Label
				{
					Text = Loc.GetString("chem-master-window-buffer-empty-text")
				});
				return;
			}
			BoxContainer boxContainer = new BoxContainer
			{
				Orientation = 0
			};
			this.BufferInfo.AddChild(boxContainer);
			Label label = new Label
			{
				Text = Loc.GetString("chem-master-window-buffer-label") + " "
			};
			boxContainer.AddChild(label);
			Label label2 = new Label();
			DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(1, 1);
			defaultInterpolatedStringHandler.AppendFormatted<FixedPoint2?>(state.BufferCurrentVolume);
			defaultInterpolatedStringHandler.AppendLiteral("u");
			label2.Text = defaultInterpolatedStringHandler.ToStringAndClear();
			label2.StyleClasses.Add("LabelSecondaryColor");
			Label label3 = label2;
			boxContainer.AddChild(label3);
			foreach (Solution.ReagentQuantity reagentQuantity in state.BufferReagents)
			{
				ReagentPrototype reagentPrototype;
				this._prototypeManager.TryIndex<ReagentPrototype>(reagentQuantity.ReagentId, ref reagentPrototype);
				string str = ((reagentPrototype != null) ? reagentPrototype.LocalizedName : null) ?? Loc.GetString("chem-master-window-unknown-reagent-text");
				if (reagentPrototype != null)
				{
					Control.OrderedChildCollection children = this.BufferInfo.Children;
					BoxContainer boxContainer2 = new BoxContainer();
					boxContainer2.Orientation = 0;
					boxContainer2.Children.Add(new Label
					{
						Text = str + ": "
					});
					Control.OrderedChildCollection children2 = boxContainer2.Children;
					Label label4 = new Label();
					defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(1, 1);
					defaultInterpolatedStringHandler.AppendFormatted<FixedPoint2>(reagentQuantity.Quantity);
					defaultInterpolatedStringHandler.AppendLiteral("u");
					label4.Text = defaultInterpolatedStringHandler.ToStringAndClear();
					label4.StyleClasses.Add("LabelSecondaryColor");
					children2.Add(label4);
					boxContainer2.Children.Add(new Control
					{
						HorizontalExpand = true
					});
					boxContainer2.Children.Add(this.MakeReagentButton("1", ChemMasterReagentAmount.U1, reagentQuantity.ReagentId, true, "OpenRight"));
					boxContainer2.Children.Add(this.MakeReagentButton("5", ChemMasterReagentAmount.U5, reagentQuantity.ReagentId, true, "OpenBoth"));
					boxContainer2.Children.Add(this.MakeReagentButton("10", ChemMasterReagentAmount.U10, reagentQuantity.ReagentId, true, "OpenBoth"));
					boxContainer2.Children.Add(this.MakeReagentButton("25", ChemMasterReagentAmount.U25, reagentQuantity.ReagentId, true, "OpenBoth"));
					boxContainer2.Children.Add(this.MakeReagentButton(Loc.GetString("chem-master-window-buffer-all-amount"), ChemMasterReagentAmount.All, reagentQuantity.ReagentId, true, "OpenLeft"));
					children.Add(boxContainer2);
				}
			}
		}

		// Token: 0x06001811 RID: 6161 RVA: 0x0008A958 File Offset: 0x00088B58
		[NullableContext(1)]
		private void BuildContainerUI(Control control, [Nullable(2)] ContainerInfo info, bool addReagentButtons)
		{
			control.Children.Clear();
			if (info == null)
			{
				control.Children.Add(new Label
				{
					Text = Loc.GetString("chem-master-window-no-container-loaded-text")
				});
				return;
			}
			Control.OrderedChildCollection children = control.Children;
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 0;
			boxContainer.Children.Add(new Label
			{
				Text = info.DisplayName + ": "
			});
			Control.OrderedChildCollection children2 = boxContainer.Children;
			Label label = new Label();
			DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(1, 2);
			defaultInterpolatedStringHandler.AppendFormatted<FixedPoint2>(info.CurrentVolume);
			defaultInterpolatedStringHandler.AppendLiteral("/");
			defaultInterpolatedStringHandler.AppendFormatted<FixedPoint2>(info.MaxVolume);
			label.Text = defaultInterpolatedStringHandler.ToStringAndClear();
			label.StyleClasses.Add("LabelSecondaryColor");
			children2.Add(label);
			children.Add(boxContainer);
			foreach (ValueTuple<string, string, FixedPoint2> valueTuple in from r in info.Contents.Select(delegate([TupleElementNames(new string[]
			{
				"Id",
				"Quantity"
			})] ValueTuple<string, FixedPoint2> lineItem)
			{
				if (!info.HoldsReagents)
				{
					return new ValueTuple<string, string, FixedPoint2>(lineItem.Item1, lineItem.Item1, lineItem.Item2);
				}
				ReagentPrototype reagentPrototype;
				this._prototypeManager.TryIndex<ReagentPrototype>(lineItem.Item1, ref reagentPrototype);
				return new ValueTuple<string, string, FixedPoint2>(((reagentPrototype != null) ? reagentPrototype.LocalizedName : null) ?? Loc.GetString("chem-master-window-unknown-reagent-text"), lineItem.Item1, lineItem.Item2);
			})
			orderby r.Item1
			select r)
			{
				string item = valueTuple.Item1;
				string item2 = valueTuple.Item2;
				FixedPoint2 item3 = valueTuple.Item3;
				BoxContainer boxContainer2 = new BoxContainer();
				boxContainer2.Orientation = 0;
				boxContainer2.Children.Add(new Label
				{
					Text = item + ": "
				});
				Control.OrderedChildCollection children3 = boxContainer2.Children;
				Label label2 = new Label();
				defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(1, 1);
				defaultInterpolatedStringHandler.AppendFormatted<FixedPoint2>(item3);
				defaultInterpolatedStringHandler.AppendLiteral("u");
				label2.Text = defaultInterpolatedStringHandler.ToStringAndClear();
				label2.StyleClasses.Add("LabelSecondaryColor");
				children3.Add(label2);
				BoxContainer boxContainer3 = boxContainer2;
				if (addReagentButtons)
				{
					Control.OrderedChildCollection children4 = boxContainer3.Children;
					children4.Add(new Control
					{
						HorizontalExpand = true
					});
					children4.Add(this.MakeReagentButton("1", ChemMasterReagentAmount.U1, item2, false, "OpenRight"));
					children4.Add(this.MakeReagentButton("5", ChemMasterReagentAmount.U5, item2, false, "OpenBoth"));
					children4.Add(this.MakeReagentButton("10", ChemMasterReagentAmount.U10, item2, false, "OpenBoth"));
					children4.Add(this.MakeReagentButton("25", ChemMasterReagentAmount.U25, item2, false, "OpenBoth"));
					children4.Add(this.MakeReagentButton(Loc.GetString("chem-master-window-buffer-all-amount"), ChemMasterReagentAmount.All, item2, false, "OpenLeft"));
				}
				control.Children.Add(boxContainer3);
			}
		}

		// Token: 0x170004EC RID: 1260
		// (get) Token: 0x06001812 RID: 6162 RVA: 0x0008AC20 File Offset: 0x00088E20
		// (set) Token: 0x06001813 RID: 6163 RVA: 0x0008AC2D File Offset: 0x00088E2D
		[Nullable(1)]
		public string LabelLine
		{
			[NullableContext(1)]
			get
			{
				return this.LabelLineEdit.Text;
			}
			[NullableContext(1)]
			set
			{
				this.LabelLineEdit.Text = value;
			}
		}

		// Token: 0x170004ED RID: 1261
		// (get) Token: 0x06001814 RID: 6164 RVA: 0x0004B7E9 File Offset: 0x000499E9
		private TabContainer Tabs
		{
			get
			{
				return base.FindControl<TabContainer>("Tabs");
			}
		}

		// Token: 0x170004EE RID: 1262
		// (get) Token: 0x06001815 RID: 6165 RVA: 0x0008AC3B File Offset: 0x00088E3B
		public Button InputEjectButton
		{
			get
			{
				return base.FindControl<Button>("InputEjectButton");
			}
		}

		// Token: 0x170004EF RID: 1263
		// (get) Token: 0x06001816 RID: 6166 RVA: 0x0008AC48 File Offset: 0x00088E48
		private BoxContainer InputContainerInfo
		{
			get
			{
				return base.FindControl<BoxContainer>("InputContainerInfo");
			}
		}

		// Token: 0x170004F0 RID: 1264
		// (get) Token: 0x06001817 RID: 6167 RVA: 0x0008AC55 File Offset: 0x00088E55
		public Button BufferTransferButton
		{
			get
			{
				return base.FindControl<Button>("BufferTransferButton");
			}
		}

		// Token: 0x170004F1 RID: 1265
		// (get) Token: 0x06001818 RID: 6168 RVA: 0x0008AC62 File Offset: 0x00088E62
		public Button BufferDiscardButton
		{
			get
			{
				return base.FindControl<Button>("BufferDiscardButton");
			}
		}

		// Token: 0x170004F2 RID: 1266
		// (get) Token: 0x06001819 RID: 6169 RVA: 0x0008AC6F File Offset: 0x00088E6F
		private BoxContainer BufferInfo
		{
			get
			{
				return base.FindControl<BoxContainer>("BufferInfo");
			}
		}

		// Token: 0x170004F3 RID: 1267
		// (get) Token: 0x0600181A RID: 6170 RVA: 0x0008AC7C File Offset: 0x00088E7C
		public Button OutputEjectButton
		{
			get
			{
				return base.FindControl<Button>("OutputEjectButton");
			}
		}

		// Token: 0x170004F4 RID: 1268
		// (get) Token: 0x0600181B RID: 6171 RVA: 0x0008AC89 File Offset: 0x00088E89
		private BoxContainer OutputContainerInfo
		{
			get
			{
				return base.FindControl<BoxContainer>("OutputContainerInfo");
			}
		}

		// Token: 0x170004F5 RID: 1269
		// (get) Token: 0x0600181C RID: 6172 RVA: 0x0008AC96 File Offset: 0x00088E96
		private Label BufferCurrentVolume
		{
			get
			{
				return base.FindControl<Label>("BufferCurrentVolume");
			}
		}

		// Token: 0x170004F6 RID: 1270
		// (get) Token: 0x0600181D RID: 6173 RVA: 0x00063675 File Offset: 0x00061875
		private LineEdit LabelLineEdit
		{
			get
			{
				return base.FindControl<LineEdit>("LabelLineEdit");
			}
		}

		// Token: 0x170004F7 RID: 1271
		// (get) Token: 0x0600181E RID: 6174 RVA: 0x0007D5E1 File Offset: 0x0007B7E1
		private GridContainer Grid
		{
			get
			{
				return base.FindControl<GridContainer>("Grid");
			}
		}

		// Token: 0x170004F8 RID: 1272
		// (get) Token: 0x0600181F RID: 6175 RVA: 0x0008ACA3 File Offset: 0x00088EA3
		public SpinBox PillNumber
		{
			get
			{
				return base.FindControl<SpinBox>("PillNumber");
			}
		}

		// Token: 0x170004F9 RID: 1273
		// (get) Token: 0x06001820 RID: 6176 RVA: 0x0008ACB0 File Offset: 0x00088EB0
		public SpinBox PillDosage
		{
			get
			{
				return base.FindControl<SpinBox>("PillDosage");
			}
		}

		// Token: 0x170004FA RID: 1274
		// (get) Token: 0x06001821 RID: 6177 RVA: 0x0008ACBD File Offset: 0x00088EBD
		public Button CreatePillButton
		{
			get
			{
				return base.FindControl<Button>("CreatePillButton");
			}
		}

		// Token: 0x170004FB RID: 1275
		// (get) Token: 0x06001822 RID: 6178 RVA: 0x0008ACCA File Offset: 0x00088ECA
		public SpinBox BottleDosage
		{
			get
			{
				return base.FindControl<SpinBox>("BottleDosage");
			}
		}

		// Token: 0x170004FC RID: 1276
		// (get) Token: 0x06001823 RID: 6179 RVA: 0x0008ACD7 File Offset: 0x00088ED7
		public Button CreateBottleButton
		{
			get
			{
				return base.FindControl<Button>("CreateBottleButton");
			}
		}

		// Token: 0x06001824 RID: 6180 RVA: 0x0008ACE4 File Offset: 0x00088EE4
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.Chemistry.UI.ChemMasterWindow.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.MinSize = new Vector2(620f, 670f);
			A_1.Title = (string)new LocExtension("chem-master-bound-user-interface-title").ProvideValue();
			TabContainer tabContainer = new TabContainer();
			tabContainer.Name = "Tabs";
			Control control = tabContainer;
			context.RobustNameScope.Register("Tabs", control);
			tabContainer.Margin = new Thickness(0f, 0f, 2f, 0f);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			boxContainer.HorizontalExpand = true;
			boxContainer.Margin = new Thickness(5f, 5f, 5f, 5f);
			boxContainer.SeparationOverride = new int?(10);
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("chem-master-window-container-label").ProvideValue()
			};
			boxContainer2.XamlChildren.Add(control);
			control = new Control
			{
				HorizontalExpand = true
			};
			boxContainer2.XamlChildren.Add(control);
			Button button = new Button();
			button.Name = "InputEjectButton";
			control = button;
			context.RobustNameScope.Register("InputEjectButton", control);
			button.Access = new AccessLevel?(0);
			button.Text = (string)new LocExtension("chem-master-window-eject-button").ProvideValue();
			control = button;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			PanelContainer panelContainer = new PanelContainer();
			panelContainer.VerticalExpand = true;
			panelContainer.MinSize = new Vector2(0f, 200f);
			panelContainer.PanelOverride = new StyleBoxFlat
			{
				BackgroundColor = Color.FromXaml("#1b1b1b")
			};
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Name = "InputContainerInfo";
			control = boxContainer3;
			context.RobustNameScope.Register("InputContainerInfo", control);
			boxContainer3.Orientation = 1;
			boxContainer3.Margin = new Thickness(4f, 4f, 4f, 4f);
			boxContainer3.HorizontalExpand = true;
			control = new Label
			{
				Text = (string)new LocExtension("chem-master-window-no-container-loaded-text").ProvideValue()
			};
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			panelContainer.XamlChildren.Add(control);
			control = panelContainer;
			boxContainer.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(0f, 10f)
			};
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer4 = new BoxContainer();
			boxContainer4.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("chem-master-window-buffer-text").ProvideValue()
			};
			boxContainer4.XamlChildren.Add(control);
			control = new Control
			{
				HorizontalExpand = true
			};
			boxContainer4.XamlChildren.Add(control);
			Button button2 = new Button();
			button2.Name = "BufferTransferButton";
			control = button2;
			context.RobustNameScope.Register("BufferTransferButton", control);
			button2.Access = new AccessLevel?(0);
			button2.Text = (string)new LocExtension("chem-master-window-transfer-button").ProvideValue();
			button2.ToggleMode = true;
			string item = "OpenRight";
			button2.StyleClasses.Add(item);
			control = button2;
			boxContainer4.XamlChildren.Add(control);
			Button button3 = new Button();
			button3.Name = "BufferDiscardButton";
			control = button3;
			context.RobustNameScope.Register("BufferDiscardButton", control);
			button3.Access = new AccessLevel?(0);
			button3.Text = (string)new LocExtension("chem-master-window-discard-button").ProvideValue();
			button3.ToggleMode = true;
			item = "OpenLeft";
			button3.StyleClasses.Add(item);
			control = button3;
			boxContainer4.XamlChildren.Add(control);
			control = boxContainer4;
			boxContainer.XamlChildren.Add(control);
			PanelContainer panelContainer2 = new PanelContainer();
			panelContainer2.VerticalExpand = true;
			panelContainer2.MinSize = new Vector2(0f, 200f);
			panelContainer2.PanelOverride = new StyleBoxFlat
			{
				BackgroundColor = Color.FromXaml("#1b1b1b")
			};
			BoxContainer boxContainer5 = new BoxContainer();
			boxContainer5.Name = "BufferInfo";
			control = boxContainer5;
			context.RobustNameScope.Register("BufferInfo", control);
			boxContainer5.Orientation = 1;
			boxContainer5.Margin = new Thickness(4f, 4f, 4f, 4f);
			boxContainer5.HorizontalExpand = true;
			control = new Label
			{
				Text = (string)new LocExtension("chem-master-window-buffer-empty-text").ProvideValue()
			};
			boxContainer5.XamlChildren.Add(control);
			control = boxContainer5;
			panelContainer2.XamlChildren.Add(control);
			control = panelContainer2;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			tabContainer.XamlChildren.Add(control);
			BoxContainer boxContainer6 = new BoxContainer();
			boxContainer6.Orientation = 1;
			boxContainer6.HorizontalExpand = true;
			boxContainer6.Margin = new Thickness(5f, 5f, 5f, 5f);
			boxContainer6.SeparationOverride = new int?(10);
			BoxContainer boxContainer7 = new BoxContainer();
			boxContainer7.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("chem-master-window-container-label").ProvideValue()
			};
			boxContainer7.XamlChildren.Add(control);
			control = new Control
			{
				HorizontalExpand = true
			};
			boxContainer7.XamlChildren.Add(control);
			Button button4 = new Button();
			button4.Name = "OutputEjectButton";
			control = button4;
			context.RobustNameScope.Register("OutputEjectButton", control);
			button4.Access = new AccessLevel?(0);
			button4.Text = (string)new LocExtension("chem-master-window-eject-button").ProvideValue();
			control = button4;
			boxContainer7.XamlChildren.Add(control);
			control = boxContainer7;
			boxContainer6.XamlChildren.Add(control);
			PanelContainer panelContainer3 = new PanelContainer();
			panelContainer3.VerticalExpand = true;
			panelContainer3.MinSize = new Vector2(0f, 200f);
			panelContainer3.PanelOverride = new StyleBoxFlat
			{
				BackgroundColor = Color.FromXaml("#1b1b1b")
			};
			BoxContainer boxContainer8 = new BoxContainer();
			boxContainer8.Name = "OutputContainerInfo";
			control = boxContainer8;
			context.RobustNameScope.Register("OutputContainerInfo", control);
			boxContainer8.Orientation = 1;
			boxContainer8.Margin = new Thickness(4f, 4f, 4f, 4f);
			boxContainer8.HorizontalExpand = true;
			control = new Label
			{
				Text = (string)new LocExtension("chem-master-window-no-container-loaded-text").ProvideValue()
			};
			boxContainer8.XamlChildren.Add(control);
			control = boxContainer8;
			panelContainer3.XamlChildren.Add(control);
			control = panelContainer3;
			boxContainer6.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(0f, 10f)
			};
			boxContainer6.XamlChildren.Add(control);
			BoxContainer boxContainer9 = new BoxContainer();
			boxContainer9.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("chem-master-window-packaging-text").ProvideValue()
			};
			boxContainer9.XamlChildren.Add(control);
			control = new Control
			{
				HorizontalExpand = true
			};
			boxContainer9.XamlChildren.Add(control);
			control = new Label
			{
				Text = (string)new LocExtension("chem-master-window-buffer-label").ProvideValue()
			};
			boxContainer9.XamlChildren.Add(control);
			Label label = new Label();
			label.Name = "BufferCurrentVolume";
			control = label;
			context.RobustNameScope.Register("BufferCurrentVolume", control);
			item = "LabelSecondaryColor";
			label.StyleClasses.Add(item);
			control = label;
			boxContainer9.XamlChildren.Add(control);
			control = boxContainer9;
			boxContainer6.XamlChildren.Add(control);
			PanelContainer panelContainer4 = new PanelContainer();
			panelContainer4.PanelOverride = new StyleBoxFlat
			{
				BackgroundColor = Color.FromXaml("#1b1b1b")
			};
			BoxContainer boxContainer10 = new BoxContainer();
			boxContainer10.Orientation = 1;
			boxContainer10.Margin = new Thickness(4f, 4f, 4f, 4f);
			boxContainer10.HorizontalExpand = true;
			boxContainer10.VerticalExpand = true;
			boxContainer10.SeparationOverride = new int?(5);
			BoxContainer boxContainer11 = new BoxContainer();
			boxContainer11.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("chem-master-current-text-label").ProvideValue()
			};
			boxContainer11.XamlChildren.Add(control);
			control = new Control
			{
				HorizontalExpand = true,
				MinSize = new Vector2(50f, 0f)
			};
			boxContainer11.XamlChildren.Add(control);
			LineEdit lineEdit = new LineEdit();
			lineEdit.Name = "LabelLineEdit";
			control = lineEdit;
			context.RobustNameScope.Register("LabelLineEdit", control);
			lineEdit.SetWidth = 455f;
			control = lineEdit;
			boxContainer11.XamlChildren.Add(control);
			control = boxContainer11;
			boxContainer10.XamlChildren.Add(control);
			BoxContainer boxContainer12 = new BoxContainer();
			boxContainer12.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("chem-master-window-pill-type-label").ProvideValue()
			};
			boxContainer12.XamlChildren.Add(control);
			control = new Control
			{
				HorizontalExpand = true,
				MinSize = new Vector2(50f, 0f)
			};
			boxContainer12.XamlChildren.Add(control);
			GridContainer gridContainer = new GridContainer();
			gridContainer.Name = "Grid";
			control = gridContainer;
			context.RobustNameScope.Register("Grid", control);
			gridContainer.Columns = 10;
			control = gridContainer;
			boxContainer12.XamlChildren.Add(control);
			control = boxContainer12;
			boxContainer10.XamlChildren.Add(control);
			BoxContainer boxContainer13 = new BoxContainer();
			boxContainer13.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("chem-master-window-pills-label").ProvideValue()
			};
			boxContainer13.XamlChildren.Add(control);
			control = new Control
			{
				HorizontalExpand = true,
				MinSize = new Vector2(50f, 0f)
			};
			boxContainer13.XamlChildren.Add(control);
			Label label2 = new Label();
			label2.Text = (string)new LocExtension("chem-master-window-pills-number-label").ProvideValue();
			label2.Margin = new Thickness(5f, 0f, 0f, 0f);
			item = "LabelSecondaryColor";
			label2.StyleClasses.Add(item);
			control = label2;
			boxContainer13.XamlChildren.Add(control);
			SpinBox spinBox = new SpinBox();
			spinBox.Name = "PillNumber";
			control = spinBox;
			context.RobustNameScope.Register("PillNumber", control);
			spinBox.Access = new AccessLevel?(0);
			spinBox.Value = 0;
			control = spinBox;
			boxContainer13.XamlChildren.Add(control);
			Label label3 = new Label();
			label3.Text = (string)new LocExtension("chem-master-window-dose-label").ProvideValue();
			label3.Margin = new Thickness(5f, 0f, 0f, 0f);
			item = "LabelSecondaryColor";
			label3.StyleClasses.Add(item);
			control = label3;
			boxContainer13.XamlChildren.Add(control);
			SpinBox spinBox2 = new SpinBox();
			spinBox2.Name = "PillDosage";
			control = spinBox2;
			context.RobustNameScope.Register("PillDosage", control);
			spinBox2.Access = new AccessLevel?(0);
			spinBox2.Value = 1;
			control = spinBox2;
			boxContainer13.XamlChildren.Add(control);
			Button button5 = new Button();
			button5.Name = "CreatePillButton";
			control = button5;
			context.RobustNameScope.Register("CreatePillButton", control);
			button5.Access = new AccessLevel?(0);
			button5.Text = (string)new LocExtension("chem-master-window-create-button").ProvideValue();
			control = button5;
			boxContainer13.XamlChildren.Add(control);
			control = boxContainer13;
			boxContainer10.XamlChildren.Add(control);
			BoxContainer boxContainer14 = new BoxContainer();
			boxContainer14.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("chem-master-window-bottles-label").ProvideValue()
			};
			boxContainer14.XamlChildren.Add(control);
			control = new Control
			{
				HorizontalExpand = true,
				MinSize = new Vector2(50f, 0f)
			};
			boxContainer14.XamlChildren.Add(control);
			Label label4 = new Label();
			label4.Text = (string)new LocExtension("chem-master-window-dose-label").ProvideValue();
			label4.Margin = new Thickness(5f, 0f, 0f, 0f);
			item = "LabelSecondaryColor";
			label4.StyleClasses.Add(item);
			control = label4;
			boxContainer14.XamlChildren.Add(control);
			SpinBox spinBox3 = new SpinBox();
			spinBox3.Name = "BottleDosage";
			control = spinBox3;
			context.RobustNameScope.Register("BottleDosage", control);
			spinBox3.Access = new AccessLevel?(0);
			spinBox3.Value = 0;
			control = spinBox3;
			boxContainer14.XamlChildren.Add(control);
			Button button6 = new Button();
			button6.Name = "CreateBottleButton";
			control = button6;
			context.RobustNameScope.Register("CreateBottleButton", control);
			button6.Access = new AccessLevel?(0);
			button6.Text = (string)new LocExtension("chem-master-window-create-button").ProvideValue();
			control = button6;
			boxContainer14.XamlChildren.Add(control);
			control = boxContainer14;
			boxContainer10.XamlChildren.Add(control);
			control = boxContainer10;
			panelContainer4.XamlChildren.Add(control);
			control = panelContainer4;
			boxContainer6.XamlChildren.Add(control);
			control = boxContainer6;
			tabContainer.XamlChildren.Add(control);
			control = tabContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06001825 RID: 6181 RVA: 0x0008BCE5 File Offset: 0x00089EE5
		private static void !XamlIlPopulateTrampoline(ChemMasterWindow A_0)
		{
			ChemMasterWindow.Populate:Content.Client.Chemistry.UI.ChemMasterWindow.xaml(null, A_0);
		}

		// Token: 0x04000C50 RID: 3152
		[Nullable(1)]
		[Dependency]
		private readonly IPrototypeManager _prototypeManager;

		// Token: 0x04000C52 RID: 3154
		[Nullable(1)]
		public readonly Button[] PillTypeButtons;

		// Token: 0x04000C53 RID: 3155
		[Nullable(1)]
		private const string PillsRsiPath = "/Textures/Objects/Specific/Chemistry/pills.rsi";
	}
}
