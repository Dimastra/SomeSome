using System;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.CCVar;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Shared;
using Robust.Shared.Configuration;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;

namespace Content.Client.Options.UI.Tabs
{
	// Token: 0x020001FA RID: 506
	[GenerateTypedNameReferences]
	public sealed class AudioTab : Control
	{
		// Token: 0x06000CF1 RID: 3313 RVA: 0x0004BF74 File Offset: 0x0004A174
		public AudioTab()
		{
			AudioTab.!XamlIlPopulateTrampoline(this);
			IoCManager.InjectDependencies<AudioTab>(this);
			this.LobbyMusicCheckBox.Pressed = this._cfg.GetCVar<bool>(CCVars.LobbyMusicEnabled);
			this.RestartSoundsCheckBox.Pressed = this._cfg.GetCVar<bool>(CCVars.RestartSoundsEnabled);
			this.EventMusicCheckBox.Pressed = this._cfg.GetCVar<bool>(CCVars.EventMusicEnabled);
			this.AdminSoundsCheckBox.Pressed = this._cfg.GetCVar<bool>(CCVars.AdminSoundsEnabled);
			this.AmbienceMusicCheckBox.Pressed = this._cfg.GetCVar<bool>(CCVars.AmbienceMusicEnabled);
			this.ApplyButton.OnPressed += this.OnApplyButtonPressed;
			this.ResetButton.OnPressed += this.OnResetButtonPressed;
			this.MasterVolumeSlider.OnValueChanged += this.OnMasterVolumeSliderChanged;
			this.MidiVolumeSlider.OnValueChanged += this.OnMidiVolumeSliderChanged;
			this.AmbienceVolumeSlider.OnValueChanged += this.OnAmbienceVolumeSliderChanged;
			this.UIVolumeSlider.OnValueChanged += this.OnUIVolumeSliderChanged;
			this.AmbienceSoundsSlider.OnValueChanged += this.OnAmbienceSoundsSliderChanged;
			this.AmbienceMusicVolumeSlider.OnValueChanged += this.OnAmbienceMusicVolumeSliderChanged;
			this.LobbyVolumeSlider.OnValueChanged += this.OnLobbyVolumeSliderChanged;
			this.TtsVolumeSlider.OnValueChanged += this.OnTtsVolumeSliderChanged;
			this.LobbyMusicCheckBox.OnToggled += new Action<BaseButton.ButtonToggledEventArgs>(this.OnLobbyMusicCheckToggled);
			this.RestartSoundsCheckBox.OnToggled += new Action<BaseButton.ButtonToggledEventArgs>(this.OnRestartSoundsCheckToggled);
			this.EventMusicCheckBox.OnToggled += new Action<BaseButton.ButtonToggledEventArgs>(this.OnEventMusicCheckToggled);
			this.AdminSoundsCheckBox.OnToggled += new Action<BaseButton.ButtonToggledEventArgs>(this.OnAdminSoundsCheckToggled);
			this.AmbienceMusicCheckBox.OnToggled += new Action<BaseButton.ButtonToggledEventArgs>(this.OnAmbienceMusicCheckToggled);
			this.AmbienceSoundsSlider.MinValue = (float)this._cfg.GetCVar<int>(CCVars.MinMaxAmbientSourcesConfigured);
			this.AmbienceSoundsSlider.MaxValue = (float)this._cfg.GetCVar<int>(CCVars.MaxMaxAmbientSourcesConfigured);
			this.Reset();
		}

		// Token: 0x06000CF2 RID: 3314 RVA: 0x0004C1B4 File Offset: 0x0004A3B4
		protected override void Dispose(bool disposing)
		{
			this.ApplyButton.OnPressed -= this.OnApplyButtonPressed;
			this.ResetButton.OnPressed -= this.OnResetButtonPressed;
			this.MasterVolumeSlider.OnValueChanged -= this.OnMasterVolumeSliderChanged;
			this.MidiVolumeSlider.OnValueChanged -= this.OnMidiVolumeSliderChanged;
			this.AmbienceVolumeSlider.OnValueChanged -= this.OnAmbienceVolumeSliderChanged;
			this.LobbyVolumeSlider.OnValueChanged -= this.OnLobbyVolumeSliderChanged;
			this.TtsVolumeSlider.OnValueChanged -= this.OnTtsVolumeSliderChanged;
			this.UIVolumeSlider.OnValueChanged -= this.OnAmbienceVolumeSliderChanged;
			this.AmbienceSoundsSlider.OnValueChanged -= this.OnAmbienceSoundsSliderChanged;
			this.AmbienceMusicVolumeSlider.OnValueChanged -= this.OnAmbienceMusicVolumeSliderChanged;
			this.LobbyMusicCheckBox.OnToggled -= new Action<BaseButton.ButtonToggledEventArgs>(this.OnLobbyMusicCheckToggled);
			this.RestartSoundsCheckBox.OnToggled -= new Action<BaseButton.ButtonToggledEventArgs>(this.OnRestartSoundsCheckToggled);
			this.EventMusicCheckBox.OnToggled -= new Action<BaseButton.ButtonToggledEventArgs>(this.OnEventMusicCheckToggled);
			this.AdminSoundsCheckBox.OnToggled -= new Action<BaseButton.ButtonToggledEventArgs>(this.OnAdminSoundsCheckToggled);
			this.AmbienceMusicCheckBox.OnToggled -= new Action<BaseButton.ButtonToggledEventArgs>(this.OnAmbienceMusicCheckToggled);
			base.Dispose(disposing);
		}

		// Token: 0x06000CF3 RID: 3315 RVA: 0x0004C321 File Offset: 0x0004A521
		[NullableContext(1)]
		private void OnLobbyVolumeSliderChanged(Range obj)
		{
			this.UpdateChanges();
		}

		// Token: 0x06000CF4 RID: 3316 RVA: 0x0004C321 File Offset: 0x0004A521
		[NullableContext(1)]
		private void OnAmbienceVolumeSliderChanged(Range obj)
		{
			this.UpdateChanges();
		}

		// Token: 0x06000CF5 RID: 3317 RVA: 0x0004C321 File Offset: 0x0004A521
		[NullableContext(1)]
		private void OnUIVolumeSliderChanged(Range obj)
		{
			this.UpdateChanges();
		}

		// Token: 0x06000CF6 RID: 3318 RVA: 0x0004C321 File Offset: 0x0004A521
		[NullableContext(1)]
		private void OnAmbienceSoundsSliderChanged(Range obj)
		{
			this.UpdateChanges();
		}

		// Token: 0x06000CF7 RID: 3319 RVA: 0x0004C321 File Offset: 0x0004A521
		[NullableContext(1)]
		private void OnTtsVolumeSliderChanged(Range obj)
		{
			this.UpdateChanges();
		}

		// Token: 0x06000CF8 RID: 3320 RVA: 0x0004C321 File Offset: 0x0004A521
		[NullableContext(1)]
		private void OnAmbienceMusicVolumeSliderChanged(Range obj)
		{
			this.UpdateChanges();
		}

		// Token: 0x06000CF9 RID: 3321 RVA: 0x0004C329 File Offset: 0x0004A529
		[NullableContext(1)]
		private void OnMasterVolumeSliderChanged(Range range)
		{
			this._clydeAudio.SetMasterVolume(this.MasterVolumeSlider.Value / 100f);
			this.UpdateChanges();
		}

		// Token: 0x06000CFA RID: 3322 RVA: 0x0004C321 File Offset: 0x0004A521
		[NullableContext(1)]
		private void OnMidiVolumeSliderChanged(Range range)
		{
			this.UpdateChanges();
		}

		// Token: 0x06000CFB RID: 3323 RVA: 0x0004C321 File Offset: 0x0004A521
		[NullableContext(1)]
		private void OnLobbyMusicCheckToggled(BaseButton.ButtonEventArgs args)
		{
			this.UpdateChanges();
		}

		// Token: 0x06000CFC RID: 3324 RVA: 0x0004C321 File Offset: 0x0004A521
		[NullableContext(1)]
		private void OnRestartSoundsCheckToggled(BaseButton.ButtonEventArgs args)
		{
			this.UpdateChanges();
		}

		// Token: 0x06000CFD RID: 3325 RVA: 0x0004C321 File Offset: 0x0004A521
		[NullableContext(1)]
		private void OnEventMusicCheckToggled(BaseButton.ButtonEventArgs args)
		{
			this.UpdateChanges();
		}

		// Token: 0x06000CFE RID: 3326 RVA: 0x0004C321 File Offset: 0x0004A521
		[NullableContext(1)]
		private void OnAdminSoundsCheckToggled(BaseButton.ButtonEventArgs args)
		{
			this.UpdateChanges();
		}

		// Token: 0x06000CFF RID: 3327 RVA: 0x0004C321 File Offset: 0x0004A521
		[NullableContext(1)]
		private void OnAmbienceMusicCheckToggled(BaseButton.ButtonEventArgs args)
		{
			this.UpdateChanges();
		}

		// Token: 0x06000D00 RID: 3328 RVA: 0x0004C350 File Offset: 0x0004A550
		[NullableContext(1)]
		private void OnApplyButtonPressed(BaseButton.ButtonEventArgs args)
		{
			this._cfg.SetCVar<float>(CVars.AudioMasterVolume, this.MasterVolumeSlider.Value / 100f, false);
			this._cfg.SetCVar<float>(CVars.MidiVolume, this.LV100ToDB(this.MidiVolumeSlider.Value), false);
			this._cfg.SetCVar<float>(CCVars.AmbienceVolume, this.LV100ToDB(this.AmbienceVolumeSlider.Value), false);
			this._cfg.SetCVar<float>(CCVars.AmbienceMusicVolume, this.LV100ToDB(this.AmbienceMusicVolumeSlider.Value), false);
			this._cfg.SetCVar<float>(CCVars.TtsVolume, this.LV100ToDB(this.TtsVolumeSlider.Value), false);
			this._cfg.SetCVar<float>(CCVars.UIVolume, this.LV100ToDB(this.UIVolumeSlider.Value), false);
			this._cfg.SetCVar<float>(CCVars.LobbyMusicVolume, this.LV100ToDB(this.LobbyVolumeSlider.Value), false);
			this._cfg.SetCVar<int>(CCVars.MaxAmbientSources, (int)this.AmbienceSoundsSlider.Value, false);
			this._cfg.SetCVar<bool>(CCVars.LobbyMusicEnabled, this.LobbyMusicCheckBox.Pressed, false);
			this._cfg.SetCVar<bool>(CCVars.RestartSoundsEnabled, this.RestartSoundsCheckBox.Pressed, false);
			this._cfg.SetCVar<bool>(CCVars.EventMusicEnabled, this.EventMusicCheckBox.Pressed, false);
			this._cfg.SetCVar<bool>(CCVars.AdminSoundsEnabled, this.AdminSoundsCheckBox.Pressed, false);
			this._cfg.SetCVar<bool>(CCVars.AmbienceMusicEnabled, this.AmbienceMusicCheckBox.Pressed, false);
			this._cfg.SaveToFile();
			this.UpdateChanges();
		}

		// Token: 0x06000D01 RID: 3329 RVA: 0x0004C505 File Offset: 0x0004A705
		[NullableContext(1)]
		private void OnResetButtonPressed(BaseButton.ButtonEventArgs args)
		{
			this.Reset();
		}

		// Token: 0x06000D02 RID: 3330 RVA: 0x0004C510 File Offset: 0x0004A710
		private void Reset()
		{
			this.MasterVolumeSlider.Value = this._cfg.GetCVar<float>(CVars.AudioMasterVolume) * 100f;
			this.MidiVolumeSlider.Value = this.DBToLV100(this._cfg.GetCVar<float>(CVars.MidiVolume));
			this.AmbienceMusicVolumeSlider.Value = this.DBToLV100(this._cfg.GetCVar<float>(CCVars.AmbienceMusicVolume));
			this.TtsVolumeSlider.Value = this.DBToLV100(this._cfg.GetCVar<float>(CCVars.TtsVolume));
			this.AmbienceVolumeSlider.Value = this.DBToLV100(this._cfg.GetCVar<float>(CCVars.AmbienceVolume));
			this.UIVolumeSlider.Value = this.DBToLV100(this._cfg.GetCVar<float>(CCVars.UIVolume));
			this.LobbyVolumeSlider.Value = this.DBToLV100(this._cfg.GetCVar<float>(CCVars.LobbyMusicVolume));
			this.AmbienceSoundsSlider.Value = (float)this._cfg.GetCVar<int>(CCVars.MaxAmbientSources);
			this.LobbyMusicCheckBox.Pressed = this._cfg.GetCVar<bool>(CCVars.LobbyMusicEnabled);
			this.RestartSoundsCheckBox.Pressed = this._cfg.GetCVar<bool>(CCVars.RestartSoundsEnabled);
			this.EventMusicCheckBox.Pressed = this._cfg.GetCVar<bool>(CCVars.EventMusicEnabled);
			this.AdminSoundsCheckBox.Pressed = this._cfg.GetCVar<bool>(CCVars.AdminSoundsEnabled);
			this.AmbienceMusicCheckBox.Pressed = this._cfg.GetCVar<bool>(CCVars.AmbienceMusicEnabled);
			this.UpdateChanges();
		}

		// Token: 0x06000D03 RID: 3331 RVA: 0x0004C6AD File Offset: 0x0004A8AD
		private float DBToLV100(float db)
		{
			return MathF.Pow(10f, db / 10f) * 100f;
		}

		// Token: 0x06000D04 RID: 3332 RVA: 0x0004BA54 File Offset: 0x00049C54
		private float LV100ToDB(float lv100)
		{
			return MathF.Max(-10000000f, MathF.Log(lv100 / 100f, 10f) * 10f);
		}

		// Token: 0x06000D05 RID: 3333 RVA: 0x0004C6C8 File Offset: 0x0004A8C8
		private void UpdateChanges()
		{
			bool flag = Math.Abs(this.MasterVolumeSlider.Value - this._cfg.GetCVar<float>(CVars.AudioMasterVolume) * 100f) < 0.01f;
			bool flag2 = Math.Abs(this.MidiVolumeSlider.Value - this.DBToLV100(this._cfg.GetCVar<float>(CVars.MidiVolume))) < 0.01f;
			bool flag3 = Math.Abs(this.AmbienceVolumeSlider.Value - this.DBToLV100(this._cfg.GetCVar<float>(CCVars.AmbienceVolume))) < 0.01f;
			bool flag4 = Math.Abs(this.UIVolumeSlider.Value - this.DBToLV100(this._cfg.GetCVar<float>(CCVars.UIVolume))) < 0.01f;
			bool flag5 = Math.Abs(this.AmbienceMusicVolumeSlider.Value - this.DBToLV100(this._cfg.GetCVar<float>(CCVars.AmbienceMusicVolume))) < 0.01f;
			bool flag6 = Math.Abs(this.LobbyVolumeSlider.Value - this.DBToLV100(this._cfg.GetCVar<float>(CCVars.LobbyMusicVolume))) < 0.01f;
			bool flag7 = Math.Abs(this.TtsVolumeSlider.Value - this.DBToLV100(this._cfg.GetCVar<float>(CCVars.TtsVolume))) < 0.01f;
			bool flag8 = (int)this.AmbienceSoundsSlider.Value == this._cfg.GetCVar<int>(CCVars.MaxAmbientSources);
			bool flag9 = this.LobbyMusicCheckBox.Pressed == this._cfg.GetCVar<bool>(CCVars.LobbyMusicEnabled);
			bool flag10 = this.RestartSoundsCheckBox.Pressed == this._cfg.GetCVar<bool>(CCVars.RestartSoundsEnabled);
			bool flag11 = this.EventMusicCheckBox.Pressed == this._cfg.GetCVar<bool>(CCVars.EventMusicEnabled);
			bool flag12 = this.AdminSoundsCheckBox.Pressed == this._cfg.GetCVar<bool>(CCVars.AdminSoundsEnabled);
			bool flag13 = flag && flag2 && flag3 && flag8 && flag9 && flag10 && flag11 && flag12 && flag5 && flag4 && flag6;
			flag13 = (flag13 && flag7);
			this.ApplyButton.Disabled = flag13;
			this.ResetButton.Disabled = flag13;
			this.MasterVolumeLabel.Text = Loc.GetString("ui-options-volume-percent", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("volume", this.MasterVolumeSlider.Value / 100f)
			});
			this.MidiVolumeLabel.Text = Loc.GetString("ui-options-volume-percent", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("volume", this.MidiVolumeSlider.Value / 100f)
			});
			this.AmbienceVolumeLabel.Text = Loc.GetString("ui-options-volume-percent", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("volume", this.AmbienceVolumeSlider.Value / 100f)
			});
			this.UIVolumeLabel.Text = Loc.GetString("ui-options-volume-percent", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("volume", this.UIVolumeSlider.Value / 100f)
			});
			this.TtsVolumeLabel.Text = Loc.GetString("ui-options-volume-percent", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("volume", this.TtsVolumeSlider.Value / 100f)
			});
			this.LobbyVolumeLabel.Text = Loc.GetString("ui-options-volume-percent", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("volume", this.LobbyVolumeSlider.Value / 100f)
			});
			this.AmbienceSoundsLabel.Text = ((int)this.AmbienceSoundsSlider.Value).ToString();
			this.AmbienceMusicVolumeLabel.Text = Loc.GetString("ui-options-volume-percent", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("volume", this.AmbienceMusicVolumeSlider.Value / 100f)
			});
		}

		// Token: 0x170002A1 RID: 673
		// (get) Token: 0x06000D06 RID: 3334 RVA: 0x0004CAE6 File Offset: 0x0004ACE6
		private Slider MasterVolumeSlider
		{
			get
			{
				return base.FindControl<Slider>("MasterVolumeSlider");
			}
		}

		// Token: 0x170002A2 RID: 674
		// (get) Token: 0x06000D07 RID: 3335 RVA: 0x0004CAF3 File Offset: 0x0004ACF3
		private Label MasterVolumeLabel
		{
			get
			{
				return base.FindControl<Label>("MasterVolumeLabel");
			}
		}

		// Token: 0x170002A3 RID: 675
		// (get) Token: 0x06000D08 RID: 3336 RVA: 0x0004CB00 File Offset: 0x0004AD00
		private Slider MidiVolumeSlider
		{
			get
			{
				return base.FindControl<Slider>("MidiVolumeSlider");
			}
		}

		// Token: 0x170002A4 RID: 676
		// (get) Token: 0x06000D09 RID: 3337 RVA: 0x0004CB0D File Offset: 0x0004AD0D
		private Label MidiVolumeLabel
		{
			get
			{
				return base.FindControl<Label>("MidiVolumeLabel");
			}
		}

		// Token: 0x170002A5 RID: 677
		// (get) Token: 0x06000D0A RID: 3338 RVA: 0x0004CB1A File Offset: 0x0004AD1A
		private Slider AmbienceVolumeSlider
		{
			get
			{
				return base.FindControl<Slider>("AmbienceVolumeSlider");
			}
		}

		// Token: 0x170002A6 RID: 678
		// (get) Token: 0x06000D0B RID: 3339 RVA: 0x0004CB27 File Offset: 0x0004AD27
		private Label AmbienceVolumeLabel
		{
			get
			{
				return base.FindControl<Label>("AmbienceVolumeLabel");
			}
		}

		// Token: 0x170002A7 RID: 679
		// (get) Token: 0x06000D0C RID: 3340 RVA: 0x0004CB34 File Offset: 0x0004AD34
		private Slider AmbienceMusicVolumeSlider
		{
			get
			{
				return base.FindControl<Slider>("AmbienceMusicVolumeSlider");
			}
		}

		// Token: 0x170002A8 RID: 680
		// (get) Token: 0x06000D0D RID: 3341 RVA: 0x0004CB41 File Offset: 0x0004AD41
		private Label AmbienceMusicVolumeLabel
		{
			get
			{
				return base.FindControl<Label>("AmbienceMusicVolumeLabel");
			}
		}

		// Token: 0x170002A9 RID: 681
		// (get) Token: 0x06000D0E RID: 3342 RVA: 0x0004CB4E File Offset: 0x0004AD4E
		private Slider TtsVolumeSlider
		{
			get
			{
				return base.FindControl<Slider>("TtsVolumeSlider");
			}
		}

		// Token: 0x170002AA RID: 682
		// (get) Token: 0x06000D0F RID: 3343 RVA: 0x0004CB5B File Offset: 0x0004AD5B
		private Label TtsVolumeLabel
		{
			get
			{
				return base.FindControl<Label>("TtsVolumeLabel");
			}
		}

		// Token: 0x170002AB RID: 683
		// (get) Token: 0x06000D10 RID: 3344 RVA: 0x0004CB68 File Offset: 0x0004AD68
		private Slider LobbyVolumeSlider
		{
			get
			{
				return base.FindControl<Slider>("LobbyVolumeSlider");
			}
		}

		// Token: 0x170002AC RID: 684
		// (get) Token: 0x06000D11 RID: 3345 RVA: 0x0004CB75 File Offset: 0x0004AD75
		private Label LobbyVolumeLabel
		{
			get
			{
				return base.FindControl<Label>("LobbyVolumeLabel");
			}
		}

		// Token: 0x170002AD RID: 685
		// (get) Token: 0x06000D12 RID: 3346 RVA: 0x0004CB82 File Offset: 0x0004AD82
		private Slider AmbienceSoundsSlider
		{
			get
			{
				return base.FindControl<Slider>("AmbienceSoundsSlider");
			}
		}

		// Token: 0x170002AE RID: 686
		// (get) Token: 0x06000D13 RID: 3347 RVA: 0x0004CB8F File Offset: 0x0004AD8F
		private Label AmbienceSoundsLabel
		{
			get
			{
				return base.FindControl<Label>("AmbienceSoundsLabel");
			}
		}

		// Token: 0x170002AF RID: 687
		// (get) Token: 0x06000D14 RID: 3348 RVA: 0x0004CB9C File Offset: 0x0004AD9C
		private Slider UIVolumeSlider
		{
			get
			{
				return base.FindControl<Slider>("UIVolumeSlider");
			}
		}

		// Token: 0x170002B0 RID: 688
		// (get) Token: 0x06000D15 RID: 3349 RVA: 0x0004CBA9 File Offset: 0x0004ADA9
		private Label UIVolumeLabel
		{
			get
			{
				return base.FindControl<Label>("UIVolumeLabel");
			}
		}

		// Token: 0x170002B1 RID: 689
		// (get) Token: 0x06000D16 RID: 3350 RVA: 0x0004CBB6 File Offset: 0x0004ADB6
		private CheckBox LobbyMusicCheckBox
		{
			get
			{
				return base.FindControl<CheckBox>("LobbyMusicCheckBox");
			}
		}

		// Token: 0x170002B2 RID: 690
		// (get) Token: 0x06000D17 RID: 3351 RVA: 0x0004CBC3 File Offset: 0x0004ADC3
		private CheckBox RestartSoundsCheckBox
		{
			get
			{
				return base.FindControl<CheckBox>("RestartSoundsCheckBox");
			}
		}

		// Token: 0x170002B3 RID: 691
		// (get) Token: 0x06000D18 RID: 3352 RVA: 0x0004CBD0 File Offset: 0x0004ADD0
		private CheckBox EventMusicCheckBox
		{
			get
			{
				return base.FindControl<CheckBox>("EventMusicCheckBox");
			}
		}

		// Token: 0x170002B4 RID: 692
		// (get) Token: 0x06000D19 RID: 3353 RVA: 0x0004CBDD File Offset: 0x0004ADDD
		private CheckBox AdminSoundsCheckBox
		{
			get
			{
				return base.FindControl<CheckBox>("AdminSoundsCheckBox");
			}
		}

		// Token: 0x170002B5 RID: 693
		// (get) Token: 0x06000D1A RID: 3354 RVA: 0x0004CBEA File Offset: 0x0004ADEA
		private CheckBox AmbienceMusicCheckBox
		{
			get
			{
				return base.FindControl<CheckBox>("AmbienceMusicCheckBox");
			}
		}

		// Token: 0x170002B6 RID: 694
		// (get) Token: 0x06000D1B RID: 3355 RVA: 0x0004BA91 File Offset: 0x00049C91
		private Button ResetButton
		{
			get
			{
				return base.FindControl<Button>("ResetButton");
			}
		}

		// Token: 0x170002B7 RID: 695
		// (get) Token: 0x06000D1C RID: 3356 RVA: 0x0004BAAB File Offset: 0x00049CAB
		private Button ApplyButton
		{
			get
			{
				return base.FindControl<Button>("ApplyButton");
			}
		}

		// Token: 0x06000D1D RID: 3357 RVA: 0x0004CBF8 File Offset: 0x0004ADF8
		static void xaml(IServiceProvider A_0, Control A_1)
		{
			XamlIlContext.Context<Control> context = new XamlIlContext.Context<Control>(A_0, null, "resm:Content.Client.Options.UI.Tabs.AudioTab.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 1;
			boxContainer2.Margin = new Thickness(8f, 8f, 8f, 8f);
			boxContainer2.VerticalExpand = true;
			Label label = new Label();
			label.Text = (string)new LocExtension("ui-options-volume-label").ProvideValue();
			label.FontColorOverride = new Color?(StyleNano.NanoGold);
			string item = "LabelKeyText";
			label.StyleClasses.Add(item);
			Control control = label;
			boxContainer2.XamlChildren.Add(control);
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 1;
			boxContainer3.Margin = new Thickness(0f, 3f, 0f, 0f);
			BoxContainer boxContainer4 = new BoxContainer();
			boxContainer4.Orientation = 0;
			boxContainer4.Margin = new Thickness(5f, 0f, 0f, 0f);
			control = new Label
			{
				Text = (string)new LocExtension("ui-options-master-volume").ProvideValue(),
				HorizontalExpand = true
			};
			boxContainer4.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(8f, 0f)
			};
			boxContainer4.XamlChildren.Add(control);
			Slider slider = new Slider();
			slider.Name = "MasterVolumeSlider";
			control = slider;
			context.RobustNameScope.Register("MasterVolumeSlider", control);
			slider.MinValue = 0f;
			slider.MaxValue = 100f;
			slider.HorizontalExpand = true;
			slider.MinSize = new Vector2(80f, 0f);
			slider.Rounded = true;
			control = slider;
			boxContainer4.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(8f, 0f)
			};
			boxContainer4.XamlChildren.Add(control);
			Label label2 = new Label();
			label2.Name = "MasterVolumeLabel";
			control = label2;
			context.RobustNameScope.Register("MasterVolumeLabel", control);
			label2.MinSize = new Vector2(48f, 0f);
			label2.Align = 2;
			control = label2;
			boxContainer4.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(4f, 0f)
			};
			boxContainer4.XamlChildren.Add(control);
			control = boxContainer4;
			boxContainer3.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(0f, 8f)
			};
			boxContainer3.XamlChildren.Add(control);
			BoxContainer boxContainer5 = new BoxContainer();
			boxContainer5.Orientation = 0;
			boxContainer5.Margin = new Thickness(5f, 0f, 0f, 0f);
			control = new Label
			{
				Text = (string)new LocExtension("ui-options-midi-volume").ProvideValue(),
				HorizontalExpand = true
			};
			boxContainer5.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(8f, 0f)
			};
			boxContainer5.XamlChildren.Add(control);
			Slider slider2 = new Slider();
			slider2.Name = "MidiVolumeSlider";
			control = slider2;
			context.RobustNameScope.Register("MidiVolumeSlider", control);
			slider2.MinValue = 0f;
			slider2.MaxValue = 200f;
			slider2.HorizontalExpand = true;
			slider2.MinSize = new Vector2(80f, 0f);
			slider2.Rounded = true;
			control = slider2;
			boxContainer5.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(8f, 0f)
			};
			boxContainer5.XamlChildren.Add(control);
			Label label3 = new Label();
			label3.Name = "MidiVolumeLabel";
			control = label3;
			context.RobustNameScope.Register("MidiVolumeLabel", control);
			label3.MinSize = new Vector2(48f, 0f);
			label3.Align = 2;
			control = label3;
			boxContainer5.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(4f, 0f)
			};
			boxContainer5.XamlChildren.Add(control);
			control = boxContainer5;
			boxContainer3.XamlChildren.Add(control);
			BoxContainer boxContainer6 = new BoxContainer();
			boxContainer6.Orientation = 0;
			boxContainer6.Margin = new Thickness(5f, 0f, 0f, 0f);
			control = new Label
			{
				Text = (string)new LocExtension("ui-options-ambience-volume").ProvideValue(),
				HorizontalExpand = true
			};
			boxContainer6.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(8f, 0f)
			};
			boxContainer6.XamlChildren.Add(control);
			Slider slider3 = new Slider();
			slider3.Name = "AmbienceVolumeSlider";
			control = slider3;
			context.RobustNameScope.Register("AmbienceVolumeSlider", control);
			slider3.MinValue = 0f;
			slider3.MaxValue = 300f;
			slider3.HorizontalExpand = true;
			slider3.MinSize = new Vector2(80f, 0f);
			slider3.Rounded = true;
			control = slider3;
			boxContainer6.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(8f, 0f)
			};
			boxContainer6.XamlChildren.Add(control);
			Label label4 = new Label();
			label4.Name = "AmbienceVolumeLabel";
			control = label4;
			context.RobustNameScope.Register("AmbienceVolumeLabel", control);
			label4.MinSize = new Vector2(48f, 0f);
			label4.Align = 2;
			control = label4;
			boxContainer6.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(4f, 0f)
			};
			boxContainer6.XamlChildren.Add(control);
			control = boxContainer6;
			boxContainer3.XamlChildren.Add(control);
			BoxContainer boxContainer7 = new BoxContainer();
			boxContainer7.Orientation = 0;
			boxContainer7.Margin = new Thickness(5f, 0f, 0f, 0f);
			control = new Label
			{
				Text = (string)new LocExtension("ui-options-ambience-music-volume").ProvideValue()
			};
			boxContainer7.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(8f, 0f)
			};
			boxContainer7.XamlChildren.Add(control);
			Slider slider4 = new Slider();
			slider4.Name = "AmbienceMusicVolumeSlider";
			control = slider4;
			context.RobustNameScope.Register("AmbienceMusicVolumeSlider", control);
			slider4.MinValue = 0f;
			slider4.MaxValue = 300f;
			slider4.HorizontalExpand = true;
			slider4.MinSize = new Vector2(80f, 0f);
			slider4.Rounded = true;
			control = slider4;
			boxContainer7.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(8f, 0f)
			};
			boxContainer7.XamlChildren.Add(control);
			Label label5 = new Label();
			label5.Name = "AmbienceMusicVolumeLabel";
			control = label5;
			context.RobustNameScope.Register("AmbienceMusicVolumeLabel", control);
			label5.MinSize = new Vector2(48f, 0f);
			label5.Align = 2;
			control = label5;
			boxContainer7.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(4f, 0f)
			};
			boxContainer7.XamlChildren.Add(control);
			control = boxContainer7;
			boxContainer3.XamlChildren.Add(control);
			BoxContainer boxContainer8 = new BoxContainer();
			boxContainer8.Orientation = 0;
			boxContainer8.Margin = new Thickness(5f, 0f, 0f, 0f);
			control = new Label
			{
				Text = (string)new LocExtension("ui-options-tts-volume").ProvideValue(),
				HorizontalExpand = true
			};
			boxContainer8.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(8f, 0f)
			};
			boxContainer8.XamlChildren.Add(control);
			Slider slider5 = new Slider();
			slider5.Name = "TtsVolumeSlider";
			control = slider5;
			context.RobustNameScope.Register("TtsVolumeSlider", control);
			slider5.MinValue = 0f;
			slider5.MaxValue = 200f;
			slider5.HorizontalExpand = true;
			slider5.MinSize = new Vector2(80f, 0f);
			slider5.Rounded = true;
			control = slider5;
			boxContainer8.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(8f, 0f)
			};
			boxContainer8.XamlChildren.Add(control);
			Label label6 = new Label();
			label6.Name = "TtsVolumeLabel";
			control = label6;
			context.RobustNameScope.Register("TtsVolumeLabel", control);
			label6.MinSize = new Vector2(48f, 0f);
			label6.Align = 2;
			control = label6;
			boxContainer8.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(4f, 0f)
			};
			boxContainer8.XamlChildren.Add(control);
			control = boxContainer8;
			boxContainer3.XamlChildren.Add(control);
			BoxContainer boxContainer9 = new BoxContainer();
			boxContainer9.Orientation = 0;
			boxContainer9.Margin = new Thickness(5f, 0f, 0f, 0f);
			control = new Label
			{
				Text = (string)new LocExtension("ui-options-lobby-volume").ProvideValue(),
				HorizontalExpand = true
			};
			boxContainer9.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(8f, 0f)
			};
			boxContainer9.XamlChildren.Add(control);
			Slider slider6 = new Slider();
			slider6.Name = "LobbyVolumeSlider";
			control = slider6;
			context.RobustNameScope.Register("LobbyVolumeSlider", control);
			slider6.MinValue = 0f;
			slider6.MaxValue = 200f;
			slider6.HorizontalExpand = true;
			slider6.MinSize = new Vector2(80f, 0f);
			slider6.Rounded = true;
			control = slider6;
			boxContainer9.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(8f, 0f)
			};
			boxContainer9.XamlChildren.Add(control);
			Label label7 = new Label();
			label7.Name = "LobbyVolumeLabel";
			control = label7;
			context.RobustNameScope.Register("LobbyVolumeLabel", control);
			label7.MinSize = new Vector2(48f, 0f);
			label7.Align = 2;
			control = label7;
			boxContainer9.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(4f, 0f)
			};
			boxContainer9.XamlChildren.Add(control);
			control = boxContainer9;
			boxContainer3.XamlChildren.Add(control);
			BoxContainer boxContainer10 = new BoxContainer();
			boxContainer10.Orientation = 0;
			boxContainer10.Margin = new Thickness(5f, 0f, 0f, 0f);
			control = new Label
			{
				Text = (string)new LocExtension("ui-options-ambience-max-sounds").ProvideValue(),
				HorizontalExpand = true
			};
			boxContainer10.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(8f, 0f)
			};
			boxContainer10.XamlChildren.Add(control);
			Slider slider7 = new Slider();
			slider7.Name = "AmbienceSoundsSlider";
			control = slider7;
			context.RobustNameScope.Register("AmbienceSoundsSlider", control);
			slider7.MinValue = 0f;
			slider7.MaxValue = 1f;
			slider7.HorizontalExpand = true;
			slider7.MinSize = new Vector2(80f, 0f);
			slider7.Rounded = true;
			control = slider7;
			boxContainer10.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(8f, 0f)
			};
			boxContainer10.XamlChildren.Add(control);
			Label label8 = new Label();
			label8.Name = "AmbienceSoundsLabel";
			control = label8;
			context.RobustNameScope.Register("AmbienceSoundsLabel", control);
			label8.MinSize = new Vector2(48f, 0f);
			label8.Align = 2;
			control = label8;
			boxContainer10.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(4f, 0f)
			};
			boxContainer10.XamlChildren.Add(control);
			control = boxContainer10;
			boxContainer3.XamlChildren.Add(control);
			BoxContainer boxContainer11 = new BoxContainer();
			boxContainer11.Orientation = 0;
			boxContainer11.Margin = new Thickness(5f, 0f, 0f, 0f);
			control = new Label
			{
				Text = (string)new LocExtension("ui-options-volume-ui").ProvideValue()
			};
			boxContainer11.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(8f, 0f)
			};
			boxContainer11.XamlChildren.Add(control);
			Slider slider8 = new Slider();
			slider8.Name = "UIVolumeSlider";
			control = slider8;
			context.RobustNameScope.Register("UIVolumeSlider", control);
			slider8.MinValue = 0f;
			slider8.MaxValue = 300f;
			slider8.HorizontalExpand = true;
			slider8.MinSize = new Vector2(80f, 0f);
			slider8.Rounded = true;
			control = slider8;
			boxContainer11.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(8f, 0f)
			};
			boxContainer11.XamlChildren.Add(control);
			Label label9 = new Label();
			label9.Name = "UIVolumeLabel";
			control = label9;
			context.RobustNameScope.Register("UIVolumeLabel", control);
			label9.MinSize = new Vector2(48f, 0f);
			label9.Align = 2;
			control = label9;
			boxContainer11.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(4f, 0f)
			};
			boxContainer11.XamlChildren.Add(control);
			control = boxContainer11;
			boxContainer3.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(0f, 8f)
			};
			boxContainer3.XamlChildren.Add(control);
			CheckBox checkBox = new CheckBox();
			checkBox.Name = "LobbyMusicCheckBox";
			control = checkBox;
			context.RobustNameScope.Register("LobbyMusicCheckBox", control);
			checkBox.Text = (string)new LocExtension("ui-options-lobby-music").ProvideValue();
			control = checkBox;
			boxContainer3.XamlChildren.Add(control);
			CheckBox checkBox2 = new CheckBox();
			checkBox2.Name = "RestartSoundsCheckBox";
			control = checkBox2;
			context.RobustNameScope.Register("RestartSoundsCheckBox", control);
			checkBox2.Text = (string)new LocExtension("ui-options-restart-sounds").ProvideValue();
			control = checkBox2;
			boxContainer3.XamlChildren.Add(control);
			CheckBox checkBox3 = new CheckBox();
			checkBox3.Name = "EventMusicCheckBox";
			control = checkBox3;
			context.RobustNameScope.Register("EventMusicCheckBox", control);
			checkBox3.Text = (string)new LocExtension("ui-options-event-music").ProvideValue();
			control = checkBox3;
			boxContainer3.XamlChildren.Add(control);
			CheckBox checkBox4 = new CheckBox();
			checkBox4.Name = "AdminSoundsCheckBox";
			control = checkBox4;
			context.RobustNameScope.Register("AdminSoundsCheckBox", control);
			checkBox4.Text = (string)new LocExtension("ui-options-admin-sounds").ProvideValue();
			control = checkBox4;
			boxContainer3.XamlChildren.Add(control);
			CheckBox checkBox5 = new CheckBox();
			checkBox5.Name = "AmbienceMusicCheckBox";
			control = checkBox5;
			context.RobustNameScope.Register("AmbienceMusicCheckBox", control);
			checkBox5.Text = (string)new LocExtension("ui-options-ambience-music").ProvideValue();
			control = checkBox5;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			StripeBack stripeBack = new StripeBack();
			stripeBack.HasBottomEdge = false;
			stripeBack.HasMargins = false;
			BoxContainer boxContainer12 = new BoxContainer();
			boxContainer12.Orientation = 0;
			boxContainer12.Align = 2;
			boxContainer12.HorizontalExpand = true;
			boxContainer12.VerticalExpand = true;
			Button button = new Button();
			button.Name = "ResetButton";
			control = button;
			context.RobustNameScope.Register("ResetButton", control);
			button.Text = (string)new LocExtension("ui-options-reset-all").ProvideValue();
			item = "Caution";
			button.StyleClasses.Add(item);
			button.HorizontalExpand = true;
			button.HorizontalAlignment = 3;
			control = button;
			boxContainer12.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(2f, 0f)
			};
			boxContainer12.XamlChildren.Add(control);
			Button button2 = new Button();
			button2.Name = "ApplyButton";
			control = button2;
			context.RobustNameScope.Register("ApplyButton", control);
			button2.Text = (string)new LocExtension("ui-options-apply").ProvideValue();
			button2.TextAlign = 1;
			button2.HorizontalAlignment = 3;
			control = button2;
			boxContainer12.XamlChildren.Add(control);
			control = boxContainer12;
			stripeBack.XamlChildren.Add(control);
			control = stripeBack;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06000D1E RID: 3358 RVA: 0x0004E05A File Offset: 0x0004C25A
		private static void !XamlIlPopulateTrampoline(AudioTab A_0)
		{
			AudioTab.Populate:Content.Client.Options.UI.Tabs.AudioTab.xaml(null, A_0);
		}

		// Token: 0x0400069A RID: 1690
		[Nullable(1)]
		[Dependency]
		private readonly IConfigurationManager _cfg;

		// Token: 0x0400069B RID: 1691
		[Nullable(1)]
		[Dependency]
		private readonly IClydeAudio _clydeAudio;
	}
}
