using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Input;
using Robust.Client.AutoGenerated;
using Robust.Client.Input;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Shared;
using Robust.Shared.Configuration;
using Robust.Shared.Input;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Client.Options.UI.Tabs
{
	// Token: 0x020001FC RID: 508
	[NullableContext(1)]
	[Nullable(0)]
	[GenerateTypedNameReferences]
	public sealed class KeyRebindTab : Control
	{
		// Token: 0x06000D4D RID: 3405 RVA: 0x0004FA10 File Offset: 0x0004DC10
		private void HandleToggleUSQWERTYCheckbox(BaseButton.ButtonToggledEventArgs args)
		{
			this._cfg.SetCVar<bool>(CVars.DisplayUSQWERTYHotkeys, args.Pressed, false);
			this._cfg.SaveToFile();
		}

		// Token: 0x06000D4E RID: 3406 RVA: 0x0004FA34 File Offset: 0x0004DC34
		public KeyRebindTab()
		{
			IoCManager.InjectDependencies<KeyRebindTab>(this);
			KeyRebindTab.!XamlIlPopulateTrampoline(this);
			this.ResetAllButton.OnPressed += delegate(BaseButton.ButtonEventArgs _)
			{
				this._deferCommands.Add(delegate
				{
					this._inputManager.ResetAllBindings();
					this._inputManager.SaveToUserData();
				});
			};
			KeyRebindTab.<>c__DisplayClass7_0 CS$<>8__locals1;
			CS$<>8__locals1.first = true;
			this.<.ctor>g__AddHeader|7_1("ui-options-header-general", ref CS$<>8__locals1);
			this.<.ctor>g__AddCheckBox|7_3("ui-options-hotkey-keymap", this._cfg.GetCVar<bool>(CVars.DisplayUSQWERTYHotkeys), new Action<BaseButton.ButtonToggledEventArgs>(this.HandleToggleUSQWERTYCheckbox));
			this.<.ctor>g__AddHeader|7_1("ui-options-header-movement", ref CS$<>8__locals1);
			this.<.ctor>g__AddButton|7_2(EngineKeyFunctions.MoveUp);
			this.<.ctor>g__AddButton|7_2(EngineKeyFunctions.MoveLeft);
			this.<.ctor>g__AddButton|7_2(EngineKeyFunctions.MoveDown);
			this.<.ctor>g__AddButton|7_2(EngineKeyFunctions.MoveRight);
			this.<.ctor>g__AddButton|7_2(EngineKeyFunctions.Walk);
			this.<.ctor>g__AddHeader|7_1("ui-options-header-camera", ref CS$<>8__locals1);
			this.<.ctor>g__AddButton|7_2(EngineKeyFunctions.CameraRotateLeft);
			this.<.ctor>g__AddButton|7_2(EngineKeyFunctions.CameraRotateRight);
			this.<.ctor>g__AddButton|7_2(EngineKeyFunctions.CameraReset);
			this.<.ctor>g__AddHeader|7_1("ui-options-header-interaction-basic", ref CS$<>8__locals1);
			this.<.ctor>g__AddButton|7_2(EngineKeyFunctions.Use);
			this.<.ctor>g__AddButton|7_2(EngineKeyFunctions.UseSecondary);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.UseItemInHand);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.AltUseItemInHand);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.ActivateItemInWorld);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.AltActivateItemInWorld);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.Drop);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.ExamineEntity);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.SwapHands);
			this.<.ctor>g__AddHeader|7_1("ui-options-header-interaction-adv", ref CS$<>8__locals1);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.SmartEquipBackpack);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.SmartEquipBelt);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.ThrowItemInHand);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.TryPullObject);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.MovePulledObject);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.ReleasePulledObject);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.Point);
			this.<.ctor>g__AddHeader|7_1("ui-options-header-ui", ref CS$<>8__locals1);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.FocusChat);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.FocusLocalChat);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.FocusWhisperChat);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.FocusRadio);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.FocusOOC);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.FocusAdminChat);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.FocusDeadChat);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.FocusConsoleChat);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.CycleChatChannelForward);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.CycleChatChannelBackward);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.OpenCharacterMenu);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.OpenEmotionsMenu);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.OpenCraftingMenu);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.OpenGuidebook);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.OpenInventoryMenu);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.OpenAHelp);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.OpenActionsMenu);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.OpenEntitySpawnWindow);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.OpenSandboxWindow);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.OpenTileSpawnWindow);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.OpenDecalSpawnWindow);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.OpenAdminMenu);
			this.<.ctor>g__AddHeader|7_1("ui-options-header-misc", ref CS$<>8__locals1);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.TakeScreenshot);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.TakeScreenshotNoUI);
			this.<.ctor>g__AddHeader|7_1("ui-options-header-hotbar", ref CS$<>8__locals1);
			foreach (BoundKeyFunction function in ContentKeyFunctions.GetHotbarBoundKeys())
			{
				this.<.ctor>g__AddButton|7_2(function);
			}
			foreach (BoundKeyFunction function2 in ContentKeyFunctions.GetLoadoutBoundKeys())
			{
				this.<.ctor>g__AddButton|7_2(function2);
			}
			this.<.ctor>g__AddHeader|7_1("ui-options-header-shuttle", ref CS$<>8__locals1);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.ShuttleStrafeUp);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.ShuttleStrafeRight);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.ShuttleStrafeLeft);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.ShuttleStrafeDown);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.ShuttleRotateLeft);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.ShuttleRotateRight);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.ShuttleBrake);
			this.<.ctor>g__AddHeader|7_1("ui-options-header-map-editor", ref CS$<>8__locals1);
			this.<.ctor>g__AddButton|7_2(EngineKeyFunctions.EditorPlaceObject);
			this.<.ctor>g__AddButton|7_2(EngineKeyFunctions.EditorCancelPlace);
			this.<.ctor>g__AddButton|7_2(EngineKeyFunctions.EditorGridPlace);
			this.<.ctor>g__AddButton|7_2(EngineKeyFunctions.EditorLinePlace);
			this.<.ctor>g__AddButton|7_2(EngineKeyFunctions.EditorRotateObject);
			this.<.ctor>g__AddButton|7_2(ContentKeyFunctions.EditorCopyObject);
			this.<.ctor>g__AddHeader|7_1("ui-options-header-dev", ref CS$<>8__locals1);
			this.<.ctor>g__AddButton|7_2(EngineKeyFunctions.ShowDebugConsole);
			this.<.ctor>g__AddButton|7_2(EngineKeyFunctions.ShowDebugMonitors);
			this.<.ctor>g__AddButton|7_2(EngineKeyFunctions.HideUI);
			foreach (KeyRebindTab.KeyControl control in this._keyControls.Values)
			{
				this.UpdateKeyControl(control);
			}
		}

		// Token: 0x06000D4F RID: 3407 RVA: 0x0004FE98 File Offset: 0x0004E098
		private void UpdateKeyControl(KeyRebindTab.KeyControl control)
		{
			IReadOnlyList<IKeyBinding> keyBindings = this._inputManager.GetKeyBindings(control.Function);
			IKeyBinding binding = null;
			IKeyBinding binding2 = null;
			if (keyBindings.Count > 0)
			{
				binding = keyBindings[0];
				if (keyBindings.Count > 1)
				{
					binding2 = keyBindings[1];
				}
			}
			control.BindButton1.Binding = binding;
			control.BindButton1.UpdateText();
			control.BindButton2.Binding = binding2;
			control.BindButton2.UpdateText();
			control.BindButton2.Button.Disabled = (keyBindings.Count == 0);
			control.ResetButton.Disabled = !this._inputManager.IsKeyFunctionModified(control.Function);
		}

		// Token: 0x06000D50 RID: 3408 RVA: 0x0004FF44 File Offset: 0x0004E144
		protected override void EnteredTree()
		{
			base.EnteredTree();
			this._inputManager.FirstChanceOnKeyEvent += new KeyEventAction(this.InputManagerOnFirstChanceOnKeyEvent);
			this._inputManager.OnKeyBindingAdded += this.OnKeyBindAdded;
			this._inputManager.OnKeyBindingRemoved += this.OnKeyBindRemoved;
		}

		// Token: 0x06000D51 RID: 3409 RVA: 0x0004FF9C File Offset: 0x0004E19C
		protected override void ExitedTree()
		{
			base.ExitedTree();
			this._inputManager.FirstChanceOnKeyEvent -= new KeyEventAction(this.InputManagerOnFirstChanceOnKeyEvent);
			this._inputManager.OnKeyBindingAdded -= this.OnKeyBindAdded;
			this._inputManager.OnKeyBindingRemoved -= this.OnKeyBindRemoved;
		}

		// Token: 0x06000D52 RID: 3410 RVA: 0x0004FFF4 File Offset: 0x0004E1F4
		private void OnKeyBindRemoved(IKeyBinding obj)
		{
			this.OnKeyBindModified(obj, true);
		}

		// Token: 0x06000D53 RID: 3411 RVA: 0x0004FFFE File Offset: 0x0004E1FE
		private void OnKeyBindAdded(IKeyBinding obj)
		{
			this.OnKeyBindModified(obj, false);
		}

		// Token: 0x06000D54 RID: 3412 RVA: 0x00050008 File Offset: 0x0004E208
		private void OnKeyBindModified(IKeyBinding bind, bool removal)
		{
			KeyRebindTab.KeyControl keyControl;
			if (!this._keyControls.TryGetValue(bind.Function, out keyControl))
			{
				return;
			}
			if (removal)
			{
				KeyRebindTab.BindButton currentlyRebinding = this._currentlyRebinding;
				if (((currentlyRebinding != null) ? currentlyRebinding.KeyControl : null) == keyControl)
				{
					return;
				}
			}
			this.UpdateKeyControl(keyControl);
			if (this._currentlyRebinding == keyControl.BindButton1 || this._currentlyRebinding == keyControl.BindButton2)
			{
				this._currentlyRebinding = null;
			}
		}

		// Token: 0x06000D55 RID: 3413 RVA: 0x00050070 File Offset: 0x0004E270
		private void InputManagerOnFirstChanceOnKeyEvent(KeyEventArgs keyEvent, KeyEventType type)
		{
			if (this._currentlyRebinding == null)
			{
				return;
			}
			keyEvent.Handle();
			if (type != 2)
			{
				return;
			}
			Keyboard.Key key = keyEvent.Key;
			Keyboard.Key[] array = new Keyboard.Key[3];
			int num = 0;
			if (keyEvent.Control && key != 57)
			{
				array[num] = 57;
				num++;
			}
			if (keyEvent.Shift && key != 58)
			{
				array[num] = 58;
				num++;
			}
			if (keyEvent.Alt && key != 59)
			{
				array[num] = 59;
				num++;
			}
			if (keyEvent.System && num != 3 && key != 60 && key != 61)
			{
				array[num] = 60;
			}
			BoundKeyFunction function = this._currentlyRebinding.KeyControl.Function;
			KeyBindingType type2 = 1;
			if (KeyRebindTab.ToggleFunctions.Contains(function))
			{
				type2 = 2;
			}
			KeyBindingRegistration keyBindingRegistration = new KeyBindingRegistration
			{
				Function = function,
				BaseKey = key,
				Mod1 = array[0],
				Mod2 = array[1],
				Mod3 = array[2],
				Priority = 0,
				Type = type2,
				CanFocus = (key == 1 || key == 2 || key == 3),
				CanRepeat = false
			};
			this._inputManager.RegisterBinding(ref keyBindingRegistration, true);
			this._inputManager.SaveToUserData();
		}

		// Token: 0x06000D56 RID: 3414 RVA: 0x00050198 File Offset: 0x0004E398
		private void RebindButtonPressed(KeyRebindTab.BindButton button)
		{
			if (this._currentlyRebinding != null)
			{
				return;
			}
			this._currentlyRebinding = button;
			this._currentlyRebinding.Button.Text = Loc.GetString("ui-options-key-prompt");
			if (button.Binding != null)
			{
				this._deferCommands.Add(delegate
				{
					this._inputManager.RemoveBinding(button.Binding, true);
				});
			}
		}

		// Token: 0x06000D57 RID: 3415 RVA: 0x0005020C File Offset: 0x0004E40C
		protected override void FrameUpdate(FrameEventArgs args)
		{
			base.FrameUpdate(args);
			if (this._deferCommands.Count == 0)
			{
				return;
			}
			foreach (Action action in this._deferCommands)
			{
				action();
			}
			this._deferCommands.Clear();
		}

		// Token: 0x170002CE RID: 718
		// (get) Token: 0x06000D58 RID: 3416 RVA: 0x0005027C File Offset: 0x0004E47C
		[Nullable(0)]
		private BoxContainer KeybindsContainer
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<BoxContainer>("KeybindsContainer");
			}
		}

		// Token: 0x170002CF RID: 719
		// (get) Token: 0x06000D59 RID: 3417 RVA: 0x00050289 File Offset: 0x0004E489
		[Nullable(0)]
		private Button ResetAllButton
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<Button>("ResetAllButton");
			}
		}

		// Token: 0x06000D5D RID: 3421 RVA: 0x000502EC File Offset: 0x0004E4EC
		[CompilerGenerated]
		private void <.ctor>g__AddHeader|7_1(string headerContents, ref KeyRebindTab.<>c__DisplayClass7_0 A_2)
		{
			if (!A_2.first)
			{
				this.KeybindsContainer.AddChild(new Control
				{
					MinSize = new ValueTuple<float, float>(0f, 8f)
				});
			}
			A_2.first = false;
			this.KeybindsContainer.AddChild(new Label
			{
				Text = Loc.GetString(headerContents),
				FontColorOverride = new Color?(StyleNano.NanoGold),
				StyleClasses = 
				{
					"LabelKeyText"
				}
			});
		}

		// Token: 0x06000D5E RID: 3422 RVA: 0x00050370 File Offset: 0x0004E570
		[CompilerGenerated]
		private void <.ctor>g__AddButton|7_2(BoundKeyFunction function)
		{
			KeyRebindTab.KeyControl keyControl = new KeyRebindTab.KeyControl(this, function);
			this.KeybindsContainer.AddChild(keyControl);
			this._keyControls.Add(function, keyControl);
		}

		// Token: 0x06000D5F RID: 3423 RVA: 0x000503A0 File Offset: 0x0004E5A0
		[CompilerGenerated]
		private void <.ctor>g__AddCheckBox|7_3(string checkBoxName, bool currentState, [Nullable(new byte[]
		{
			2,
			1
		})] Action<BaseButton.ButtonToggledEventArgs> callBackOnClick)
		{
			CheckBox checkBox = new CheckBox
			{
				Text = Loc.GetString(checkBoxName)
			};
			checkBox.Pressed = currentState;
			checkBox.OnToggled += callBackOnClick;
			this.KeybindsContainer.AddChild(checkBox);
		}

		// Token: 0x06000D60 RID: 3424 RVA: 0x000503DC File Offset: 0x0004E5DC
		static void xaml(IServiceProvider A_0, Control A_1)
		{
			XamlIlContext.Context<Control> context = new XamlIlContext.Context<Control>(A_0, null, "resm:Content.Client.Options.UI.Tabs.KeyRebindTab.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			ScrollContainer scrollContainer = new ScrollContainer();
			scrollContainer.VerticalExpand = true;
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Name = "KeybindsContainer";
			Control control = boxContainer2;
			context.RobustNameScope.Register("KeybindsContainer", control);
			boxContainer2.Orientation = 1;
			boxContainer2.Margin = new Thickness(8f, 8f, 8f, 8f);
			control = boxContainer2;
			scrollContainer.XamlChildren.Add(control);
			control = scrollContainer;
			boxContainer.XamlChildren.Add(control);
			StripeBack stripeBack = new StripeBack();
			stripeBack.HasBottomEdge = false;
			stripeBack.HasMargins = false;
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 0;
			control = new Control
			{
				MinSize = new Vector2(8f, 0f)
			};
			boxContainer3.XamlChildren.Add(control);
			Label label = new Label();
			label.Text = (string)new LocExtension("ui-options-binds-explanation").ProvideValue();
			string item = "LabelSubText";
			label.StyleClasses.Add(item);
			control = label;
			boxContainer3.XamlChildren.Add(control);
			Button button = new Button();
			button.Name = "ResetAllButton";
			control = button;
			context.RobustNameScope.Register("ResetAllButton", control);
			button.Text = (string)new LocExtension("ui-options-binds-reset-all").ProvideValue();
			button.HorizontalExpand = true;
			button.HorizontalAlignment = 3;
			control = button;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			stripeBack.XamlChildren.Add(control);
			control = stripeBack;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06000D61 RID: 3425 RVA: 0x0005063E File Offset: 0x0004E83E
		private static void !XamlIlPopulateTrampoline(KeyRebindTab A_0)
		{
			KeyRebindTab.Populate:Content.Client.Options.UI.Tabs.KeyRebindTab.xaml(null, A_0);
		}

		// Token: 0x040006A0 RID: 1696
		private static readonly HashSet<BoundKeyFunction> ToggleFunctions = new HashSet<BoundKeyFunction>
		{
			EngineKeyFunctions.ShowDebugMonitors,
			EngineKeyFunctions.HideUI
		};

		// Token: 0x040006A1 RID: 1697
		[Dependency]
		private readonly IInputManager _inputManager;

		// Token: 0x040006A2 RID: 1698
		[Dependency]
		private readonly IConfigurationManager _cfg;

		// Token: 0x040006A3 RID: 1699
		[Nullable(2)]
		private KeyRebindTab.BindButton _currentlyRebinding;

		// Token: 0x040006A4 RID: 1700
		private readonly Dictionary<BoundKeyFunction, KeyRebindTab.KeyControl> _keyControls = new Dictionary<BoundKeyFunction, KeyRebindTab.KeyControl>();

		// Token: 0x040006A5 RID: 1701
		private readonly List<Action> _deferCommands = new List<Action>();

		// Token: 0x020001FD RID: 509
		[Nullable(0)]
		private sealed class KeyControl : Control
		{
			// Token: 0x06000D62 RID: 3426 RVA: 0x00050648 File Offset: 0x0004E848
			public KeyControl(KeyRebindTab parent, BoundKeyFunction function)
			{
				this.Function = function;
				Label label = new Label
				{
					Text = Loc.GetString("ui-options-function-" + CaseConversion.PascalToKebab(function.FunctionName)),
					HorizontalExpand = true,
					HorizontalAlignment = 1
				};
				this.BindButton1 = new KeyRebindTab.BindButton(parent, this, "OpenRight");
				this.BindButton2 = new KeyRebindTab.BindButton(parent, this, "OpenLeft");
				this.ResetButton = new Button
				{
					Text = Loc.GetString("ui-options-bind-reset"),
					StyleClasses = 
					{
						"Caution"
					}
				};
				BoxContainer boxContainer = new BoxContainer();
				boxContainer.Orientation = 0;
				boxContainer.Children.Add(new Control
				{
					MinSize = new ValueTuple<float, float>(5f, 0f)
				});
				boxContainer.Children.Add(label);
				boxContainer.Children.Add(this.BindButton1);
				boxContainer.Children.Add(this.BindButton2);
				boxContainer.Children.Add(new Control
				{
					MinSize = new ValueTuple<float, float>(10f, 0f)
				});
				boxContainer.Children.Add(this.ResetButton);
				BoxContainer boxContainer2 = boxContainer;
				Action <>9__1;
				this.ResetButton.OnPressed += delegate(BaseButton.ButtonEventArgs args)
				{
					List<Action> deferCommands = parent._deferCommands;
					Action item;
					if ((item = <>9__1) == null)
					{
						item = (<>9__1 = delegate()
						{
							parent._inputManager.ResetBindingsFor(function);
							parent._inputManager.SaveToUserData();
						});
					}
					deferCommands.Add(item);
				};
				base.AddChild(boxContainer2);
			}

			// Token: 0x040006A6 RID: 1702
			public readonly BoundKeyFunction Function;

			// Token: 0x040006A7 RID: 1703
			public readonly KeyRebindTab.BindButton BindButton1;

			// Token: 0x040006A8 RID: 1704
			public readonly KeyRebindTab.BindButton BindButton2;

			// Token: 0x040006A9 RID: 1705
			public readonly Button ResetButton;
		}

		// Token: 0x020001FF RID: 511
		[Nullable(0)]
		private sealed class BindButton : Control
		{
			// Token: 0x06000D66 RID: 3430 RVA: 0x00050830 File Offset: 0x0004EA30
			public BindButton(KeyRebindTab tab, KeyRebindTab.KeyControl keyControl, string styleClass)
			{
				KeyRebindTab.BindButton <>4__this = this;
				this._tab = tab;
				this.KeyControl = keyControl;
				this.Button = new Button
				{
					StyleClasses = 
					{
						styleClass
					}
				};
				this.UpdateText();
				base.AddChild(this.Button);
				this.Button.OnPressed += delegate(BaseButton.ButtonEventArgs args)
				{
					tab.RebindButtonPressed(<>4__this);
				};
				this.Button.OnKeyBindDown += this.ButtonOnOnKeyBindDown;
				base.MinSize = new ValueTuple<float, float>(200f, 0f);
			}

			// Token: 0x06000D67 RID: 3431 RVA: 0x000508DB File Offset: 0x0004EADB
			protected override void EnteredTree()
			{
				base.EnteredTree();
				this._tab._inputManager.OnInputModeChanged += this.UpdateText;
			}

			// Token: 0x06000D68 RID: 3432 RVA: 0x000508FF File Offset: 0x0004EAFF
			protected override void ExitedTree()
			{
				base.ExitedTree();
				this._tab._inputManager.OnInputModeChanged -= this.UpdateText;
			}

			// Token: 0x06000D69 RID: 3433 RVA: 0x00050923 File Offset: 0x0004EB23
			private void ButtonOnOnKeyBindDown(GUIBoundKeyEventArgs args)
			{
				if (args.Function == EngineKeyFunctions.UIRightClick)
				{
					if (this.Binding != null)
					{
						this._tab._deferCommands.Add(delegate
						{
							this._tab._inputManager.RemoveBinding(this.Binding, true);
							this._tab._inputManager.SaveToUserData();
						});
					}
					args.Handle();
				}
			}

			// Token: 0x06000D6A RID: 3434 RVA: 0x00050961 File Offset: 0x0004EB61
			public void UpdateText()
			{
				Button button = this.Button;
				IKeyBinding binding = this.Binding;
				button.Text = (((binding != null) ? binding.GetKeyString() : null) ?? Loc.GetString("ui-options-unbound"));
			}

			// Token: 0x040006AD RID: 1709
			private readonly KeyRebindTab _tab;

			// Token: 0x040006AE RID: 1710
			public readonly KeyRebindTab.KeyControl KeyControl;

			// Token: 0x040006AF RID: 1711
			public readonly Button Button;

			// Token: 0x040006B0 RID: 1712
			[Nullable(2)]
			public IKeyBinding Binding;
		}
	}
}
