using System;
using System.Globalization;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.UserInterface.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.GameStates;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Shared;
using Robust.Shared.Configuration;
using Robust.Shared.IoC;
using Robust.Shared.Maths;

namespace Content.Client.Options.UI.Tabs
{
	// Token: 0x02000203 RID: 515
	[GenerateTypedNameReferences]
	public sealed class NetworkTab : Control
	{
		// Token: 0x06000D70 RID: 3440 RVA: 0x000509E8 File Offset: 0x0004EBE8
		public NetworkTab()
		{
			NetworkTab.!XamlIlPopulateTrampoline(this);
			IoCManager.InjectDependencies<NetworkTab>(this);
			this.ApplyButton.OnPressed += this.OnApplyButtonPressed;
			this.ResetButton.OnPressed += this.OnResetButtonPressed;
			this.DefaultButton.OnPressed += this.OnDefaultButtonPressed;
			this.NetPredictCheckbox.OnToggled += this.OnPredictToggled;
			this.NetInterpRatioSlider.OnValueChanged += this.OnSliderChanged;
			this.NetInterpRatioSlider.MinValue = (float)this._stateMan.MinBufferSize;
			this.NetPredictTickBiasSlider.OnValueChanged += this.OnSliderChanged;
			this.NetPvsSpawnSlider.OnValueChanged += this.OnSliderChanged;
			this.NetPvsEntrySlider.OnValueChanged += this.OnSliderChanged;
			this.NetPvsLeaveSlider.OnValueChanged += this.OnSliderChanged;
			this.Reset();
		}

		// Token: 0x06000D71 RID: 3441 RVA: 0x00050AF4 File Offset: 0x0004ECF4
		protected override void Dispose(bool disposing)
		{
			this.ApplyButton.OnPressed -= this.OnApplyButtonPressed;
			this.ResetButton.OnPressed -= this.OnResetButtonPressed;
			this.DefaultButton.OnPressed -= this.OnDefaultButtonPressed;
			this.NetPredictCheckbox.OnToggled -= this.OnPredictToggled;
			this.NetInterpRatioSlider.OnValueChanged -= this.OnSliderChanged;
			this.NetPredictTickBiasSlider.OnValueChanged -= this.OnSliderChanged;
			this.NetPvsSpawnSlider.OnValueChanged -= this.OnSliderChanged;
			this.NetPvsEntrySlider.OnValueChanged -= this.OnSliderChanged;
			this.NetPvsLeaveSlider.OnValueChanged -= this.OnSliderChanged;
			base.Dispose(disposing);
		}

		// Token: 0x06000D72 RID: 3442 RVA: 0x00050BD7 File Offset: 0x0004EDD7
		[NullableContext(1)]
		private void OnPredictToggled(BaseButton.ButtonToggledEventArgs obj)
		{
			this.UpdateChanges();
		}

		// Token: 0x06000D73 RID: 3443 RVA: 0x00050BD7 File Offset: 0x0004EDD7
		[NullableContext(1)]
		private void OnSliderChanged(Range range)
		{
			this.UpdateChanges();
		}

		// Token: 0x06000D74 RID: 3444 RVA: 0x00050BE0 File Offset: 0x0004EDE0
		[NullableContext(1)]
		private void OnApplyButtonPressed(BaseButton.ButtonEventArgs args)
		{
			this._cfg.SetCVar<int>(CVars.NetBufferSize, (int)this.NetInterpRatioSlider.Value - this._stateMan.MinBufferSize, false);
			this._cfg.SetCVar<int>(CVars.NetPredictTickBias, (int)this.NetPredictTickBiasSlider.Value, false);
			this._cfg.SetCVar<int>(CVars.NetPVSEntityBudget, (int)this.NetPvsSpawnSlider.Value, false);
			this._cfg.SetCVar<int>(CVars.NetPVSEntityEnterBudget, (int)this.NetPvsEntrySlider.Value, false);
			this._cfg.SetCVar<int>(CVars.NetPVSEntityExitBudget, (int)this.NetPvsLeaveSlider.Value, false);
			this._cfg.SetCVar<bool>(CVars.NetPredict, this.NetPredictCheckbox.Pressed, false);
			this._cfg.SaveToFile();
			this.UpdateChanges();
		}

		// Token: 0x06000D75 RID: 3445 RVA: 0x00050CB7 File Offset: 0x0004EEB7
		[NullableContext(1)]
		private void OnResetButtonPressed(BaseButton.ButtonEventArgs args)
		{
			this.Reset();
		}

		// Token: 0x06000D76 RID: 3446 RVA: 0x00050CC0 File Offset: 0x0004EEC0
		[NullableContext(1)]
		private void OnDefaultButtonPressed(BaseButton.ButtonEventArgs obj)
		{
			this.NetPredictTickBiasSlider.Value = (float)CVars.NetPredictTickBias.DefaultValue;
			this.NetPvsSpawnSlider.Value = (float)CVars.NetPVSEntityBudget.DefaultValue;
			this.NetPvsEntrySlider.Value = (float)CVars.NetPVSEntityEnterBudget.DefaultValue;
			this.NetPvsLeaveSlider.Value = (float)CVars.NetPVSEntityExitBudget.DefaultValue;
			this.NetInterpRatioSlider.Value = (float)(CVars.NetBufferSize.DefaultValue + this._stateMan.MinBufferSize);
			this.UpdateChanges();
		}

		// Token: 0x06000D77 RID: 3447 RVA: 0x00050D50 File Offset: 0x0004EF50
		private void Reset()
		{
			this.NetInterpRatioSlider.Value = (float)(this._cfg.GetCVar<int>(CVars.NetBufferSize) + this._stateMan.MinBufferSize);
			this.NetPredictTickBiasSlider.Value = (float)this._cfg.GetCVar<int>(CVars.NetPredictTickBias);
			this.NetPvsSpawnSlider.Value = (float)this._cfg.GetCVar<int>(CVars.NetPVSEntityBudget);
			this.NetPvsEntrySlider.Value = (float)this._cfg.GetCVar<int>(CVars.NetPVSEntityEnterBudget);
			this.NetPvsLeaveSlider.Value = (float)this._cfg.GetCVar<int>(CVars.NetPVSEntityExitBudget);
			this.NetPredictCheckbox.Pressed = this._cfg.GetCVar<bool>(CVars.NetPredict);
			this.UpdateChanges();
		}

		// Token: 0x06000D78 RID: 3448 RVA: 0x00050E18 File Offset: 0x0004F018
		private void UpdateChanges()
		{
			bool disabled = this.NetInterpRatioSlider.Value == (float)(this._cfg.GetCVar<int>(CVars.NetBufferSize) + this._stateMan.MinBufferSize) && this.NetPredictTickBiasSlider.Value == (float)this._cfg.GetCVar<int>(CVars.NetPredictTickBias) && this.NetPredictCheckbox.Pressed == this._cfg.GetCVar<bool>(CVars.NetPredict) && this.NetPvsSpawnSlider.Value == (float)this._cfg.GetCVar<int>(CVars.NetPVSEntityBudget) && this.NetPvsEntrySlider.Value == (float)this._cfg.GetCVar<int>(CVars.NetPVSEntityEnterBudget) && this.NetPvsLeaveSlider.Value == (float)this._cfg.GetCVar<int>(CVars.NetPVSEntityExitBudget);
			this.ApplyButton.Disabled = disabled;
			this.ResetButton.Disabled = disabled;
			this.NetInterpRatioLabel.Text = this.NetInterpRatioSlider.Value.ToString(CultureInfo.InvariantCulture);
			this.NetPredictTickBiasLabel.Text = this.NetPredictTickBiasSlider.Value.ToString(CultureInfo.InvariantCulture);
			this.NetPvsSpawnLabel.Text = this.NetPvsSpawnSlider.Value.ToString(CultureInfo.InvariantCulture);
			this.NetPvsEntryLabel.Text = this.NetPvsEntrySlider.Value.ToString(CultureInfo.InvariantCulture);
			this.NetPvsLeaveLabel.Text = this.NetPvsLeaveSlider.Value.ToString(CultureInfo.InvariantCulture);
		}

		// Token: 0x170002D0 RID: 720
		// (get) Token: 0x06000D79 RID: 3449 RVA: 0x00050FB2 File Offset: 0x0004F1B2
		private CheckBox NetPredictCheckbox
		{
			get
			{
				return base.FindControl<CheckBox>("NetPredictCheckbox");
			}
		}

		// Token: 0x170002D1 RID: 721
		// (get) Token: 0x06000D7A RID: 3450 RVA: 0x00050FBF File Offset: 0x0004F1BF
		private Slider NetInterpRatioSlider
		{
			get
			{
				return base.FindControl<Slider>("NetInterpRatioSlider");
			}
		}

		// Token: 0x170002D2 RID: 722
		// (get) Token: 0x06000D7B RID: 3451 RVA: 0x00050FCC File Offset: 0x0004F1CC
		private Label NetInterpRatioLabel
		{
			get
			{
				return base.FindControl<Label>("NetInterpRatioLabel");
			}
		}

		// Token: 0x170002D3 RID: 723
		// (get) Token: 0x06000D7C RID: 3452 RVA: 0x00050FD9 File Offset: 0x0004F1D9
		private Slider NetPredictTickBiasSlider
		{
			get
			{
				return base.FindControl<Slider>("NetPredictTickBiasSlider");
			}
		}

		// Token: 0x170002D4 RID: 724
		// (get) Token: 0x06000D7D RID: 3453 RVA: 0x00050FE6 File Offset: 0x0004F1E6
		private Label NetPredictTickBiasLabel
		{
			get
			{
				return base.FindControl<Label>("NetPredictTickBiasLabel");
			}
		}

		// Token: 0x170002D5 RID: 725
		// (get) Token: 0x06000D7E RID: 3454 RVA: 0x00050FF3 File Offset: 0x0004F1F3
		private Slider NetPvsSpawnSlider
		{
			get
			{
				return base.FindControl<Slider>("NetPvsSpawnSlider");
			}
		}

		// Token: 0x170002D6 RID: 726
		// (get) Token: 0x06000D7F RID: 3455 RVA: 0x00051000 File Offset: 0x0004F200
		private Label NetPvsSpawnLabel
		{
			get
			{
				return base.FindControl<Label>("NetPvsSpawnLabel");
			}
		}

		// Token: 0x170002D7 RID: 727
		// (get) Token: 0x06000D80 RID: 3456 RVA: 0x0005100D File Offset: 0x0004F20D
		private Slider NetPvsEntrySlider
		{
			get
			{
				return base.FindControl<Slider>("NetPvsEntrySlider");
			}
		}

		// Token: 0x170002D8 RID: 728
		// (get) Token: 0x06000D81 RID: 3457 RVA: 0x0005101A File Offset: 0x0004F21A
		private Label NetPvsEntryLabel
		{
			get
			{
				return base.FindControl<Label>("NetPvsEntryLabel");
			}
		}

		// Token: 0x170002D9 RID: 729
		// (get) Token: 0x06000D82 RID: 3458 RVA: 0x00051027 File Offset: 0x0004F227
		private Slider NetPvsLeaveSlider
		{
			get
			{
				return base.FindControl<Slider>("NetPvsLeaveSlider");
			}
		}

		// Token: 0x170002DA RID: 730
		// (get) Token: 0x06000D83 RID: 3459 RVA: 0x00051034 File Offset: 0x0004F234
		private Label NetPvsLeaveLabel
		{
			get
			{
				return base.FindControl<Label>("NetPvsLeaveLabel");
			}
		}

		// Token: 0x170002DB RID: 731
		// (get) Token: 0x06000D84 RID: 3460 RVA: 0x0004BA91 File Offset: 0x00049C91
		private Button ResetButton
		{
			get
			{
				return base.FindControl<Button>("ResetButton");
			}
		}

		// Token: 0x170002DC RID: 732
		// (get) Token: 0x06000D85 RID: 3461 RVA: 0x0004BA9E File Offset: 0x00049C9E
		private Button DefaultButton
		{
			get
			{
				return base.FindControl<Button>("DefaultButton");
			}
		}

		// Token: 0x170002DD RID: 733
		// (get) Token: 0x06000D86 RID: 3462 RVA: 0x0004BAAB File Offset: 0x00049CAB
		private Button ApplyButton
		{
			get
			{
				return base.FindControl<Button>("ApplyButton");
			}
		}

		// Token: 0x06000D87 RID: 3463 RVA: 0x00051044 File Offset: 0x0004F244
		static void xaml(IServiceProvider A_0, Control A_1)
		{
			XamlIlContext.Context<Control> context = new XamlIlContext.Context<Control>(A_0, null, "resm:Content.Client.Options.UI.Tabs.NetworkTab.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 1;
			boxContainer2.Margin = new Thickness(8f, 8f, 8f, 8f);
			boxContainer2.VerticalExpand = true;
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 0;
			boxContainer3.Margin = new Thickness(4f, 10f, 4f, 0f);
			CheckBox checkBox = new CheckBox();
			checkBox.Name = "NetPredictCheckbox";
			Control control = checkBox;
			context.RobustNameScope.Register("NetPredictCheckbox", control);
			checkBox.Text = (string)new LocExtension("ui-options-net-predict").ProvideValue();
			control = checkBox;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer2.XamlChildren.Add(control);
			BoxContainer boxContainer4 = new BoxContainer();
			boxContainer4.Orientation = 0;
			boxContainer4.Margin = new Thickness(4f, 10f, 4f, 0f);
			control = new Label
			{
				Text = (string)new LocExtension("ui-options-net-interp-ratio").ProvideValue()
			};
			boxContainer4.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(8f, 0f)
			};
			boxContainer4.XamlChildren.Add(control);
			Slider slider = new Slider();
			slider.Name = "NetInterpRatioSlider";
			control = slider;
			context.RobustNameScope.Register("NetInterpRatioSlider", control);
			slider.ToolTip = (string)new LocExtension("ui-options-net-interp-ratio-tooltip").ProvideValue();
			slider.MaxValue = 8f;
			slider.HorizontalExpand = true;
			slider.MinSize = new Vector2(80f, 0f);
			slider.Rounded = true;
			control = slider;
			boxContainer4.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(8f, 0f)
			};
			boxContainer4.XamlChildren.Add(control);
			Label label = new Label();
			label.Name = "NetInterpRatioLabel";
			control = label;
			context.RobustNameScope.Register("NetInterpRatioLabel", control);
			label.MinSize = new Vector2(48f, 0f);
			label.Align = 2;
			control = label;
			boxContainer4.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(4f, 0f)
			};
			boxContainer4.XamlChildren.Add(control);
			control = boxContainer4;
			boxContainer2.XamlChildren.Add(control);
			BoxContainer boxContainer5 = new BoxContainer();
			boxContainer5.Orientation = 0;
			boxContainer5.Margin = new Thickness(4f, 10f, 4f, 0f);
			control = new Label
			{
				Text = (string)new LocExtension("ui-options-net-predict-tick-bias").ProvideValue()
			};
			boxContainer5.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(8f, 0f)
			};
			boxContainer5.XamlChildren.Add(control);
			Slider slider2 = new Slider();
			slider2.Name = "NetPredictTickBiasSlider";
			control = slider2;
			context.RobustNameScope.Register("NetPredictTickBiasSlider", control);
			slider2.ToolTip = (string)new LocExtension("ui-options-net-predict-tick-bias-tooltip").ProvideValue();
			slider2.MaxValue = 6f;
			slider2.MinValue = 0f;
			slider2.HorizontalExpand = true;
			slider2.MinSize = new Vector2(80f, 0f);
			slider2.Rounded = true;
			control = slider2;
			boxContainer5.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(8f, 0f)
			};
			boxContainer5.XamlChildren.Add(control);
			Label label2 = new Label();
			label2.Name = "NetPredictTickBiasLabel";
			control = label2;
			context.RobustNameScope.Register("NetPredictTickBiasLabel", control);
			label2.MinSize = new Vector2(48f, 0f);
			label2.Align = 2;
			control = label2;
			boxContainer5.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(4f, 0f)
			};
			boxContainer5.XamlChildren.Add(control);
			control = boxContainer5;
			boxContainer2.XamlChildren.Add(control);
			BoxContainer boxContainer6 = new BoxContainer();
			boxContainer6.Orientation = 0;
			boxContainer6.Margin = new Thickness(4f, 10f, 4f, 0f);
			control = new Label
			{
				Text = (string)new LocExtension("ui-options-net-pvs-spawn").ProvideValue()
			};
			boxContainer6.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(8f, 0f)
			};
			boxContainer6.XamlChildren.Add(control);
			Slider slider3 = new Slider();
			slider3.Name = "NetPvsSpawnSlider";
			control = slider3;
			context.RobustNameScope.Register("NetPvsSpawnSlider", control);
			slider3.ToolTip = (string)new LocExtension("ui-options-net-pvs-spawn-tooltip").ProvideValue();
			slider3.MaxValue = 150f;
			slider3.MinValue = 20f;
			slider3.HorizontalExpand = true;
			slider3.MinSize = new Vector2(80f, 0f);
			slider3.Rounded = true;
			control = slider3;
			boxContainer6.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(8f, 0f)
			};
			boxContainer6.XamlChildren.Add(control);
			Label label3 = new Label();
			label3.Name = "NetPvsSpawnLabel";
			control = label3;
			context.RobustNameScope.Register("NetPvsSpawnLabel", control);
			label3.MinSize = new Vector2(48f, 0f);
			label3.Align = 2;
			control = label3;
			boxContainer6.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(4f, 0f)
			};
			boxContainer6.XamlChildren.Add(control);
			control = boxContainer6;
			boxContainer2.XamlChildren.Add(control);
			BoxContainer boxContainer7 = new BoxContainer();
			boxContainer7.Orientation = 0;
			boxContainer7.Margin = new Thickness(4f, 10f, 4f, 0f);
			control = new Label
			{
				Text = (string)new LocExtension("ui-options-net-pvs-entry").ProvideValue()
			};
			boxContainer7.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(8f, 0f)
			};
			boxContainer7.XamlChildren.Add(control);
			Slider slider4 = new Slider();
			slider4.Name = "NetPvsEntrySlider";
			control = slider4;
			context.RobustNameScope.Register("NetPvsEntrySlider", control);
			slider4.ToolTip = (string)new LocExtension("ui-options-net-pvs-entry-tooltip").ProvideValue();
			slider4.MaxValue = 500f;
			slider4.MinValue = 20f;
			slider4.HorizontalExpand = true;
			slider4.MinSize = new Vector2(80f, 0f);
			slider4.Rounded = true;
			control = slider4;
			boxContainer7.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(8f, 0f)
			};
			boxContainer7.XamlChildren.Add(control);
			Label label4 = new Label();
			label4.Name = "NetPvsEntryLabel";
			control = label4;
			context.RobustNameScope.Register("NetPvsEntryLabel", control);
			label4.MinSize = new Vector2(48f, 0f);
			label4.Align = 2;
			control = label4;
			boxContainer7.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(4f, 0f)
			};
			boxContainer7.XamlChildren.Add(control);
			control = boxContainer7;
			boxContainer2.XamlChildren.Add(control);
			BoxContainer boxContainer8 = new BoxContainer();
			boxContainer8.Orientation = 0;
			boxContainer8.Margin = new Thickness(4f, 10f, 4f, 10f);
			control = new Label
			{
				Text = (string)new LocExtension("ui-options-net-pvs-leave").ProvideValue()
			};
			boxContainer8.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(8f, 0f)
			};
			boxContainer8.XamlChildren.Add(control);
			Slider slider5 = new Slider();
			slider5.Name = "NetPvsLeaveSlider";
			control = slider5;
			context.RobustNameScope.Register("NetPvsLeaveSlider", control);
			slider5.ToolTip = (string)new LocExtension("ui-options-net-pvs-leave-tooltip").ProvideValue();
			slider5.MaxValue = 300f;
			slider5.MinValue = 20f;
			slider5.HorizontalExpand = true;
			slider5.MinSize = new Vector2(80f, 0f);
			slider5.Rounded = true;
			control = slider5;
			boxContainer8.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(8f, 0f)
			};
			boxContainer8.XamlChildren.Add(control);
			Label label5 = new Label();
			label5.Name = "NetPvsLeaveLabel";
			control = label5;
			context.RobustNameScope.Register("NetPvsLeaveLabel", control);
			label5.MinSize = new Vector2(48f, 0f);
			label5.Align = 2;
			control = label5;
			boxContainer8.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(4f, 0f)
			};
			boxContainer8.XamlChildren.Add(control);
			control = boxContainer8;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			StripeBack stripeBack = new StripeBack();
			stripeBack.HasBottomEdge = false;
			stripeBack.HasMargins = false;
			BoxContainer boxContainer9 = new BoxContainer();
			boxContainer9.Orientation = 0;
			boxContainer9.Align = 2;
			boxContainer9.HorizontalExpand = true;
			boxContainer9.VerticalExpand = true;
			Button button = new Button();
			button.Name = "ResetButton";
			control = button;
			context.RobustNameScope.Register("ResetButton", control);
			button.Text = (string)new LocExtension("ui-options-reset-all").ProvideValue();
			string item = "Caution";
			button.StyleClasses.Add(item);
			button.HorizontalExpand = true;
			button.HorizontalAlignment = 3;
			control = button;
			boxContainer9.XamlChildren.Add(control);
			Button button2 = new Button();
			button2.Name = "DefaultButton";
			control = button2;
			context.RobustNameScope.Register("DefaultButton", control);
			button2.Text = (string)new LocExtension("ui-options-default").ProvideValue();
			button2.TextAlign = 1;
			button2.HorizontalAlignment = 3;
			control = button2;
			boxContainer9.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(2f, 0f)
			};
			boxContainer9.XamlChildren.Add(control);
			Button button3 = new Button();
			button3.Name = "ApplyButton";
			control = button3;
			context.RobustNameScope.Register("ApplyButton", control);
			button3.Text = (string)new LocExtension("ui-options-apply").ProvideValue();
			button3.TextAlign = 1;
			button3.HorizontalAlignment = 3;
			control = button3;
			boxContainer9.XamlChildren.Add(control);
			control = boxContainer9;
			stripeBack.XamlChildren.Add(control);
			control = stripeBack;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06000D88 RID: 3464 RVA: 0x00051DA0 File Offset: 0x0004FFA0
		private static void !XamlIlPopulateTrampoline(NetworkTab A_0)
		{
			NetworkTab.Populate:Content.Client.Options.UI.Tabs.NetworkTab.xaml(null, A_0);
		}

		// Token: 0x040006B6 RID: 1718
		[Nullable(1)]
		[Dependency]
		private readonly IConfigurationManager _cfg;

		// Token: 0x040006B7 RID: 1719
		[Nullable(1)]
		[Dependency]
		private readonly IClientGameStateManager _stateMan;
	}
}
