using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.UserInterface.Controls;
using Content.Client.UserInterface.Screens;
using Content.Shared.CCVar;
using Content.Shared.HUD;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Shared;
using Robust.Shared.Configuration;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;
using Robust.Shared.Prototypes;

namespace Content.Client.Options.UI.Tabs
{
	// Token: 0x020001FB RID: 507
	[GenerateTypedNameReferences]
	public sealed class GraphicsTab : Control
	{
		// Token: 0x06000D1F RID: 3359 RVA: 0x0004E064 File Offset: 0x0004C264
		public GraphicsTab()
		{
			IoCManager.InjectDependencies<GraphicsTab>(this);
			GraphicsTab.!XamlIlPopulateTrampoline(this);
			this.VSyncCheckBox.OnToggled += this.OnCheckBoxToggled;
			this.FullscreenCheckBox.OnToggled += this.OnCheckBoxToggled;
			this.LightingPresetOption.AddItem(Loc.GetString("ui-options-lighting-very-low"), null);
			this.LightingPresetOption.AddItem(Loc.GetString("ui-options-lighting-low"), null);
			this.LightingPresetOption.AddItem(Loc.GetString("ui-options-lighting-medium"), null);
			this.LightingPresetOption.AddItem(Loc.GetString("ui-options-lighting-high"), null);
			this.LightingPresetOption.OnItemSelected += this.OnLightingQualityChanged;
			this.UIScaleOption.AddItem(Loc.GetString("ui-options-scale-auto", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("scale", base.UserInterfaceManager.DefaultUIScale)
			}), null);
			this.UIScaleOption.AddItem(Loc.GetString("ui-options-scale-75"), null);
			this.UIScaleOption.AddItem(Loc.GetString("ui-options-scale-100"), null);
			this.UIScaleOption.AddItem(Loc.GetString("ui-options-scale-125"), null);
			this.UIScaleOption.AddItem(Loc.GetString("ui-options-scale-150"), null);
			this.UIScaleOption.AddItem(Loc.GetString("ui-options-scale-175"), null);
			this.UIScaleOption.AddItem(Loc.GetString("ui-options-scale-200"), null);
			this.UIScaleOption.OnItemSelected += this.OnUIScaleChanged;
			foreach (HudThemePrototype hudThemePrototype in this._prototypeManager.EnumeratePrototypes<HudThemePrototype>())
			{
				this.HudThemeOption.AddItem(Loc.GetString(hudThemePrototype.Name), null);
			}
			this.HudThemeOption.OnItemSelected += this.OnHudThemeChanged;
			string cvar = this._cfg.GetCVar<string>(CCVars.UILayout);
			int num = 0;
			foreach (object obj in Enum.GetValues(typeof(ScreenType)))
			{
				string text = obj.ToString();
				string text2 = this._screenTypeToLoc[(ScreenType)obj];
				this.HudLayoutOption.AddItem(text2, new int?(num));
				if (text == cvar)
				{
					this.HudLayoutOption.SelectId(num);
					this.HudLayoutWarningText.Visible = (text == ScreenType.Default.ToString());
				}
				this.HudLayoutOption.SetItemMetadata(num, text);
				num++;
			}
			this.HudLayoutOption.OnItemSelected += delegate(OptionButton.ItemSelectedEventArgs args)
			{
				this.HudLayoutOption.SelectId(args.Id);
				string a = (string)this.HudLayoutOption.GetItemMetadata(args.Id);
				this.HudLayoutWarningText.Visible = (a == ScreenType.Default.ToString());
				this.UpdateApplyButton();
			};
			this.ViewportStretchCheckBox.OnToggled += delegate(BaseButton.ButtonToggledEventArgs _)
			{
				this.UpdateViewportScale();
				this.UpdateApplyButton();
			};
			this.ViewportScaleSlider.OnValueChanged += delegate(Range _)
			{
				this.UpdateApplyButton();
				this.UpdateViewportScale();
			};
			this.ViewportWidthSlider.OnValueChanged += delegate(Range _)
			{
				this.UpdateViewportWidthDisplay();
				this.UpdateApplyButton();
			};
			this.ShowHeldItemCheckBox.OnToggled += this.OnCheckBoxToggled;
			this.IntegerScalingCheckBox.OnToggled += this.OnCheckBoxToggled;
			this.ViewportLowResCheckBox.OnToggled += this.OnCheckBoxToggled;
			this.ParallaxLowQualityCheckBox.OnToggled += this.OnCheckBoxToggled;
			this.FpsCounterCheckBox.OnToggled += this.OnCheckBoxToggled;
			this.FilmGrainCheckBox.OnToggled += this.OnFilmGrainCheckBoxToggled;
			this.ApplyButton.OnPressed += this.OnApplyButtonPressed;
			this.VSyncCheckBox.Pressed = this._cfg.GetCVar<bool>(CVars.DisplayVSync);
			this.FullscreenCheckBox.Pressed = this.ConfigIsFullscreen;
			this.LightingPresetOption.SelectId(this.GetConfigLightingQuality());
			this.UIScaleOption.SelectId(GraphicsTab.GetConfigUIScalePreset(this.ConfigUIScale));
			this.HudThemeOption.SelectId(this._cfg.GetCVar<int>(CCVars.HudTheme));
			this.ViewportScaleSlider.Value = (float)this._cfg.GetCVar<int>(CCVars.ViewportFixedScaleFactor);
			this.ViewportStretchCheckBox.Pressed = this._cfg.GetCVar<bool>(CCVars.ViewportStretch);
			this.IntegerScalingCheckBox.Pressed = (this._cfg.GetCVar<int>(CCVars.ViewportSnapToleranceMargin) != 0);
			this.ViewportLowResCheckBox.Pressed = !this._cfg.GetCVar<bool>(CCVars.ViewportScaleRender);
			this.ParallaxLowQualityCheckBox.Pressed = this._cfg.GetCVar<bool>(CCVars.ParallaxLowQuality);
			this.FpsCounterCheckBox.Pressed = this._cfg.GetCVar<bool>(CCVars.HudFpsCounterVisible);
			this.ShowHeldItemCheckBox.Pressed = this._cfg.GetCVar<bool>(CCVars.HudHeldItemShow);
			this.ViewportWidthSlider.Value = (float)this._cfg.GetCVar<int>(CCVars.ViewportWidth);
			this.FilmGrainCheckBox.Pressed = this._cfg.GetCVar<bool>(CCVars.FilmGrain);
			this._cfg.OnValueChanged<int>(CCVars.ViewportMinimumWidth, delegate(int _)
			{
				this.UpdateViewportWidthRange();
			}, false);
			this._cfg.OnValueChanged<int>(CCVars.ViewportMaximumWidth, delegate(int _)
			{
				this.UpdateViewportWidthRange();
			}, false);
			this.UpdateViewportWidthRange();
			this.UpdateViewportWidthDisplay();
			this.UpdateViewportScale();
			this.UpdateApplyButton();
		}

		// Token: 0x06000D20 RID: 3360 RVA: 0x0004E68C File Offset: 0x0004C88C
		[NullableContext(1)]
		private void OnShadersCheckBoxToggled(BaseButton.ButtonToggledEventArgs obj)
		{
			this.UpdateApplyButton();
		}

		// Token: 0x06000D21 RID: 3361 RVA: 0x0004E68C File Offset: 0x0004C88C
		[NullableContext(1)]
		private void OnFilmGrainCheckBoxToggled(BaseButton.ButtonToggledEventArgs obj)
		{
			this.UpdateApplyButton();
		}

		// Token: 0x06000D22 RID: 3362 RVA: 0x0004E694 File Offset: 0x0004C894
		[NullableContext(1)]
		private void OnUIScaleChanged(OptionButton.ItemSelectedEventArgs args)
		{
			this.UIScaleOption.SelectId(args.Id);
			this.UpdateApplyButton();
		}

		// Token: 0x06000D23 RID: 3363 RVA: 0x0004E6AD File Offset: 0x0004C8AD
		[NullableContext(1)]
		private void OnHudThemeChanged(OptionButton.ItemSelectedEventArgs args)
		{
			this.HudThemeOption.SelectId(args.Id);
			this.UpdateApplyButton();
		}

		// Token: 0x06000D24 RID: 3364 RVA: 0x0004E6C8 File Offset: 0x0004C8C8
		[NullableContext(1)]
		private void OnApplyButtonPressed(BaseButton.ButtonEventArgs args)
		{
			this._cfg.SetCVar<bool>(CVars.DisplayVSync, this.VSyncCheckBox.Pressed, false);
			this.SetConfigLightingQuality(this.LightingPresetOption.SelectedId);
			if (this.HudThemeOption.SelectedId != this._cfg.GetCVar<int>(CCVars.HudTheme))
			{
				this._cfg.SetCVar<int>(CCVars.HudTheme, this.HudThemeOption.SelectedId, false);
			}
			this._cfg.SetCVar<int>(CVars.DisplayWindowMode, this.FullscreenCheckBox.Pressed ? 1 : 0, false);
			this._cfg.SetCVar<float>(CVars.DisplayUIScale, GraphicsTab.UIScaleOptions[this.UIScaleOption.SelectedId], false);
			this._cfg.SetCVar<bool>(CCVars.ViewportStretch, this.ViewportStretchCheckBox.Pressed, false);
			this._cfg.SetCVar<int>(CCVars.ViewportFixedScaleFactor, (int)this.ViewportScaleSlider.Value, false);
			this._cfg.SetCVar<int>(CCVars.ViewportSnapToleranceMargin, this.IntegerScalingCheckBox.Pressed ? CCVars.ViewportSnapToleranceMargin.DefaultValue : 0, false);
			this._cfg.SetCVar<bool>(CCVars.ViewportScaleRender, !this.ViewportLowResCheckBox.Pressed, false);
			this._cfg.SetCVar<bool>(CCVars.ParallaxLowQuality, this.ParallaxLowQualityCheckBox.Pressed, false);
			this._cfg.SetCVar<bool>(CCVars.HudHeldItemShow, this.ShowHeldItemCheckBox.Pressed, false);
			this._cfg.SetCVar<bool>(CCVars.HudFpsCounterVisible, this.FpsCounterCheckBox.Pressed, false);
			this._cfg.SetCVar<int>(CCVars.ViewportWidth, (int)this.ViewportWidthSlider.Value, false);
			this._cfg.SetCVar<bool>(CCVars.FilmGrain, this.FilmGrainCheckBox.Pressed, false);
			string text = this.HudLayoutOption.SelectedMetadata as string;
			if (text != null)
			{
				this._cfg.SetCVar<string>(CCVars.UILayout, text, false);
			}
			this._cfg.SaveToFile();
			this.UpdateApplyButton();
		}

		// Token: 0x06000D25 RID: 3365 RVA: 0x0004E68C File Offset: 0x0004C88C
		[NullableContext(1)]
		private void OnCheckBoxToggled(BaseButton.ButtonToggledEventArgs args)
		{
			this.UpdateApplyButton();
		}

		// Token: 0x06000D26 RID: 3366 RVA: 0x0004E8C6 File Offset: 0x0004CAC6
		[NullableContext(1)]
		private void OnLightingQualityChanged(OptionButton.ItemSelectedEventArgs args)
		{
			this.LightingPresetOption.SelectId(args.Id);
			this.UpdateApplyButton();
		}

		// Token: 0x06000D27 RID: 3367 RVA: 0x0004E8E0 File Offset: 0x0004CAE0
		private void UpdateApplyButton()
		{
			bool flag = this.VSyncCheckBox.Pressed == this._cfg.GetCVar<bool>(CVars.DisplayVSync);
			bool flag2 = this.FullscreenCheckBox.Pressed == this.ConfigIsFullscreen;
			bool flag3 = this.LightingPresetOption.SelectedId == this.GetConfigLightingQuality();
			bool flag4 = this.HudThemeOption.SelectedId == this._cfg.GetCVar<int>(CCVars.HudTheme);
			bool flag5 = MathHelper.CloseToPercent(GraphicsTab.UIScaleOptions[this.UIScaleOption.SelectedId], this.ConfigUIScale, 1E-05);
			bool flag6 = this.ViewportStretchCheckBox.Pressed == this._cfg.GetCVar<bool>(CCVars.ViewportStretch);
			bool flag7 = (int)this.ViewportScaleSlider.Value == this._cfg.GetCVar<int>(CCVars.ViewportFixedScaleFactor);
			bool flag8 = this.IntegerScalingCheckBox.Pressed == (this._cfg.GetCVar<int>(CCVars.ViewportSnapToleranceMargin) != 0);
			bool flag9 = this.ViewportLowResCheckBox.Pressed == !this._cfg.GetCVar<bool>(CCVars.ViewportScaleRender);
			bool flag10 = this.ParallaxLowQualityCheckBox.Pressed == this._cfg.GetCVar<bool>(CCVars.ParallaxLowQuality);
			bool flag11 = this.ShowHeldItemCheckBox.Pressed == this._cfg.GetCVar<bool>(CCVars.HudHeldItemShow);
			bool flag12 = this.FpsCounterCheckBox.Pressed == this._cfg.GetCVar<bool>(CCVars.HudFpsCounterVisible);
			bool flag13 = (int)this.ViewportWidthSlider.Value == this._cfg.GetCVar<int>(CCVars.ViewportWidth);
			string text = this.HudLayoutOption.SelectedMetadata as string;
			bool flag14 = text != null && text == this._cfg.GetCVar<string>(CCVars.UILayout);
			bool flag15 = this.FilmGrainCheckBox.Pressed == this._cfg.GetCVar<bool>(CCVars.FilmGrain);
			this.ApplyButton.Disabled = (flag && flag2 && flag3 && flag5 && flag6 && flag7 && flag8 && flag9 && flag10 && flag4 && flag11 && flag12 && flag13 && flag14 && flag15);
		}

		// Token: 0x170002B8 RID: 696
		// (get) Token: 0x06000D28 RID: 3368 RVA: 0x0004EAFC File Offset: 0x0004CCFC
		private bool ConfigIsFullscreen
		{
			get
			{
				return this._cfg.GetCVar<int>(CVars.DisplayWindowMode) == 1;
			}
		}

		// Token: 0x170002B9 RID: 697
		// (get) Token: 0x06000D29 RID: 3369 RVA: 0x0004EB11 File Offset: 0x0004CD11
		private float ConfigUIScale
		{
			get
			{
				return this._cfg.GetCVar<float>(CVars.DisplayUIScale);
			}
		}

		// Token: 0x06000D2A RID: 3370 RVA: 0x0004EB24 File Offset: 0x0004CD24
		private int GetConfigLightingQuality()
		{
			float cvar = this._cfg.GetCVar<float>(CVars.LightResolutionScale);
			bool cvar2 = this._cfg.GetCVar<bool>(CVars.LightSoftShadows);
			if ((double)cvar <= 0.125)
			{
				return 0;
			}
			if ((double)cvar <= 0.5 && !cvar2)
			{
				return 1;
			}
			if ((double)cvar <= 0.5)
			{
				return 2;
			}
			return 3;
		}

		// Token: 0x06000D2B RID: 3371 RVA: 0x0004EB84 File Offset: 0x0004CD84
		private void SetConfigLightingQuality(int value)
		{
			switch (value)
			{
			case 0:
				this._cfg.SetCVar<float>(CVars.LightResolutionScale, 0.125f, false);
				this._cfg.SetCVar<bool>(CVars.LightSoftShadows, false, false);
				this._cfg.SetCVar<bool>(CVars.LightBlur, false, false);
				return;
			case 1:
				this._cfg.SetCVar<float>(CVars.LightResolutionScale, 0.5f, false);
				this._cfg.SetCVar<bool>(CVars.LightSoftShadows, false, false);
				this._cfg.SetCVar<bool>(CVars.LightBlur, true, false);
				return;
			case 2:
				this._cfg.SetCVar<float>(CVars.LightResolutionScale, 0.5f, false);
				this._cfg.SetCVar<bool>(CVars.LightSoftShadows, true, false);
				this._cfg.SetCVar<bool>(CVars.LightBlur, true, false);
				return;
			case 3:
				this._cfg.SetCVar<float>(CVars.LightResolutionScale, 1f, false);
				this._cfg.SetCVar<bool>(CVars.LightSoftShadows, true, false);
				this._cfg.SetCVar<bool>(CVars.LightBlur, true, false);
				return;
			default:
				return;
			}
		}

		// Token: 0x06000D2C RID: 3372 RVA: 0x0004EC94 File Offset: 0x0004CE94
		private static int GetConfigUIScalePreset(float value)
		{
			for (int i = 0; i < GraphicsTab.UIScaleOptions.Length; i++)
			{
				if (MathHelper.CloseToPercent(GraphicsTab.UIScaleOptions[i], value, 1E-05))
				{
					return i;
				}
			}
			return 0;
		}

		// Token: 0x06000D2D RID: 3373 RVA: 0x0004ECD0 File Offset: 0x0004CED0
		private void UpdateViewportScale()
		{
			this.ViewportScaleBox.Visible = !this.ViewportStretchCheckBox.Pressed;
			this.IntegerScalingCheckBox.Visible = this.ViewportStretchCheckBox.Pressed;
			this.ViewportScaleText.Text = Loc.GetString("ui-options-vp-scale", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("scale", this.ViewportScaleSlider.Value)
			});
		}

		// Token: 0x06000D2E RID: 3374 RVA: 0x0004ED48 File Offset: 0x0004CF48
		private void UpdateViewportWidthRange()
		{
			int cvar = this._cfg.GetCVar<int>(CCVars.ViewportMinimumWidth);
			int cvar2 = this._cfg.GetCVar<int>(CCVars.ViewportMaximumWidth);
			this.ViewportWidthSlider.MinValue = (float)cvar;
			this.ViewportWidthSlider.MaxValue = (float)cvar2;
		}

		// Token: 0x06000D2F RID: 3375 RVA: 0x0004ED91 File Offset: 0x0004CF91
		private void UpdateViewportWidthDisplay()
		{
			this.ViewportWidthSliderDisplay.Text = Loc.GetString("ui-options-vp-width", new ValueTuple<string, object>[]
			{
				new ValueTuple<string, object>("width", (int)this.ViewportWidthSlider.Value)
			});
		}

		// Token: 0x170002BA RID: 698
		// (get) Token: 0x06000D30 RID: 3376 RVA: 0x0004EDD0 File Offset: 0x0004CFD0
		private CheckBox VSyncCheckBox
		{
			get
			{
				return base.FindControl<CheckBox>("VSyncCheckBox");
			}
		}

		// Token: 0x170002BB RID: 699
		// (get) Token: 0x06000D31 RID: 3377 RVA: 0x0004EDDD File Offset: 0x0004CFDD
		private CheckBox FullscreenCheckBox
		{
			get
			{
				return base.FindControl<CheckBox>("FullscreenCheckBox");
			}
		}

		// Token: 0x170002BC RID: 700
		// (get) Token: 0x06000D32 RID: 3378 RVA: 0x0004EDEA File Offset: 0x0004CFEA
		private OptionButton LightingPresetOption
		{
			get
			{
				return base.FindControl<OptionButton>("LightingPresetOption");
			}
		}

		// Token: 0x170002BD RID: 701
		// (get) Token: 0x06000D33 RID: 3379 RVA: 0x0004EDF7 File Offset: 0x0004CFF7
		private OptionButton UIScaleOption
		{
			get
			{
				return base.FindControl<OptionButton>("UIScaleOption");
			}
		}

		// Token: 0x170002BE RID: 702
		// (get) Token: 0x06000D34 RID: 3380 RVA: 0x0004EE04 File Offset: 0x0004D004
		private OptionButton HudThemeOption
		{
			get
			{
				return base.FindControl<OptionButton>("HudThemeOption");
			}
		}

		// Token: 0x170002BF RID: 703
		// (get) Token: 0x06000D35 RID: 3381 RVA: 0x0004EE11 File Offset: 0x0004D011
		private CheckBox ShowHeldItemCheckBox
		{
			get
			{
				return base.FindControl<CheckBox>("ShowHeldItemCheckBox");
			}
		}

		// Token: 0x170002C0 RID: 704
		// (get) Token: 0x06000D36 RID: 3382 RVA: 0x0004EE1E File Offset: 0x0004D01E
		private CheckBox ViewportStretchCheckBox
		{
			get
			{
				return base.FindControl<CheckBox>("ViewportStretchCheckBox");
			}
		}

		// Token: 0x170002C1 RID: 705
		// (get) Token: 0x06000D37 RID: 3383 RVA: 0x0004EE2B File Offset: 0x0004D02B
		private BoxContainer ViewportScaleBox
		{
			get
			{
				return base.FindControl<BoxContainer>("ViewportScaleBox");
			}
		}

		// Token: 0x170002C2 RID: 706
		// (get) Token: 0x06000D38 RID: 3384 RVA: 0x0004EE38 File Offset: 0x0004D038
		private Label ViewportScaleText
		{
			get
			{
				return base.FindControl<Label>("ViewportScaleText");
			}
		}

		// Token: 0x170002C3 RID: 707
		// (get) Token: 0x06000D39 RID: 3385 RVA: 0x0004EE45 File Offset: 0x0004D045
		private Slider ViewportScaleSlider
		{
			get
			{
				return base.FindControl<Slider>("ViewportScaleSlider");
			}
		}

		// Token: 0x170002C4 RID: 708
		// (get) Token: 0x06000D3A RID: 3386 RVA: 0x0004EE52 File Offset: 0x0004D052
		private Label ViewportWidthSliderDisplay
		{
			get
			{
				return base.FindControl<Label>("ViewportWidthSliderDisplay");
			}
		}

		// Token: 0x170002C5 RID: 709
		// (get) Token: 0x06000D3B RID: 3387 RVA: 0x0004EE5F File Offset: 0x0004D05F
		private Slider ViewportWidthSlider
		{
			get
			{
				return base.FindControl<Slider>("ViewportWidthSlider");
			}
		}

		// Token: 0x170002C6 RID: 710
		// (get) Token: 0x06000D3C RID: 3388 RVA: 0x0004EE6C File Offset: 0x0004D06C
		private OptionButton HudLayoutOption
		{
			get
			{
				return base.FindControl<OptionButton>("HudLayoutOption");
			}
		}

		// Token: 0x170002C7 RID: 711
		// (get) Token: 0x06000D3D RID: 3389 RVA: 0x0004EE79 File Offset: 0x0004D079
		private Label HudLayoutWarningText
		{
			get
			{
				return base.FindControl<Label>("HudLayoutWarningText");
			}
		}

		// Token: 0x170002C8 RID: 712
		// (get) Token: 0x06000D3E RID: 3390 RVA: 0x0004EE86 File Offset: 0x0004D086
		private CheckBox IntegerScalingCheckBox
		{
			get
			{
				return base.FindControl<CheckBox>("IntegerScalingCheckBox");
			}
		}

		// Token: 0x170002C9 RID: 713
		// (get) Token: 0x06000D3F RID: 3391 RVA: 0x0004EE93 File Offset: 0x0004D093
		private CheckBox ViewportLowResCheckBox
		{
			get
			{
				return base.FindControl<CheckBox>("ViewportLowResCheckBox");
			}
		}

		// Token: 0x170002CA RID: 714
		// (get) Token: 0x06000D40 RID: 3392 RVA: 0x0004EEA0 File Offset: 0x0004D0A0
		private CheckBox ParallaxLowQualityCheckBox
		{
			get
			{
				return base.FindControl<CheckBox>("ParallaxLowQualityCheckBox");
			}
		}

		// Token: 0x170002CB RID: 715
		// (get) Token: 0x06000D41 RID: 3393 RVA: 0x0004EEAD File Offset: 0x0004D0AD
		private CheckBox FpsCounterCheckBox
		{
			get
			{
				return base.FindControl<CheckBox>("FpsCounterCheckBox");
			}
		}

		// Token: 0x170002CC RID: 716
		// (get) Token: 0x06000D42 RID: 3394 RVA: 0x0004EEBA File Offset: 0x0004D0BA
		private CheckBox FilmGrainCheckBox
		{
			get
			{
				return base.FindControl<CheckBox>("FilmGrainCheckBox");
			}
		}

		// Token: 0x170002CD RID: 717
		// (get) Token: 0x06000D43 RID: 3395 RVA: 0x0004BAAB File Offset: 0x00049CAB
		private Button ApplyButton
		{
			get
			{
				return base.FindControl<Button>("ApplyButton");
			}
		}

		// Token: 0x06000D4B RID: 3403 RVA: 0x0004EF70 File Offset: 0x0004D170
		static void xaml(IServiceProvider A_0, GraphicsTab A_1)
		{
			XamlIlContext.Context<GraphicsTab> context = new XamlIlContext.Context<GraphicsTab>(A_0, null, "resm:Content.Client.Options.UI.Tabs.GraphicsTab.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 1;
			boxContainer2.Margin = new Thickness(8f, 8f, 8f, 8f);
			boxContainer2.VerticalExpand = true;
			CheckBox checkBox = new CheckBox();
			checkBox.Name = "VSyncCheckBox";
			Control control = checkBox;
			context.RobustNameScope.Register("VSyncCheckBox", control);
			checkBox.Text = (string)new LocExtension("ui-options-vsync").ProvideValue();
			control = checkBox;
			boxContainer2.XamlChildren.Add(control);
			CheckBox checkBox2 = new CheckBox();
			checkBox2.Name = "FullscreenCheckBox";
			control = checkBox2;
			context.RobustNameScope.Register("FullscreenCheckBox", control);
			checkBox2.Text = (string)new LocExtension("ui-options-fullscreen").ProvideValue();
			control = checkBox2;
			boxContainer2.XamlChildren.Add(control);
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("ui-options-lighting-label").ProvideValue()
			};
			boxContainer3.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(4f, 0f)
			};
			boxContainer3.XamlChildren.Add(control);
			OptionButton optionButton = new OptionButton();
			optionButton.Name = "LightingPresetOption";
			control = optionButton;
			context.RobustNameScope.Register("LightingPresetOption", control);
			optionButton.MinSize = new Vector2(100f, 0f);
			control = optionButton;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer2.XamlChildren.Add(control);
			BoxContainer boxContainer4 = new BoxContainer();
			boxContainer4.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("ui-options-scale-label").ProvideValue()
			};
			boxContainer4.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(4f, 0f)
			};
			boxContainer4.XamlChildren.Add(control);
			OptionButton optionButton2 = new OptionButton();
			optionButton2.Name = "UIScaleOption";
			control = optionButton2;
			context.RobustNameScope.Register("UIScaleOption", control);
			control = optionButton2;
			boxContainer4.XamlChildren.Add(control);
			control = boxContainer4;
			boxContainer2.XamlChildren.Add(control);
			BoxContainer boxContainer5 = new BoxContainer();
			boxContainer5.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("ui-options-hud-theme").ProvideValue()
			};
			boxContainer5.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(4f, 0f)
			};
			boxContainer5.XamlChildren.Add(control);
			OptionButton optionButton3 = new OptionButton();
			optionButton3.Name = "HudThemeOption";
			control = optionButton3;
			context.RobustNameScope.Register("HudThemeOption", control);
			control = optionButton3;
			boxContainer5.XamlChildren.Add(control);
			control = boxContainer5;
			boxContainer2.XamlChildren.Add(control);
			CheckBox checkBox3 = new CheckBox();
			checkBox3.Name = "ShowHeldItemCheckBox";
			control = checkBox3;
			context.RobustNameScope.Register("ShowHeldItemCheckBox", control);
			checkBox3.Text = (string)new LocExtension("ui-options-show-held-item").ProvideValue();
			control = checkBox3;
			boxContainer2.XamlChildren.Add(control);
			BoxContainer boxContainer6 = new BoxContainer();
			boxContainer6.Orientation = 0;
			CheckBox checkBox4 = new CheckBox();
			checkBox4.Name = "ViewportStretchCheckBox";
			control = checkBox4;
			context.RobustNameScope.Register("ViewportStretchCheckBox", control);
			checkBox4.Text = (string)new LocExtension("ui-options-vp-stretch").ProvideValue();
			control = checkBox4;
			boxContainer6.XamlChildren.Add(control);
			BoxContainer boxContainer7 = new BoxContainer();
			boxContainer7.Name = "ViewportScaleBox";
			control = boxContainer7;
			context.RobustNameScope.Register("ViewportScaleBox", control);
			boxContainer7.Orientation = 0;
			Label label = new Label();
			label.Name = "ViewportScaleText";
			control = label;
			context.RobustNameScope.Register("ViewportScaleText", control);
			label.Margin = new Thickness(8f, 0f, 8f, 0f);
			control = label;
			boxContainer7.XamlChildren.Add(control);
			Slider slider = new Slider();
			slider.Name = "ViewportScaleSlider";
			control = slider;
			context.RobustNameScope.Register("ViewportScaleSlider", control);
			slider.MinValue = 1f;
			slider.MaxValue = 5f;
			slider.Rounded = true;
			slider.MinWidth = 200f;
			control = slider;
			boxContainer7.XamlChildren.Add(control);
			control = boxContainer7;
			boxContainer6.XamlChildren.Add(control);
			control = boxContainer6;
			boxContainer2.XamlChildren.Add(control);
			BoxContainer boxContainer8 = new BoxContainer();
			boxContainer8.Orientation = 0;
			Label label2 = new Label();
			label2.Name = "ViewportWidthSliderDisplay";
			control = label2;
			context.RobustNameScope.Register("ViewportWidthSliderDisplay", control);
			control = label2;
			boxContainer8.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(4f, 0f)
			};
			boxContainer8.XamlChildren.Add(control);
			Slider slider2 = new Slider();
			slider2.Name = "ViewportWidthSlider";
			control = slider2;
			context.RobustNameScope.Register("ViewportWidthSlider", control);
			slider2.Rounded = true;
			slider2.MinWidth = 200f;
			control = slider2;
			boxContainer8.XamlChildren.Add(control);
			control = boxContainer8;
			boxContainer2.XamlChildren.Add(control);
			BoxContainer boxContainer9 = new BoxContainer();
			boxContainer9.Orientation = 0;
			control = new Label
			{
				Text = (string)new LocExtension("ui-options-hud-layout").ProvideValue()
			};
			boxContainer9.XamlChildren.Add(control);
			control = new Control
			{
				MinSize = new Vector2(4f, 0f)
			};
			boxContainer9.XamlChildren.Add(control);
			OptionButton optionButton4 = new OptionButton();
			optionButton4.Name = "HudLayoutOption";
			control = optionButton4;
			context.RobustNameScope.Register("HudLayoutOption", control);
			control = optionButton4;
			boxContainer9.XamlChildren.Add(control);
			Label label3 = new Label();
			label3.Name = "HudLayoutWarningText";
			control = label3;
			context.RobustNameScope.Register("HudLayoutWarningText", control);
			label3.Text = (string)new LocExtension("ui-options-obsolete-interface-warning").ProvideValue();
			label3.Align = 2;
			label3.FontColorOverride = new Color?(Color.FromXaml("#ff0000"));
			label3.Visible = false;
			control = label3;
			boxContainer9.XamlChildren.Add(control);
			control = boxContainer9;
			boxContainer2.XamlChildren.Add(control);
			CheckBox checkBox5 = new CheckBox();
			checkBox5.Name = "IntegerScalingCheckBox";
			control = checkBox5;
			context.RobustNameScope.Register("IntegerScalingCheckBox", control);
			checkBox5.Text = (string)new LocExtension("ui-options-vp-integer-scaling").ProvideValue();
			checkBox5.ToolTip = (string)new LocExtension("ui-options-vp-integer-scaling-tooltip").ProvideValue();
			control = checkBox5;
			boxContainer2.XamlChildren.Add(control);
			CheckBox checkBox6 = new CheckBox();
			checkBox6.Name = "ViewportLowResCheckBox";
			control = checkBox6;
			context.RobustNameScope.Register("ViewportLowResCheckBox", control);
			checkBox6.Text = (string)new LocExtension("ui-options-vp-low-res").ProvideValue();
			control = checkBox6;
			boxContainer2.XamlChildren.Add(control);
			CheckBox checkBox7 = new CheckBox();
			checkBox7.Name = "ParallaxLowQualityCheckBox";
			control = checkBox7;
			context.RobustNameScope.Register("ParallaxLowQualityCheckBox", control);
			checkBox7.Text = (string)new LocExtension("ui-options-parallax-low-quality").ProvideValue();
			control = checkBox7;
			boxContainer2.XamlChildren.Add(control);
			CheckBox checkBox8 = new CheckBox();
			checkBox8.Name = "FpsCounterCheckBox";
			control = checkBox8;
			context.RobustNameScope.Register("FpsCounterCheckBox", control);
			checkBox8.Text = (string)new LocExtension("ui-options-fps-counter").ProvideValue();
			control = checkBox8;
			boxContainer2.XamlChildren.Add(control);
			CheckBox checkBox9 = new CheckBox();
			checkBox9.Name = "FilmGrainCheckBox";
			control = checkBox9;
			context.RobustNameScope.Register("FilmGrainCheckBox", control);
			checkBox9.Text = (string)new LocExtension("ui-options-film-grain").ProvideValue();
			control = checkBox9;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			StripeBack stripeBack = new StripeBack();
			stripeBack.HasBottomEdge = false;
			stripeBack.HasMargins = false;
			Button button = new Button();
			button.Name = "ApplyButton";
			control = button;
			context.RobustNameScope.Register("ApplyButton", control);
			button.Text = (string)new LocExtension("ui-options-apply").ProvideValue();
			button.TextAlign = 1;
			button.HorizontalAlignment = 3;
			control = button;
			stripeBack.XamlChildren.Add(control);
			control = stripeBack;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06000D4C RID: 3404 RVA: 0x0004FA07 File Offset: 0x0004DC07
		private static void !XamlIlPopulateTrampoline(GraphicsTab A_0)
		{
			GraphicsTab.Populate:Content.Client.Options.UI.Tabs.GraphicsTab.xaml(null, A_0);
		}

		// Token: 0x0400069C RID: 1692
		[Nullable(1)]
		private static readonly float[] UIScaleOptions = new float[]
		{
			0f,
			0.75f,
			1f,
			1.25f,
			1.5f,
			1.75f,
			2f
		};

		// Token: 0x0400069D RID: 1693
		[Nullable(1)]
		[Dependency]
		private readonly IConfigurationManager _cfg;

		// Token: 0x0400069E RID: 1694
		[Nullable(1)]
		[Dependency]
		private readonly IPrototypeManager _prototypeManager;

		// Token: 0x0400069F RID: 1695
		[Nullable(1)]
		private readonly Dictionary<ScreenType, string> _screenTypeToLoc = new Dictionary<ScreenType, string>
		{
			{
				ScreenType.Default,
				Loc.GetString("ui-options-hud-theme-modernized")
			},
			{
				ScreenType.Separated,
				Loc.GetString("ui-options-hud-theme-classic")
			}
		};
	}
}
