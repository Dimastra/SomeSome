using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Shared.VendingMachines;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Prototypes;

namespace Content.Client.VendingMachines.UI
{
	// Token: 0x02000066 RID: 102
	[GenerateTypedNameReferences]
	public sealed class VendingMachineMenu : DefaultWindow
	{
		// Token: 0x1400000D RID: 13
		// (add) Token: 0x060001E4 RID: 484 RVA: 0x0000D6F4 File Offset: 0x0000B8F4
		// (remove) Token: 0x060001E5 RID: 485 RVA: 0x0000D72C File Offset: 0x0000B92C
		[Nullable(new byte[]
		{
			2,
			1
		})]
		[Nullable(new byte[]
		{
			2,
			1
		})]
		public event Action<ItemList.ItemListSelectedEventArgs> OnItemSelected;

		// Token: 0x060001E6 RID: 486 RVA: 0x0000D764 File Offset: 0x0000B964
		public VendingMachineMenu()
		{
			base.MinSize = new ValueTuple<float, float>(250f, 150f);
			base.SetSize = new ValueTuple<float, float>(450f, 150f);
			VendingMachineMenu.!XamlIlPopulateTrampoline(this);
			IoCManager.InjectDependencies<VendingMachineMenu>(this);
			this.VendingContents.OnItemSelected += delegate(ItemList.ItemListSelectedEventArgs args)
			{
				Action<ItemList.ItemListSelectedEventArgs> onItemSelected = this.OnItemSelected;
				if (onItemSelected == null)
				{
					return;
				}
				onItemSelected(args);
			};
		}

		// Token: 0x060001E7 RID: 487 RVA: 0x0000D7D0 File Offset: 0x0000B9D0
		[NullableContext(1)]
		public void Populate(List<VendingMachineInventoryEntry> inventory)
		{
			if (inventory.Count == 0)
			{
				this.VendingContents.Clear();
				string @string = Loc.GetString("vending-machine-component-try-eject-out-of-stock");
				this.VendingContents.AddItem(@string, null, true);
				this.SetSizeAfterUpdate(@string.Length);
				return;
			}
			while (inventory.Count != this.VendingContents.Count)
			{
				if (inventory.Count > this.VendingContents.Count)
				{
					this.VendingContents.AddItem(string.Empty, null, true);
				}
				else
				{
					this.VendingContents.RemoveAt(this.VendingContents.Count - 1);
				}
			}
			string text = string.Empty;
			SpriteSystem entitySystem = IoCManager.Resolve<IEntitySystemManager>().GetEntitySystem<SpriteSystem>();
			for (int i = 0; i < inventory.Count; i++)
			{
				VendingMachineInventoryEntry vendingMachineInventoryEntry = inventory[i];
				ItemList.Item item = this.VendingContents.get_IndexItem(i);
				item.Text = string.Empty;
				item.Icon = null;
				string text2 = vendingMachineInventoryEntry.ID;
				Texture icon = null;
				EntityPrototype entityPrototype;
				if (this._prototypeManager.TryIndex<EntityPrototype>(vendingMachineInventoryEntry.ID, ref entityPrototype))
				{
					text2 = entityPrototype.Name;
					icon = entitySystem.GetPrototypeIcon(entityPrototype).Default;
				}
				if (text2.Length > text.Length)
				{
					text = text2;
				}
				DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(3, 2);
				defaultInterpolatedStringHandler.AppendFormatted(text2);
				defaultInterpolatedStringHandler.AppendLiteral(" [");
				defaultInterpolatedStringHandler.AppendFormatted<uint>(vendingMachineInventoryEntry.Amount);
				defaultInterpolatedStringHandler.AppendLiteral("]");
				item.Text = defaultInterpolatedStringHandler.ToStringAndClear();
				item.Icon = icon;
			}
			this.SetSizeAfterUpdate(text.Length);
		}

		// Token: 0x060001E8 RID: 488 RVA: 0x0000D960 File Offset: 0x0000BB60
		private void SetSizeAfterUpdate(int longestEntryLength)
		{
			base.SetSize = new ValueTuple<float, float>((float)Math.Clamp((longestEntryLength + 2) * 12, 250, 300), (float)Math.Clamp(this.VendingContents.Count * 50, 150, 350));
		}

		// Token: 0x17000044 RID: 68
		// (get) Token: 0x060001E9 RID: 489 RVA: 0x0000D9B1 File Offset: 0x0000BBB1
		private ItemList VendingContents
		{
			get
			{
				return base.FindControl<ItemList>("VendingContents");
			}
		}

		// Token: 0x060001EB RID: 491 RVA: 0x0000D9D4 File Offset: 0x0000BBD4
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.VendingMachines.UI.VendingMachineMenu.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			ItemList itemList = new ItemList();
			itemList.Name = "VendingContents";
			Control control = itemList;
			context.RobustNameScope.Register("VendingContents", control);
			itemList.SizeFlagsStretchRatio = 8f;
			itemList.VerticalExpand = true;
			control = itemList;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x060001EC RID: 492 RVA: 0x0000DAA1 File Offset: 0x0000BCA1
		private static void !XamlIlPopulateTrampoline(VendingMachineMenu A_0)
		{
			VendingMachineMenu.Populate:Content.Client.VendingMachines.UI.VendingMachineMenu.xaml(null, A_0);
		}

		// Token: 0x0400013F RID: 319
		[Nullable(1)]
		[Dependency]
		private readonly IPrototypeManager _prototypeManager;
	}
}
