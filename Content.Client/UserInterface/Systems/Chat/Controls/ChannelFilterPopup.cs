using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Shared.Chat;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.Maths;

namespace Content.Client.UserInterface.Systems.Chat.Controls
{
	// Token: 0x020000A9 RID: 169
	[GenerateTypedNameReferences]
	public sealed class ChannelFilterPopup : Popup
	{
		// Token: 0x1400001D RID: 29
		// (add) Token: 0x06000458 RID: 1112 RVA: 0x000190E0 File Offset: 0x000172E0
		// (remove) Token: 0x06000459 RID: 1113 RVA: 0x00019118 File Offset: 0x00017318
		[Nullable(2)]
		[method: NullableContext(2)]
		[Nullable(2)]
		public event Action<ChatChannel, bool> OnChannelFilter;

		// Token: 0x0600045A RID: 1114 RVA: 0x0001914D File Offset: 0x0001734D
		public ChannelFilterPopup()
		{
			ChannelFilterPopup.!XamlIlPopulateTrampoline(this);
		}

		// Token: 0x0600045B RID: 1115 RVA: 0x00019168 File Offset: 0x00017368
		public bool IsActive(ChatChannel channel)
		{
			ChannelFilterCheckbox channelFilterCheckbox;
			return this._filterStates.TryGetValue(channel, out channelFilterCheckbox) && channelFilterCheckbox.Pressed;
		}

		// Token: 0x0600045C RID: 1116 RVA: 0x00019190 File Offset: 0x00017390
		public ChatChannel GetActive()
		{
			ChatChannel chatChannel = ChatChannel.None;
			foreach (KeyValuePair<ChatChannel, ChannelFilterCheckbox> keyValuePair in this._filterStates)
			{
				ChatChannel chatChannel2;
				ChannelFilterCheckbox channelFilterCheckbox;
				keyValuePair.Deconstruct(out chatChannel2, out channelFilterCheckbox);
				ChatChannel chatChannel3 = chatChannel2;
				ChannelFilterCheckbox channelFilterCheckbox2 = channelFilterCheckbox;
				if (!channelFilterCheckbox2.IsHidden && channelFilterCheckbox2.Pressed)
				{
					chatChannel |= chatChannel3;
				}
			}
			return chatChannel;
		}

		// Token: 0x0600045D RID: 1117 RVA: 0x00019208 File Offset: 0x00017408
		public void SetChannels(ChatChannel channels)
		{
			foreach (ChatChannel chatChannel in ChannelFilterPopup.ChannelFilterOrder)
			{
				ChannelFilterCheckbox channelFilterCheckbox;
				if (!this._filterStates.TryGetValue(chatChannel, out channelFilterCheckbox))
				{
					channelFilterCheckbox = new ChannelFilterCheckbox(chatChannel);
					this._filterStates.Add(chatChannel, channelFilterCheckbox);
					channelFilterCheckbox.OnPressed += this.CheckboxPressed;
					channelFilterCheckbox.Pressed = true;
				}
				if ((channels & chatChannel) == ChatChannel.None)
				{
					if (channelFilterCheckbox.Parent == this.FilterVBox)
					{
						this.FilterVBox.RemoveChild(channelFilterCheckbox);
					}
				}
				else if (channelFilterCheckbox.IsHidden)
				{
					this.FilterVBox.AddChild(channelFilterCheckbox);
				}
			}
		}

		// Token: 0x0600045E RID: 1118 RVA: 0x000192A0 File Offset: 0x000174A0
		[NullableContext(1)]
		private void CheckboxPressed(BaseButton.ButtonEventArgs args)
		{
			ChannelFilterCheckbox channelFilterCheckbox = (ChannelFilterCheckbox)args.Button;
			Action<ChatChannel, bool> onChannelFilter = this.OnChannelFilter;
			if (onChannelFilter == null)
			{
				return;
			}
			onChannelFilter(channelFilterCheckbox.Channel, channelFilterCheckbox.Pressed);
		}

		// Token: 0x0600045F RID: 1119 RVA: 0x000192D8 File Offset: 0x000174D8
		public void UpdateUnread(ChatChannel channel, int? unread)
		{
			ChannelFilterCheckbox channelFilterCheckbox;
			if (this._filterStates.TryGetValue(channel, out channelFilterCheckbox))
			{
				channelFilterCheckbox.UpdateUnreadCount(unread);
			}
		}

		// Token: 0x170000B0 RID: 176
		// (get) Token: 0x06000460 RID: 1120 RVA: 0x000192FC File Offset: 0x000174FC
		private PanelContainer FilterPopupPanel
		{
			get
			{
				return base.FindControl<PanelContainer>("FilterPopupPanel");
			}
		}

		// Token: 0x170000B1 RID: 177
		// (get) Token: 0x06000461 RID: 1121 RVA: 0x00019309 File Offset: 0x00017509
		private BoxContainer FilterVBox
		{
			get
			{
				return base.FindControl<BoxContainer>("FilterVBox");
			}
		}

		// Token: 0x06000462 RID: 1122 RVA: 0x00019316 File Offset: 0x00017516
		// Note: this type is marked as 'beforefieldinit'.
		static ChannelFilterPopup()
		{
			ChatChannel[] array = new ChatChannel[10];
			RuntimeHelpers.InitializeArray(array, fieldof(<PrivateImplementationDetails>.D0C69D7B04A444C18F882C1EFF831DEF59338F043CC04376AD1EEE02616AFBA8).FieldHandle);
			ChannelFilterPopup.ChannelFilterOrder = array;
		}

		// Token: 0x06000463 RID: 1123 RVA: 0x00019330 File Offset: 0x00017530
		static void xaml(IServiceProvider A_0, ChannelFilterPopup A_1)
		{
			XamlIlContext.Context<ChannelFilterPopup> context = new XamlIlContext.Context<ChannelFilterPopup>(A_0, null, "resm:Content.Client.UserInterface.Systems.Chat.Controls.ChannelFilterPopup.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			PanelContainer panelContainer = new PanelContainer();
			panelContainer.Name = "FilterPopupPanel";
			Control control = panelContainer;
			context.RobustNameScope.Register("FilterPopupPanel", control);
			string item = "BorderedWindowPanel";
			panelContainer.StyleClasses.Add(item);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 0;
			control = new Control
			{
				MinSize = new Vector2(4f, 0f)
			};
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Name = "FilterVBox";
			control = boxContainer2;
			context.RobustNameScope.Register("FilterVBox", control);
			boxContainer2.MinWidth = 110f;
			boxContainer2.Margin = new Thickness(0f, 10f, 0f, 10f);
			boxContainer2.Orientation = 1;
			boxContainer2.SeparationOverride = new int?(4);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			panelContainer.XamlChildren.Add(control);
			control = panelContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06000464 RID: 1124 RVA: 0x000194D3 File Offset: 0x000176D3
		private static void !XamlIlPopulateTrampoline(ChannelFilterPopup A_0)
		{
			ChannelFilterPopup.Populate:Content.Client.UserInterface.Systems.Chat.Controls.ChannelFilterPopup.xaml(null, A_0);
		}

		// Token: 0x04000217 RID: 535
		[Nullable(1)]
		private static readonly ChatChannel[] ChannelFilterOrder;

		// Token: 0x04000218 RID: 536
		[Nullable(1)]
		private readonly Dictionary<ChatChannel, ChannelFilterCheckbox> _filterStates = new Dictionary<ChatChannel, ChannelFilterCheckbox>();
	}
}
