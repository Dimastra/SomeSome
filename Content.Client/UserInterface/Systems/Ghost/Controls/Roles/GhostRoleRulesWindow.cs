using System;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Shared.CCVar;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.Configuration;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Client.UserInterface.Systems.Ghost.Controls.Roles
{
	// Token: 0x0200008B RID: 139
	[GenerateTypedNameReferences]
	public sealed class GhostRoleRulesWindow : DefaultWindow
	{
		// Token: 0x06000336 RID: 822 RVA: 0x00013D54 File Offset: 0x00011F54
		[NullableContext(1)]
		public GhostRoleRulesWindow(string rules, Action<BaseButton.ButtonEventArgs> requestAction)
		{
			GhostRoleRulesWindow.!XamlIlPopulateTrampoline(this);
			float cvar = this._cfg.GetCVar<float>(CCVars.GhostRoleTime);
			this._timer = cvar;
			if (cvar > 0f)
			{
				Button requestButton = this.RequestButton;
				string text = "ghost-roles-window-request-role-button-timer";
				ValueTuple<string, object>[] array = new ValueTuple<string, object>[1];
				int num = 0;
				string item = "time";
				DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(0, 1);
				defaultInterpolatedStringHandler.AppendFormatted<float>(this._timer, "0.0");
				array[num] = new ValueTuple<string, object>(item, defaultInterpolatedStringHandler.ToStringAndClear());
				requestButton.Text = Loc.GetString(text, array);
				this.TopBanner.SetMessage(FormattedMessage.FromMarkupPermissive(rules + "\n" + Loc.GetString("ghost-roles-window-rules-footer", new ValueTuple<string, object>[]
				{
					new ValueTuple<string, object>("time", cvar)
				})));
				this.RequestButton.Disabled = true;
			}
			this.RequestButton.OnPressed += requestAction;
		}

		// Token: 0x06000337 RID: 823 RVA: 0x00013E44 File Offset: 0x00012044
		protected override void FrameUpdate(FrameEventArgs args)
		{
			base.FrameUpdate(args);
			if (!this.RequestButton.Disabled)
			{
				return;
			}
			if ((double)this._timer > 0.0)
			{
				this._timer -= args.DeltaSeconds;
				Button requestButton = this.RequestButton;
				string text = "ghost-roles-window-request-role-button-timer";
				ValueTuple<string, object>[] array = new ValueTuple<string, object>[1];
				int num = 0;
				string item = "time";
				DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(0, 1);
				defaultInterpolatedStringHandler.AppendFormatted<float>(this._timer, "0.0");
				array[num] = new ValueTuple<string, object>(item, defaultInterpolatedStringHandler.ToStringAndClear());
				requestButton.Text = Loc.GetString(text, array);
				return;
			}
			this.RequestButton.Disabled = false;
			this.RequestButton.Text = Loc.GetString("ghost-roles-window-request-role-button");
		}

		// Token: 0x17000089 RID: 137
		// (get) Token: 0x06000338 RID: 824 RVA: 0x00013EFC File Offset: 0x000120FC
		private RichTextLabel TopBanner
		{
			get
			{
				return base.FindControl<RichTextLabel>("TopBanner");
			}
		}

		// Token: 0x1700008A RID: 138
		// (get) Token: 0x06000339 RID: 825 RVA: 0x00013B84 File Offset: 0x00011D84
		private Button RequestButton
		{
			get
			{
				return base.FindControl<Button>("RequestButton");
			}
		}

		// Token: 0x0600033A RID: 826 RVA: 0x00013F0C File Offset: 0x0001210C
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.UserInterface.Systems.Ghost.Controls.Roles.GhostRoleRulesWindow.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Title = (string)new LocExtension("ghost-roles-window-title").ProvideValue();
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			boxContainer.HorizontalExpand = true;
			RichTextLabel richTextLabel = new RichTextLabel();
			richTextLabel.Name = "TopBanner";
			Control control = richTextLabel;
			context.RobustNameScope.Register("TopBanner", control);
			richTextLabel.VerticalExpand = true;
			control = richTextLabel;
			boxContainer.XamlChildren.Add(control);
			Button button = new Button();
			button.Name = "RequestButton";
			control = button;
			context.RobustNameScope.Register("RequestButton", control);
			button.Text = (string)new LocExtension("ghost-roles-window-request-role-button").ProvideValue();
			button.Disabled = true;
			button.TextAlign = 1;
			button.HorizontalAlignment = 2;
			button.VerticalAlignment = 2;
			control = button;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x0600033B RID: 827 RVA: 0x0001409F File Offset: 0x0001229F
		private static void !XamlIlPopulateTrampoline(GhostRoleRulesWindow A_0)
		{
			GhostRoleRulesWindow.Populate:Content.Client.UserInterface.Systems.Ghost.Controls.Roles.GhostRoleRulesWindow.xaml(null, A_0);
		}

		// Token: 0x04000196 RID: 406
		[Nullable(1)]
		[Dependency]
		private readonly IConfigurationManager _cfg = IoCManager.Resolve<IConfigurationManager>();

		// Token: 0x04000197 RID: 407
		private float _timer;
	}
}
