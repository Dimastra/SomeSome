using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.UserInterface.Controls;
using Content.Shared.Medical.SuitSensor;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Map;
using Robust.Shared.Maths;
using Robust.Shared.Timing;

namespace Content.Client.Medical.CrewMonitoring
{
	// Token: 0x02000238 RID: 568
	[NullableContext(1)]
	[Nullable(0)]
	[GenerateTypedNameReferences]
	public sealed class CrewMonitoringWindow : DefaultWindow
	{
		// Token: 0x06000E7A RID: 3706 RVA: 0x000574AF File Offset: 0x000556AF
		public CrewMonitoringWindow()
		{
			CrewMonitoringWindow.!XamlIlPopulateTrampoline(this);
			this._eye = IoCManager.Resolve<IEyeManager>();
			this._entityManager = IoCManager.Resolve<IEntityManager>();
		}

		// Token: 0x06000E7B RID: 3707 RVA: 0x000574EC File Offset: 0x000556EC
		public void ShowSensors(List<SuitSensorStatus> stSensors, Vector2 worldPosition, bool snap, float precision)
		{
			this.ClearAllSensors();
			foreach (SuitSensorStatus suitSensorStatus in from a in stSensors
			orderby a.Name
			select a)
			{
				Label label = new Label
				{
					Text = suitSensorStatus.Name + " (" + suitSensorStatus.Job + ")"
				};
				label.HorizontalExpand = true;
				this.SensorsTable.AddChild(label);
				this._rowsContent.Add(label);
				string text = Loc.GetString(suitSensorStatus.IsAlive ? "crew-monitoring-user-interface-alive" : "crew-monitoring-user-interface-dead");
				if (suitSensorStatus.TotalDamage != null)
				{
					string str = text;
					DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(3, 1);
					defaultInterpolatedStringHandler.AppendLiteral(" (");
					defaultInterpolatedStringHandler.AppendFormatted<int?>(suitSensorStatus.TotalDamage);
					defaultInterpolatedStringHandler.AppendLiteral(")");
					text = str + defaultInterpolatedStringHandler.ToStringAndClear();
				}
				Label label2 = new Label
				{
					Text = text
				};
				this.SensorsTable.AddChild(label2);
				this._rowsContent.Add(label2);
				BoxContainer positionBox = this.GetPositionBox(suitSensorStatus.Coordinates, worldPosition, snap, precision);
				this.SensorsTable.AddChild(positionBox);
				this._rowsContent.Add(positionBox);
			}
		}

		// Token: 0x06000E7C RID: 3708 RVA: 0x00057668 File Offset: 0x00055868
		private BoxContainer GetPositionBox(EntityCoordinates? coordinates, Vector2 sensorPosition, bool snap, float precision)
		{
			BoxContainer boxContainer = new BoxContainer
			{
				Orientation = 0
			};
			if (coordinates == null)
			{
				DirectionIcon directionIcon = new DirectionIcon
				{
					SetSize = new ValueTuple<float, float>((float)CrewMonitoringWindow.IconSize, (float)CrewMonitoringWindow.IconSize),
					Margin = new Thickness(0f, 0f, 4f, 0f)
				};
				boxContainer.AddChild(directionIcon);
				boxContainer.AddChild(new Label
				{
					Text = Loc.GetString("crew-monitoring-user-interface-no-info")
				});
			}
			else
			{
				Vector2i vector2i = (Vector2i)coordinates.Value.Position;
				Vector2 position = coordinates.Value.ToMap(this._entityManager).Position;
				DirectionIcon directionIcon2 = new DirectionIcon(snap, precision)
				{
					SetSize = new ValueTuple<float, float>((float)CrewMonitoringWindow.IconSize, (float)CrewMonitoringWindow.IconSize),
					Margin = new Thickness(0f, 0f, 4f, 0f)
				};
				boxContainer.AddChild(directionIcon2);
				boxContainer.AddChild(new Label
				{
					Text = vector2i.ToString()
				});
				this._directionIcons.Add(new ValueTuple<DirectionIcon, Vector2>(directionIcon2, position - sensorPosition));
			}
			return boxContainer;
		}

		// Token: 0x06000E7D RID: 3709 RVA: 0x000577A8 File Offset: 0x000559A8
		protected override void FrameUpdate(FrameEventArgs args)
		{
			foreach (ValueTuple<DirectionIcon, Vector2> valueTuple in this._directionIcons)
			{
				DirectionIcon item = valueTuple.Item1;
				Vector2 item2 = valueTuple.Item2;
				item.UpdateDirection(item2, -this._eye.CurrentEye.Rotation);
			}
		}

		// Token: 0x06000E7E RID: 3710 RVA: 0x0005781C File Offset: 0x00055A1C
		private void ClearAllSensors()
		{
			foreach (Control control in this._rowsContent)
			{
				this.SensorsTable.RemoveChild(control);
			}
			this._rowsContent.Clear();
		}

		// Token: 0x17000314 RID: 788
		// (get) Token: 0x06000E7F RID: 3711 RVA: 0x00057880 File Offset: 0x00055A80
		[Nullable(0)]
		private GridContainer SensorsTable
		{
			[NullableContext(0)]
			get
			{
				return base.FindControl<GridContainer>("SensorsTable");
			}
		}

		// Token: 0x06000E81 RID: 3713 RVA: 0x00057898 File Offset: 0x00055A98
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.Medical.CrewMonitoring.CrewMonitoringWindow.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Title = (string)new LocExtension("crew-monitoring-user-interface-title").ProvideValue();
			A_1.SetSize = new Vector2(775f, 400f);
			ScrollContainer scrollContainer = new ScrollContainer();
			scrollContainer.HorizontalExpand = true;
			scrollContainer.VerticalExpand = true;
			GridContainer gridContainer = new GridContainer();
			gridContainer.Name = "SensorsTable";
			Control control = gridContainer;
			context.RobustNameScope.Register("SensorsTable", control);
			gridContainer.HorizontalExpand = true;
			gridContainer.VerticalExpand = true;
			gridContainer.HSeparationOverride = new int?(5);
			gridContainer.VSeparationOverride = new int?(20);
			gridContainer.Columns = 3;
			Label label = new Label();
			label.Text = (string)new LocExtension("crew-monitoring-user-interface-name").ProvideValue();
			string item = "LabelHeading";
			label.StyleClasses.Add(item);
			control = label;
			gridContainer.XamlChildren.Add(control);
			Label label2 = new Label();
			label2.Text = (string)new LocExtension("crew-monitoring-user-interface-status").ProvideValue();
			item = "LabelHeading";
			label2.StyleClasses.Add(item);
			control = label2;
			gridContainer.XamlChildren.Add(control);
			Label label3 = new Label();
			label3.Text = (string)new LocExtension("crew-monitoring-user-interface-location").ProvideValue();
			item = "LabelHeading";
			label3.StyleClasses.Add(item);
			control = label3;
			gridContainer.XamlChildren.Add(control);
			control = gridContainer;
			scrollContainer.XamlChildren.Add(control);
			control = scrollContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06000E82 RID: 3714 RVA: 0x00057AD3 File Offset: 0x00055CD3
		private static void !XamlIlPopulateTrampoline(CrewMonitoringWindow A_0)
		{
			CrewMonitoringWindow.Populate:Content.Client.Medical.CrewMonitoring.CrewMonitoringWindow.xaml(null, A_0);
		}

		// Token: 0x04000734 RID: 1844
		private List<Control> _rowsContent = new List<Control>();

		// Token: 0x04000735 RID: 1845
		[TupleElementNames(new string[]
		{
			"Icon",
			"Position"
		})]
		[Nullable(new byte[]
		{
			1,
			0,
			1
		})]
		private List<ValueTuple<DirectionIcon, Vector2>> _directionIcons = new List<ValueTuple<DirectionIcon, Vector2>>();

		// Token: 0x04000736 RID: 1846
		private readonly IEyeManager _eye;

		// Token: 0x04000737 RID: 1847
		private readonly IEntityManager _entityManager;

		// Token: 0x04000738 RID: 1848
		public static int IconSize = 16;
	}
}
