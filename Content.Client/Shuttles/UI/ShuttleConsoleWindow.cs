using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.Computer;
using Content.Client.UserInterface.Controls;
using Content.Shared.Shuttles.BUIStates;
using Content.Shared.Shuttles.Systems;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Map;
using Robust.Shared.Maths;
using Robust.Shared.Physics.Components;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Client.Shuttles.UI
{
	// Token: 0x0200014F RID: 335
	[GenerateTypedNameReferences]
	public sealed class ShuttleConsoleWindow : FancyWindow, IComputerWindow<ShuttleConsoleBoundInterfaceState>
	{
		// Token: 0x060008D0 RID: 2256 RVA: 0x00033D34 File Offset: 0x00031F34
		public ShuttleConsoleWindow()
		{
			ShuttleConsoleWindow.!XamlIlPopulateTrampoline(this);
			this._entManager = IoCManager.Resolve<IEntityManager>();
			this._timing = IoCManager.Resolve<IGameTiming>();
			this.OnRadarRangeChange(this.RadarScreen.RadarRange);
			RadarControl radarScreen = this.RadarScreen;
			radarScreen.OnRadarRangeChanged = (Action<float>)Delegate.Combine(radarScreen.OnRadarRangeChanged, new Action<float>(this.OnRadarRangeChange));
			this.IFFToggle.OnToggled += new Action<BaseButton.ButtonToggledEventArgs>(this.OnIFFTogglePressed);
			this.IFFToggle.Pressed = this.RadarScreen.ShowIFF;
			this.DockToggle.OnToggled += new Action<BaseButton.ButtonToggledEventArgs>(this.OnDockTogglePressed);
			this.DockToggle.Pressed = this.RadarScreen.ShowDocks;
			this.UndockButton.OnPressed += this.OnUndockPressed;
		}

		// Token: 0x060008D1 RID: 2257 RVA: 0x00033E24 File Offset: 0x00032024
		private void OnRadarRangeChange(float value)
		{
			Label radarRange = this.RadarRange;
			DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(0, 1);
			defaultInterpolatedStringHandler.AppendFormatted<float>(value, "0");
			radarRange.Text = defaultInterpolatedStringHandler.ToStringAndClear();
		}

		// Token: 0x060008D2 RID: 2258 RVA: 0x00033E59 File Offset: 0x00032059
		[NullableContext(1)]
		private void OnIFFTogglePressed(BaseButton.ButtonEventArgs args)
		{
			RadarControl radarScreen = this.RadarScreen;
			radarScreen.ShowIFF = !radarScreen.ShowIFF;
			args.Button.Pressed = this.RadarScreen.ShowIFF;
		}

		// Token: 0x060008D3 RID: 2259 RVA: 0x00033E85 File Offset: 0x00032085
		[NullableContext(1)]
		private void OnDockTogglePressed(BaseButton.ButtonEventArgs args)
		{
			RadarControl radarScreen = this.RadarScreen;
			radarScreen.ShowDocks = !radarScreen.ShowDocks;
			args.Button.Pressed = this.RadarScreen.ShowDocks;
		}

		// Token: 0x060008D4 RID: 2260 RVA: 0x00033EB1 File Offset: 0x000320B1
		[NullableContext(1)]
		private void OnUndockPressed(BaseButton.ButtonEventArgs args)
		{
			if (this.DockingScreen.ViewedDock == null)
			{
				return;
			}
			Action<EntityUid> undockPressed = this.UndockPressed;
			if (undockPressed == null)
			{
				return;
			}
			undockPressed(this.DockingScreen.ViewedDock.Value);
		}

		// Token: 0x060008D5 RID: 2261 RVA: 0x00033EE8 File Offset: 0x000320E8
		public void SetMatrix(EntityCoordinates? coordinates, Angle? angle)
		{
			this._shuttleUid = ((coordinates != null) ? new EntityUid?(coordinates.GetValueOrDefault().EntityId) : null);
			this.RadarScreen.SetMatrix(coordinates, angle);
		}

		// Token: 0x060008D6 RID: 2262 RVA: 0x00033F30 File Offset: 0x00032130
		[NullableContext(1)]
		public void UpdateState(ShuttleConsoleBoundInterfaceState scc)
		{
			this.UpdateDocks(scc.Docks);
			this.UpdateFTL(scc.Destinations, scc.FTLState, scc.FTLTime);
			this.RadarScreen.UpdateState(scc);
			Label maxRadarRange = this.MaxRadarRange;
			DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(0, 1);
			defaultInterpolatedStringHandler.AppendFormatted<float>(scc.MaxRange, "0");
			maxRadarRange.Text = defaultInterpolatedStringHandler.ToStringAndClear();
		}

		// Token: 0x060008D7 RID: 2263 RVA: 0x00033F9C File Offset: 0x0003219C
		private void UpdateFTL([TupleElementNames(new string[]
		{
			"Entity",
			"Destination",
			"Enabled"
		})] [Nullable(new byte[]
		{
			1,
			0,
			1
		})] List<ValueTuple<EntityUid, string, bool>> destinations, FTLState state, TimeSpan time)
		{
			this.HyperspaceDestinations.DisposeAllChildren();
			this._destinations.Clear();
			if (destinations.Count == 0)
			{
				this.HyperspaceDestinations.AddChild(new Label
				{
					Text = Loc.GetString("shuttle-console-hyperspace-none"),
					HorizontalAlignment = 2
				});
			}
			else
			{
				destinations.Sort(([TupleElementNames(new string[]
				{
					"Entity",
					"Destination",
					"Enabled"
				})] [Nullable(new byte[]
				{
					0,
					1
				})] ValueTuple<EntityUid, string, bool> x, [TupleElementNames(new string[]
				{
					"Entity",
					"Destination",
					"Enabled"
				})] [Nullable(new byte[]
				{
					0,
					1
				})] ValueTuple<EntityUid, string, bool> y) => string.Compare(x.Item2, y.Item2, StringComparison.Ordinal));
				foreach (ValueTuple<EntityUid, string, bool> valueTuple in destinations)
				{
					Button button = new Button
					{
						Disabled = !valueTuple.Item3,
						Text = valueTuple.Item2
					};
					this._destinations[button] = valueTuple.Item1;
					button.OnPressed += this.OnHyperspacePressed;
					this.HyperspaceDestinations.AddChild(button);
				}
			}
			string @string;
			switch (state)
			{
			case Content.Shared.Shuttles.Systems.FTLState.Available:
				@string = Loc.GetString("shuttle-console-ftl-available");
				goto IL_160;
			case Content.Shared.Shuttles.Systems.FTLState.Starting:
				@string = Loc.GetString("shuttle-console-ftl-starting");
				goto IL_160;
			case Content.Shared.Shuttles.Systems.FTLState.Available | Content.Shared.Shuttles.Systems.FTLState.Starting:
				break;
			case Content.Shared.Shuttles.Systems.FTLState.Travelling:
				@string = Loc.GetString("shuttle-console-ftl-travelling");
				goto IL_160;
			default:
				if (state == Content.Shared.Shuttles.Systems.FTLState.Arriving)
				{
					@string = Loc.GetString("shuttle-console-ftl-arriving");
					goto IL_160;
				}
				if (state == Content.Shared.Shuttles.Systems.FTLState.Cooldown)
				{
					@string = Loc.GetString("shuttle-console-ftl-cooldown");
					goto IL_160;
				}
				break;
			}
			throw new ArgumentOutOfRangeException("state", state, null);
			IL_160:
			this.FTLState.Text = @string;
			time += TimeSpan.FromSeconds(0.3);
			this.FTLTime = time;
			this.FTLTimer.Text = this.GetFTLText();
		}

		// Token: 0x060008D8 RID: 2264 RVA: 0x00034154 File Offset: 0x00032354
		[NullableContext(1)]
		private string GetFTLText()
		{
			DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(0, 1);
			defaultInterpolatedStringHandler.AppendFormatted<double>(Math.Max(0.0, (this.FTLTime - this._timing.CurTime).TotalSeconds), "0.0");
			return defaultInterpolatedStringHandler.ToStringAndClear();
		}

		// Token: 0x060008D9 RID: 2265 RVA: 0x000341AC File Offset: 0x000323AC
		[NullableContext(1)]
		private void OnHyperspacePressed(BaseButton.ButtonEventArgs obj)
		{
			EntityUid obj2 = this._destinations[obj.Button];
			Action<EntityUid> destinationPressed = this.DestinationPressed;
			if (destinationPressed == null)
			{
				return;
			}
			destinationPressed(obj2);
		}

		// Token: 0x060008DA RID: 2266 RVA: 0x000341DC File Offset: 0x000323DC
		[NullableContext(1)]
		private void UpdateDocks(List<DockingInterfaceState> docks)
		{
			this._docks.Clear();
			foreach (DockingInterfaceState dockingInterfaceState in docks)
			{
				Extensions.GetOrNew<EntityUid, List<DockingInterfaceState>>(this._docks, dockingInterfaceState.Coordinates.EntityId).Add(dockingInterfaceState);
			}
			this.DockPorts.DisposeAllChildren();
			this.DockingScreen.Docks = this._docks;
			List<DockingInterfaceState> list;
			if (this._shuttleUid != null && this._docks.TryGetValue(this._shuttleUid.Value, out list))
			{
				int num = 1;
				using (List<DockingInterfaceState>.Enumerator enumerator = list.GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						DockingInterfaceState state = enumerator.Current;
						bool flag = state.Entity == this.DockingScreen.ViewedDock;
						string item;
						if (state.Connected)
						{
							item = Loc.GetString("shuttle-console-docked", new ValueTuple<string, object>[]
							{
								new ValueTuple<string, object>("index", num)
							});
						}
						else
						{
							DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(0, 1);
							defaultInterpolatedStringHandler.AppendFormatted<int>(num);
							item = defaultInterpolatedStringHandler.ToStringAndClear();
						}
						Button button = new Button
						{
							Text = Loc.GetString("shuttle-console-dock-button", new ValueTuple<string, object>[]
							{
								new ValueTuple<string, object>("suffix", item)
							}),
							ToggleMode = true,
							Pressed = flag,
							Margin = new Thickness(0f, 1f)
						};
						if (flag)
						{
							this._selectedDock = button;
						}
						button.OnMouseEntered += delegate(GUIMouseHoverEventArgs args)
						{
							this.OnDockMouseEntered(args, state);
						};
						button.OnMouseExited += delegate(GUIMouseHoverEventArgs args)
						{
							this.OnDockMouseExited(args, state);
						};
						button.OnToggled += delegate(BaseButton.ButtonToggledEventArgs args)
						{
							this.OnDockToggled(args, state);
						};
						this.DockPorts.AddChild(button);
						num++;
					}
				}
			}
		}

		// Token: 0x060008DB RID: 2267 RVA: 0x00034440 File Offset: 0x00032640
		[NullableContext(1)]
		private void OnDockMouseEntered(GUIMouseHoverEventArgs obj, DockingInterfaceState state)
		{
			this.RadarScreen.HighlightedDock = new EntityUid?(state.Entity);
		}

		// Token: 0x060008DC RID: 2268 RVA: 0x00034458 File Offset: 0x00032658
		[NullableContext(1)]
		private void OnDockMouseExited(GUIMouseHoverEventArgs obj, DockingInterfaceState state)
		{
			this.RadarScreen.HighlightedDock = null;
		}

		// Token: 0x060008DD RID: 2269 RVA: 0x0003446C File Offset: 0x0003266C
		[NullableContext(1)]
		private void OnDockToggled(BaseButton.ButtonEventArgs obj, DockingInterfaceState state)
		{
			EntityUid entity = state.Entity;
			if (this._selectedDock != null)
			{
				if (this.DockingScreen.ViewedDock != null)
				{
					EntityUid? viewedDock = this.DockingScreen.ViewedDock;
					EntityUid entity2 = state.Entity;
					if (viewedDock == null || (viewedDock != null && viewedDock.GetValueOrDefault() != entity2))
					{
						Action<EntityUid> stopAutodockPressed = this.StopAutodockPressed;
						if (stopAutodockPressed != null)
						{
							stopAutodockPressed(this.DockingScreen.ViewedDock.Value);
						}
					}
				}
				this._selectedDock.Pressed = false;
				this._selectedDock = null;
			}
			if (!obj.Button.Pressed)
			{
				if (this.DockingScreen.ViewedDock != null)
				{
					Action<EntityUid> stopAutodockPressed2 = this.StopAutodockPressed;
					if (stopAutodockPressed2 != null)
					{
						stopAutodockPressed2(this.DockingScreen.ViewedDock.Value);
					}
					this.DockingScreen.ViewedDock = null;
				}
				this.UndockButton.Disabled = true;
				this.DockingScreen.Visible = false;
				this.RadarScreen.Visible = true;
				return;
			}
			if (this._shuttleUid != null)
			{
				this.DockingScreen.Coordinates = new EntityCoordinates?(state.Coordinates);
				this.DockingScreen.Angle = new Angle?(state.Angle);
			}
			else
			{
				this.DockingScreen.Coordinates = null;
				this.DockingScreen.Angle = null;
			}
			this.UndockButton.Disabled = false;
			this.RadarScreen.Visible = false;
			this.DockingScreen.Visible = true;
			this.DockingScreen.ViewedDock = new EntityUid?(entity);
			Action<EntityUid> startAutodockPressed = this.StartAutodockPressed;
			if (startAutodockPressed != null)
			{
				startAutodockPressed(entity);
			}
			this.DockingScreen.GridEntity = this._shuttleUid;
			this._selectedDock = obj.Button;
		}

		// Token: 0x060008DE RID: 2270 RVA: 0x00034642 File Offset: 0x00032842
		public override void Close()
		{
			base.Close();
			if (this.DockingScreen.ViewedDock != null)
			{
				Action<EntityUid> stopAutodockPressed = this.StopAutodockPressed;
				if (stopAutodockPressed == null)
				{
					return;
				}
				stopAutodockPressed(this.DockingScreen.ViewedDock.Value);
			}
		}

		// Token: 0x060008DF RID: 2271 RVA: 0x0003467C File Offset: 0x0003287C
		[NullableContext(1)]
		protected override void Draw(DrawingHandleScreen handle)
		{
			base.Draw(handle);
			PhysicsComponent physicsComponent;
			TransformComponent transformComponent;
			if (!this._entManager.TryGetComponent<PhysicsComponent>(this._shuttleUid, ref physicsComponent) || !this._entManager.TryGetComponent<TransformComponent>(this._shuttleUid, ref transformComponent))
			{
				return;
			}
			MetaDataComponent metaDataComponent;
			if (this._entManager.TryGetComponent<MetaDataComponent>(this._shuttleUid, ref metaDataComponent) && metaDataComponent.EntityPaused)
			{
				this.FTLTime += this._timing.FrameTime;
			}
			this.FTLTimer.Text = this.GetFTLText();
			ValueTuple<Vector2, Angle, Matrix3> worldPositionRotationMatrix = transformComponent.GetWorldPositionRotationMatrix();
			Angle item = worldPositionRotationMatrix.Item2;
			Matrix3 item2 = worldPositionRotationMatrix.Item3;
			Vector2 vector = item2.Transform(physicsComponent.LocalCenter);
			Angle angle = -item.Reduced();
			Label gridPosition = this.GridPosition;
			DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(2, 2);
			defaultInterpolatedStringHandler.AppendFormatted<float>(vector.X, "0.0");
			defaultInterpolatedStringHandler.AppendLiteral(", ");
			defaultInterpolatedStringHandler.AppendFormatted<float>(vector.Y, "0.0");
			gridPosition.Text = defaultInterpolatedStringHandler.ToStringAndClear();
			Label gridOrientation = this.GridOrientation;
			defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(0, 1);
			defaultInterpolatedStringHandler.AppendFormatted<double>(angle.Degrees, "0.0");
			gridOrientation.Text = defaultInterpolatedStringHandler.ToStringAndClear();
			Vector2 vector2 = physicsComponent.LinearVelocity;
			vector2 = angle.RotateVec(ref vector2);
			Label gridLinearVelocity = this.GridLinearVelocity;
			defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(2, 2);
			defaultInterpolatedStringHandler.AppendFormatted<float>(vector2.X, "0.0");
			defaultInterpolatedStringHandler.AppendLiteral(", ");
			defaultInterpolatedStringHandler.AppendFormatted<float>(vector2.Y, "0.0");
			gridLinearVelocity.Text = defaultInterpolatedStringHandler.ToStringAndClear();
			Label gridAngularVelocity = this.GridAngularVelocity;
			defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(0, 1);
			defaultInterpolatedStringHandler.AppendFormatted<float>(-physicsComponent.AngularVelocity, "0.0");
			gridAngularVelocity.Text = defaultInterpolatedStringHandler.ToStringAndClear();
		}

		// Token: 0x17000197 RID: 407
		// (get) Token: 0x060008E0 RID: 2272 RVA: 0x0003483F File Offset: 0x00032A3F
		private BoxContainer LeftDisplay
		{
			get
			{
				return base.FindControl<BoxContainer>("LeftDisplay");
			}
		}

		// Token: 0x17000198 RID: 408
		// (get) Token: 0x060008E1 RID: 2273 RVA: 0x0003484C File Offset: 0x00032A4C
		private Label DockingPortsLabel
		{
			get
			{
				return base.FindControl<Label>("DockingPortsLabel");
			}
		}

		// Token: 0x17000199 RID: 409
		// (get) Token: 0x060008E2 RID: 2274 RVA: 0x00034859 File Offset: 0x00032A59
		private BoxContainer DockPorts
		{
			get
			{
				return base.FindControl<BoxContainer>("DockPorts");
			}
		}

		// Token: 0x1700019A RID: 410
		// (get) Token: 0x060008E3 RID: 2275 RVA: 0x00034866 File Offset: 0x00032A66
		private Label HyperspaceLabel
		{
			get
			{
				return base.FindControl<Label>("HyperspaceLabel");
			}
		}

		// Token: 0x1700019B RID: 411
		// (get) Token: 0x060008E4 RID: 2276 RVA: 0x00034873 File Offset: 0x00032A73
		private BoxContainer HyperspaceDestinations
		{
			get
			{
				return base.FindControl<BoxContainer>("HyperspaceDestinations");
			}
		}

		// Token: 0x1700019C RID: 412
		// (get) Token: 0x060008E5 RID: 2277 RVA: 0x00032E6D File Offset: 0x0003106D
		private RadarControl RadarScreen
		{
			get
			{
				return base.FindControl<RadarControl>("RadarScreen");
			}
		}

		// Token: 0x1700019D RID: 413
		// (get) Token: 0x060008E6 RID: 2278 RVA: 0x00034880 File Offset: 0x00032A80
		private DockingControl DockingScreen
		{
			get
			{
				return base.FindControl<DockingControl>("DockingScreen");
			}
		}

		// Token: 0x1700019E RID: 414
		// (get) Token: 0x060008E7 RID: 2279 RVA: 0x0003488D File Offset: 0x00032A8D
		private BoxContainer RightDisplay
		{
			get
			{
				return base.FindControl<BoxContainer>("RightDisplay");
			}
		}

		// Token: 0x1700019F RID: 415
		// (get) Token: 0x060008E8 RID: 2280 RVA: 0x0003489A File Offset: 0x00032A9A
		private Label DisplayLabel
		{
			get
			{
				return base.FindControl<Label>("DisplayLabel");
			}
		}

		// Token: 0x170001A0 RID: 416
		// (get) Token: 0x060008E9 RID: 2281 RVA: 0x000348A7 File Offset: 0x00032AA7
		private BoxContainer ReadonlyDisplay
		{
			get
			{
				return base.FindControl<BoxContainer>("ReadonlyDisplay");
			}
		}

		// Token: 0x170001A1 RID: 417
		// (get) Token: 0x060008EA RID: 2282 RVA: 0x000348B4 File Offset: 0x00032AB4
		private Label FTLState
		{
			get
			{
				return base.FindControl<Label>("FTLState");
			}
		}

		// Token: 0x170001A2 RID: 418
		// (get) Token: 0x060008EB RID: 2283 RVA: 0x000348C1 File Offset: 0x00032AC1
		private Label FTLTimer
		{
			get
			{
				return base.FindControl<Label>("FTLTimer");
			}
		}

		// Token: 0x170001A3 RID: 419
		// (get) Token: 0x060008EC RID: 2284 RVA: 0x000348CE File Offset: 0x00032ACE
		private Label MaxRadarRange
		{
			get
			{
				return base.FindControl<Label>("MaxRadarRange");
			}
		}

		// Token: 0x170001A4 RID: 420
		// (get) Token: 0x060008ED RID: 2285 RVA: 0x000348DB File Offset: 0x00032ADB
		private Label RadarRange
		{
			get
			{
				return base.FindControl<Label>("RadarRange");
			}
		}

		// Token: 0x170001A5 RID: 421
		// (get) Token: 0x060008EE RID: 2286 RVA: 0x000348E8 File Offset: 0x00032AE8
		private Label GridPosition
		{
			get
			{
				return base.FindControl<Label>("GridPosition");
			}
		}

		// Token: 0x170001A6 RID: 422
		// (get) Token: 0x060008EF RID: 2287 RVA: 0x000348F5 File Offset: 0x00032AF5
		private Label GridOrientation
		{
			get
			{
				return base.FindControl<Label>("GridOrientation");
			}
		}

		// Token: 0x170001A7 RID: 423
		// (get) Token: 0x060008F0 RID: 2288 RVA: 0x00034902 File Offset: 0x00032B02
		private Label GridLinearVelocity
		{
			get
			{
				return base.FindControl<Label>("GridLinearVelocity");
			}
		}

		// Token: 0x170001A8 RID: 424
		// (get) Token: 0x060008F1 RID: 2289 RVA: 0x0003490F File Offset: 0x00032B0F
		private Label GridAngularVelocity
		{
			get
			{
				return base.FindControl<Label>("GridAngularVelocity");
			}
		}

		// Token: 0x170001A9 RID: 425
		// (get) Token: 0x060008F2 RID: 2290 RVA: 0x0003491C File Offset: 0x00032B1C
		private Button IFFToggle
		{
			get
			{
				return base.FindControl<Button>("IFFToggle");
			}
		}

		// Token: 0x170001AA RID: 426
		// (get) Token: 0x060008F3 RID: 2291 RVA: 0x00034929 File Offset: 0x00032B29
		private Button DockToggle
		{
			get
			{
				return base.FindControl<Button>("DockToggle");
			}
		}

		// Token: 0x170001AB RID: 427
		// (get) Token: 0x060008F4 RID: 2292 RVA: 0x00034936 File Offset: 0x00032B36
		private Button UndockButton
		{
			get
			{
				return base.FindControl<Button>("UndockButton");
			}
		}

		// Token: 0x060008F5 RID: 2293 RVA: 0x00034944 File Offset: 0x00032B44
		static void xaml(IServiceProvider A_0, FancyWindow A_1)
		{
			XamlIlContext.Context<FancyWindow> context = new XamlIlContext.Context<FancyWindow>(A_0, null, "resm:Content.Client.Shuttles.UI.ShuttleConsoleWindow.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Title = (string)new LocExtension("shuttle-console-window-title").ProvideValue();
			A_1.SetSize = new Vector2(1180f, 648f);
			A_1.MinSize = new Vector2(788f, 320f);
			GridContainer gridContainer = new GridContainer();
			gridContainer.Columns = 3;
			gridContainer.HorizontalAlignment = 0;
			gridContainer.Margin = new Thickness(5f, 5f, 5f, 5f);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Name = "LeftDisplay";
			Control control = boxContainer;
			context.RobustNameScope.Register("LeftDisplay", control);
			boxContainer.VerticalAlignment = 1;
			boxContainer.HorizontalAlignment = 1;
			boxContainer.MinWidth = 256f;
			boxContainer.MaxWidth = 256f;
			boxContainer.Align = 1;
			boxContainer.Orientation = 1;
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 1;
			StripeBack stripeBack = new StripeBack();
			Label label = new Label();
			label.Name = "DockingPortsLabel";
			control = label;
			context.RobustNameScope.Register("DockingPortsLabel", control);
			label.Text = (string)new LocExtension("shuttle-console-dock-label").ProvideValue();
			label.HorizontalAlignment = 2;
			control = label;
			stripeBack.XamlChildren.Add(control);
			control = stripeBack;
			boxContainer2.XamlChildren.Add(control);
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Name = "DockPorts";
			control = boxContainer3;
			context.RobustNameScope.Register("DockPorts", control);
			boxContainer3.Orientation = 1;
			control = boxContainer3;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer4 = new BoxContainer();
			boxContainer4.Orientation = 1;
			StripeBack stripeBack2 = new StripeBack();
			Label label2 = new Label();
			label2.Name = "HyperspaceLabel";
			control = label2;
			context.RobustNameScope.Register("HyperspaceLabel", control);
			label2.Text = (string)new LocExtension("shuttle-console-hyperspace-label").ProvideValue();
			label2.HorizontalAlignment = 2;
			control = label2;
			stripeBack2.XamlChildren.Add(control);
			control = stripeBack2;
			boxContainer4.XamlChildren.Add(control);
			BoxContainer boxContainer5 = new BoxContainer();
			boxContainer5.Name = "HyperspaceDestinations";
			control = boxContainer5;
			context.RobustNameScope.Register("HyperspaceDestinations", control);
			boxContainer5.Orientation = 1;
			control = boxContainer5;
			boxContainer4.XamlChildren.Add(control);
			control = boxContainer4;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			gridContainer.XamlChildren.Add(control);
			PanelContainer panelContainer = new PanelContainer();
			panelContainer.MinSize = new Vector2(256f, 256f);
			panelContainer.HorizontalAlignment = 0;
			panelContainer.HorizontalExpand = true;
			panelContainer.VerticalExpand = true;
			RadarControl radarControl = new RadarControl();
			radarControl.Name = "RadarScreen";
			control = radarControl;
			context.RobustNameScope.Register("RadarScreen", control);
			radarControl.MouseFilter = 0;
			radarControl.Margin = new Thickness(4f, 4f, 4f, 4f);
			radarControl.HorizontalExpand = true;
			radarControl.VerticalExpand = true;
			control = radarControl;
			panelContainer.XamlChildren.Add(control);
			DockingControl dockingControl = new DockingControl();
			dockingControl.Name = "DockingScreen";
			control = dockingControl;
			context.RobustNameScope.Register("DockingScreen", control);
			dockingControl.Visible = false;
			dockingControl.MouseFilter = 0;
			dockingControl.Margin = new Thickness(4f, 4f, 4f, 4f);
			dockingControl.HorizontalExpand = true;
			dockingControl.VerticalExpand = true;
			control = dockingControl;
			panelContainer.XamlChildren.Add(control);
			control = panelContainer;
			gridContainer.XamlChildren.Add(control);
			BoxContainer boxContainer6 = new BoxContainer();
			boxContainer6.Name = "RightDisplay";
			control = boxContainer6;
			context.RobustNameScope.Register("RightDisplay", control);
			boxContainer6.VerticalAlignment = 1;
			boxContainer6.HorizontalAlignment = 3;
			boxContainer6.MinWidth = 256f;
			boxContainer6.MaxWidth = 256f;
			boxContainer6.Align = 1;
			boxContainer6.Orientation = 1;
			StripeBack stripeBack3 = new StripeBack();
			Label label3 = new Label();
			label3.Name = "DisplayLabel";
			control = label3;
			context.RobustNameScope.Register("DisplayLabel", control);
			label3.Text = (string)new LocExtension("shuttle-console-display-label").ProvideValue();
			label3.HorizontalAlignment = 2;
			control = label3;
			stripeBack3.XamlChildren.Add(control);
			control = stripeBack3;
			boxContainer6.XamlChildren.Add(control);
			BoxContainer boxContainer7 = new BoxContainer();
			boxContainer7.Name = "ReadonlyDisplay";
			control = boxContainer7;
			context.RobustNameScope.Register("ReadonlyDisplay", control);
			GridContainer gridContainer2 = new GridContainer();
			gridContainer2.Columns = 2;
			gridContainer2.HorizontalAlignment = 0;
			gridContainer2.VerticalAlignment = 1;
			control = new Label
			{
				Text = (string)new LocExtension("shuttle-console-ftl-state").ProvideValue()
			};
			gridContainer2.XamlChildren.Add(control);
			Label label4 = new Label();
			label4.Name = "FTLState";
			control = label4;
			context.RobustNameScope.Register("FTLState", control);
			label4.Text = (string)new LocExtension("ftl-shuttle-console-available").ProvideValue();
			label4.HorizontalAlignment = 3;
			control = label4;
			gridContainer2.XamlChildren.Add(control);
			control = new Label
			{
				Text = (string)new LocExtension("shuttle-console-ftl-timer").ProvideValue()
			};
			gridContainer2.XamlChildren.Add(control);
			Label label5 = new Label();
			label5.Name = "FTLTimer";
			control = label5;
			context.RobustNameScope.Register("FTLTimer", control);
			label5.Text = "0.0";
			label5.HorizontalAlignment = 3;
			control = label5;
			gridContainer2.XamlChildren.Add(control);
			control = new Label
			{
				Text = (string)new LocExtension("shuttle-console-max-radar").ProvideValue()
			};
			gridContainer2.XamlChildren.Add(control);
			Label label6 = new Label();
			label6.Name = "MaxRadarRange";
			control = label6;
			context.RobustNameScope.Register("MaxRadarRange", control);
			label6.Text = "0.0";
			label6.HorizontalAlignment = 3;
			control = label6;
			gridContainer2.XamlChildren.Add(control);
			control = new Label
			{
				Text = (string)new LocExtension("shuttle-console-radar").ProvideValue()
			};
			gridContainer2.XamlChildren.Add(control);
			Label label7 = new Label();
			label7.Name = "RadarRange";
			control = label7;
			context.RobustNameScope.Register("RadarRange", control);
			label7.Text = "0.0";
			label7.HorizontalAlignment = 3;
			control = label7;
			gridContainer2.XamlChildren.Add(control);
			control = new Label
			{
				Text = (string)new LocExtension("shuttle-console-position").ProvideValue()
			};
			gridContainer2.XamlChildren.Add(control);
			Label label8 = new Label();
			label8.Name = "GridPosition";
			control = label8;
			context.RobustNameScope.Register("GridPosition", control);
			label8.Text = "0.0, 0.0";
			label8.Align = 2;
			control = label8;
			gridContainer2.XamlChildren.Add(control);
			control = new Label
			{
				Text = (string)new LocExtension("shuttle-console-orientation").ProvideValue()
			};
			gridContainer2.XamlChildren.Add(control);
			Label label9 = new Label();
			label9.Name = "GridOrientation";
			control = label9;
			context.RobustNameScope.Register("GridOrientation", control);
			label9.Text = "0.0";
			label9.Align = 2;
			control = label9;
			gridContainer2.XamlChildren.Add(control);
			control = new Label
			{
				Text = (string)new LocExtension("shuttle-console-linear-velocity").ProvideValue()
			};
			gridContainer2.XamlChildren.Add(control);
			Label label10 = new Label();
			label10.Name = "GridLinearVelocity";
			control = label10;
			context.RobustNameScope.Register("GridLinearVelocity", control);
			label10.Text = "0.0, 0.0";
			label10.Align = 2;
			control = label10;
			gridContainer2.XamlChildren.Add(control);
			control = new Label
			{
				Text = (string)new LocExtension("shuttle-console-angular-velocity").ProvideValue()
			};
			gridContainer2.XamlChildren.Add(control);
			Label label11 = new Label();
			label11.Name = "GridAngularVelocity";
			control = label11;
			context.RobustNameScope.Register("GridAngularVelocity", control);
			label11.Text = "0.0";
			label11.Align = 2;
			control = label11;
			gridContainer2.XamlChildren.Add(control);
			control = gridContainer2;
			boxContainer7.XamlChildren.Add(control);
			control = boxContainer7;
			boxContainer6.XamlChildren.Add(control);
			Button button = new Button();
			button.Name = "IFFToggle";
			control = button;
			context.RobustNameScope.Register("IFFToggle", control);
			button.Text = (string)new LocExtension("shuttle-console-iff-toggle").ProvideValue();
			button.TextAlign = 1;
			button.ToggleMode = true;
			control = button;
			boxContainer6.XamlChildren.Add(control);
			Button button2 = new Button();
			button2.Name = "DockToggle";
			control = button2;
			context.RobustNameScope.Register("DockToggle", control);
			button2.Text = (string)new LocExtension("shuttle-console-dock-toggle").ProvideValue();
			button2.TextAlign = 1;
			button2.ToggleMode = true;
			control = button2;
			boxContainer6.XamlChildren.Add(control);
			Button button3 = new Button();
			button3.Name = "UndockButton";
			control = button3;
			context.RobustNameScope.Register("UndockButton", control);
			button3.Text = (string)new LocExtension("shuttle-console-undock").ProvideValue();
			button3.TextAlign = 1;
			button3.Disabled = true;
			control = button3;
			boxContainer6.XamlChildren.Add(control);
			control = boxContainer6;
			gridContainer.XamlChildren.Add(control);
			control = gridContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x060008F6 RID: 2294 RVA: 0x00035520 File Offset: 0x00033720
		private static void !XamlIlPopulateTrampoline(ShuttleConsoleWindow A_0)
		{
			ShuttleConsoleWindow.Populate:Content.Client.Shuttles.UI.ShuttleConsoleWindow.xaml(null, A_0);
		}

		// Token: 0x04000479 RID: 1145
		[Nullable(1)]
		private readonly IEntityManager _entManager;

		// Token: 0x0400047A RID: 1146
		[Nullable(1)]
		private readonly IGameTiming _timing;

		// Token: 0x0400047B RID: 1147
		private EntityUid? _shuttleUid;

		// Token: 0x0400047C RID: 1148
		[Nullable(2)]
		private BaseButton _selectedDock;

		// Token: 0x0400047D RID: 1149
		[Nullable(1)]
		private readonly Dictionary<EntityUid, List<DockingInterfaceState>> _docks = new Dictionary<EntityUid, List<DockingInterfaceState>>();

		// Token: 0x0400047E RID: 1150
		[Nullable(1)]
		private readonly Dictionary<BaseButton, EntityUid> _destinations = new Dictionary<BaseButton, EntityUid>();

		// Token: 0x0400047F RID: 1151
		public TimeSpan FTLTime;

		// Token: 0x04000480 RID: 1152
		[Nullable(2)]
		public Action<EntityUid> UndockPressed;

		// Token: 0x04000481 RID: 1153
		[Nullable(2)]
		public Action<EntityUid> StartAutodockPressed;

		// Token: 0x04000482 RID: 1154
		[Nullable(2)]
		public Action<EntityUid> StopAutodockPressed;

		// Token: 0x04000483 RID: 1155
		[Nullable(2)]
		public Action<EntityUid> DestinationPressed;
	}
}
