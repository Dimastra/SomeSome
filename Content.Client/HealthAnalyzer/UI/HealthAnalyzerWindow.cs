using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;
using CompiledRobustXaml;
using Content.Shared.Damage;
using Content.Shared.Damage.Prototypes;
using Content.Shared.Disease.Components;
using Content.Shared.FixedPoint;
using Content.Shared.IdentityManagement;
using Content.Shared.MedicalScanner;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;
using Robust.Shared.Prototypes;

namespace Content.Client.HealthAnalyzer.UI
{
	// Token: 0x020002DA RID: 730
	[GenerateTypedNameReferences]
	public sealed class HealthAnalyzerWindow : DefaultWindow
	{
		// Token: 0x0600126F RID: 4719 RVA: 0x0006DE31 File Offset: 0x0006C031
		public HealthAnalyzerWindow()
		{
			HealthAnalyzerWindow.!XamlIlPopulateTrampoline(this);
		}

		// Token: 0x06001270 RID: 4720 RVA: 0x0006DE40 File Offset: 0x0006C040
		[NullableContext(1)]
		public void Populate(SharedHealthAnalyzerComponent.HealthAnalyzerScannedUserMessage msg)
		{
			StringBuilder stringBuilder = new StringBuilder();
			IEntityManager entityManager = IoCManager.Resolve<IEntityManager>();
			DamageableComponent damageableComponent;
			if (msg.TargetEntity != null && entityManager.TryGetComponent<DamageableComponent>(msg.TargetEntity, ref damageableComponent))
			{
				string item = "Unknown";
				MetaDataComponent metaDataComponent;
				if (msg.TargetEntity != null && entityManager.TryGetComponent<MetaDataComponent>(msg.TargetEntity.Value, ref metaDataComponent))
				{
					item = Identity.Name(msg.TargetEntity.Value, entityManager, null);
				}
				IReadOnlyDictionary<string, FixedPoint2> damagePerGroup = damageableComponent.DamagePerGroup;
				IReadOnlyDictionary<string, FixedPoint2> damageDict = damageableComponent.Damage.DamageDict;
				StringBuilder stringBuilder2 = stringBuilder;
				StringBuilder stringBuilder3 = stringBuilder2;
				StringBuilder.AppendInterpolatedStringHandler appendInterpolatedStringHandler = new StringBuilder.AppendInterpolatedStringHandler(1, 1, stringBuilder2);
				appendInterpolatedStringHandler.AppendFormatted(Loc.GetString("health-analyzer-window-entity-health-text", new ValueTuple<string, object>[]
				{
					new ValueTuple<string, object>("entityName", item)
				}));
				appendInterpolatedStringHandler.AppendLiteral("\n");
				stringBuilder3.Append(ref appendInterpolatedStringHandler);
				if (entityManager.HasComponent<DiseasedComponent>(msg.TargetEntity))
				{
					stringBuilder2 = stringBuilder;
					StringBuilder stringBuilder4 = stringBuilder2;
					appendInterpolatedStringHandler = new StringBuilder.AppendInterpolatedStringHandler(1, 1, stringBuilder2);
					appendInterpolatedStringHandler.AppendFormatted(Loc.GetString("disease-scanner-diseased"));
					appendInterpolatedStringHandler.AppendLiteral("\n");
					stringBuilder4.Append(ref appendInterpolatedStringHandler);
				}
				else
				{
					stringBuilder2 = stringBuilder;
					StringBuilder stringBuilder5 = stringBuilder2;
					appendInterpolatedStringHandler = new StringBuilder.AppendInterpolatedStringHandler(1, 1, stringBuilder2);
					appendInterpolatedStringHandler.AppendFormatted(Loc.GetString("disease-scanner-not-diseased"));
					appendInterpolatedStringHandler.AppendLiteral("\n");
					stringBuilder5.Append(ref appendInterpolatedStringHandler);
				}
				stringBuilder2 = stringBuilder;
				StringBuilder stringBuilder6 = stringBuilder2;
				appendInterpolatedStringHandler = new StringBuilder.AppendInterpolatedStringHandler(2, 1, stringBuilder2);
				appendInterpolatedStringHandler.AppendLiteral("\n");
				appendInterpolatedStringHandler.AppendFormatted(Loc.GetString("health-analyzer-window-entity-damage-total-text", new ValueTuple<string, object>[]
				{
					new ValueTuple<string, object>("amount", damageableComponent.TotalDamage)
				}));
				appendInterpolatedStringHandler.AppendLiteral("\n");
				stringBuilder6.Append(ref appendInterpolatedStringHandler);
				HashSet<string> hashSet = new HashSet<string>();
				IPrototypeManager prototypeManager = IoCManager.Resolve<IPrototypeManager>();
				foreach (KeyValuePair<string, FixedPoint2> keyValuePair in damagePerGroup)
				{
					string text;
					FixedPoint2 fixedPoint;
					keyValuePair.Deconstruct(out text, out fixedPoint);
					string text2 = text;
					FixedPoint2 fixedPoint2 = fixedPoint;
					stringBuilder2 = stringBuilder;
					StringBuilder stringBuilder7 = stringBuilder2;
					appendInterpolatedStringHandler = new StringBuilder.AppendInterpolatedStringHandler(1, 1, stringBuilder2);
					appendInterpolatedStringHandler.AppendLiteral("\n");
					appendInterpolatedStringHandler.AppendFormatted(Loc.GetString("health-analyzer-window-damage-group-text", new ValueTuple<string, object>[]
					{
						new ValueTuple<string, object>("damageGroup", Loc.GetString("health-analyzer-window-damage-group-" + text2)),
						new ValueTuple<string, object>("amount", fixedPoint2)
					}));
					stringBuilder7.Append(ref appendInterpolatedStringHandler);
					foreach (string text3 in prototypeManager.Index<DamageGroupPrototype>(text2).DamageTypes)
					{
						FixedPoint2 fixedPoint3;
						if (damageDict.TryGetValue(text3, out fixedPoint3) && !hashSet.Contains(text3))
						{
							hashSet.Add(text3);
							stringBuilder2 = stringBuilder;
							StringBuilder stringBuilder8 = stringBuilder2;
							appendInterpolatedStringHandler = new StringBuilder.AppendInterpolatedStringHandler(3, 1, stringBuilder2);
							appendInterpolatedStringHandler.AppendLiteral("\n- ");
							appendInterpolatedStringHandler.AppendFormatted(Loc.GetString("health-analyzer-window-damage-type-text", new ValueTuple<string, object>[]
							{
								new ValueTuple<string, object>("damageType", Loc.GetString("health-analyzer-window-damage-type-" + text3)),
								new ValueTuple<string, object>("amount", fixedPoint3)
							}));
							stringBuilder8.Append(ref appendInterpolatedStringHandler);
						}
					}
					stringBuilder.AppendLine();
				}
				this.Diagnostics.Text = stringBuilder.ToString();
				base.SetSize = new ValueTuple<float, float>(250f, 600f);
				return;
			}
			this.Diagnostics.Text = Loc.GetString("health-analyzer-window-no-patient-data-text");
			base.SetSize = new ValueTuple<float, float>(250f, 100f);
		}

		// Token: 0x170003EF RID: 1007
		// (get) Token: 0x06001271 RID: 4721 RVA: 0x0006E238 File Offset: 0x0006C438
		private Label Diagnostics
		{
			get
			{
				return base.FindControl<Label>("Diagnostics");
			}
		}

		// Token: 0x06001272 RID: 4722 RVA: 0x0006E248 File Offset: 0x0006C448
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.HealthAnalyzer.UI.HealthAnalyzerWindow.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.MinSize = new Vector2(250f, 100f);
			A_1.SetSize = new Vector2(250f, 100f);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			Label label = new Label();
			label.Name = "Diagnostics";
			Control control = label;
			context.RobustNameScope.Register("Diagnostics", control);
			label.Text = (string)new LocExtension("health-analyzer-window-no-patient-data-text").ProvideValue();
			control = label;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06001273 RID: 4723 RVA: 0x0006E368 File Offset: 0x0006C568
		private static void !XamlIlPopulateTrampoline(HealthAnalyzerWindow A_0)
		{
			HealthAnalyzerWindow.Populate:Content.Client.HealthAnalyzer.UI.HealthAnalyzerWindow.xaml(null, A_0);
		}
	}
}
