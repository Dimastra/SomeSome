using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using CompiledRobustXaml;
using Content.Client.UserInterface.Controls;
using Content.Shared.CCVar;
using Content.Shared.CrewManifest;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.Utility;
using Robust.Shared.Configuration;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.CrewManifest
{
	// Token: 0x0200036E RID: 878
	[GenerateTypedNameReferences]
	public sealed class CrewManifestUi : DefaultWindow
	{
		// Token: 0x0600159F RID: 5535 RVA: 0x0007FF37 File Offset: 0x0007E137
		public CrewManifestUi()
		{
			CrewManifestUi.!XamlIlPopulateTrampoline(this);
			IoCManager.InjectDependencies<CrewManifestUi>(this);
			this._crewManifestSystem = this._entitySystemManager.GetEntitySystem<CrewManifestSystem>();
			this.StationName.AddStyleClass("LabelBig");
		}

		// Token: 0x060015A0 RID: 5536 RVA: 0x0007FF70 File Offset: 0x0007E170
		[NullableContext(1)]
		public void Populate(string name, [Nullable(2)] CrewManifestEntries entries)
		{
			this.CrewManifestListing.DisposeAllChildren();
			this.CrewManifestListing.RemoveAllChildren();
			this.StationNameContainer.Visible = (entries != null);
			this.StationName.Text = name;
			if (entries == null)
			{
				return;
			}
			foreach (ValueTuple<string, List<CrewManifestEntry>> valueTuple in this.SortEntries(entries))
			{
				this.CrewManifestListing.AddChild(new CrewManifestUi.CrewManifestSection(valueTuple.Item1, valueTuple.Item2, this._resourceCache, this._crewManifestSystem));
			}
		}

		// Token: 0x060015A1 RID: 5537 RVA: 0x0008001C File Offset: 0x0007E21C
		[NullableContext(1)]
		[return: TupleElementNames(new string[]
		{
			"section",
			"entries"
		})]
		[return: Nullable(new byte[]
		{
			1,
			0,
			1,
			1,
			1
		})]
		private List<ValueTuple<string, List<CrewManifestEntry>>> SortEntries(CrewManifestEntries entries)
		{
			Dictionary<string, List<CrewManifestEntry>> dictionary = new Dictionary<string, List<CrewManifestEntry>>();
			foreach (CrewManifestEntry crewManifestEntry in entries.Entries)
			{
				foreach (DepartmentPrototype departmentPrototype in this._prototypeManager.EnumeratePrototypes<DepartmentPrototype>())
				{
					if (departmentPrototype.Roles.Contains(crewManifestEntry.JobPrototype))
					{
						Extensions.GetOrNew<string, List<CrewManifestEntry>>(dictionary, departmentPrototype.ID).Add(crewManifestEntry);
					}
				}
			}
			List<ValueTuple<string, List<CrewManifestEntry>>> list = new List<ValueTuple<string, List<CrewManifestEntry>>>();
			foreach (KeyValuePair<string, List<CrewManifestEntry>> keyValuePair in dictionary)
			{
				string text;
				List<CrewManifestEntry> list2;
				keyValuePair.Deconstruct(out text, out list2);
				string item = text;
				List<CrewManifestEntry> item2 = list2;
				list.Add(new ValueTuple<string, List<CrewManifestEntry>>(item, item2));
			}
			List<string> sortOrder = this._configManager.GetCVar<string>(CCVars.CrewManifestOrdering).Split(",", StringSplitOptions.None).ToList<string>();
			list.Sort(delegate([TupleElementNames(new string[]
			{
				"section",
				"entries"
			})] [Nullable(new byte[]
			{
				0,
				1,
				1,
				1
			})] ValueTuple<string, List<CrewManifestEntry>> a, [TupleElementNames(new string[]
			{
				"section",
				"entries"
			})] [Nullable(new byte[]
			{
				0,
				1,
				1,
				1
			})] ValueTuple<string, List<CrewManifestEntry>> b)
			{
				int num = sortOrder.IndexOf(a.Item1);
				int num2 = sortOrder.IndexOf(b.Item1);
				if (num == num2)
				{
					return 0;
				}
				if (num == -1)
				{
					return -1;
				}
				if (num2 == -1)
				{
					return 1;
				}
				return num.CompareTo(num2);
			});
			return list;
		}

		// Token: 0x17000459 RID: 1113
		// (get) Token: 0x060015A2 RID: 5538 RVA: 0x00080178 File Offset: 0x0007E378
		private StripeBack StationNameContainer
		{
			get
			{
				return base.FindControl<StripeBack>("StationNameContainer");
			}
		}

		// Token: 0x1700045A RID: 1114
		// (get) Token: 0x060015A3 RID: 5539 RVA: 0x00080185 File Offset: 0x0007E385
		private Label StationName
		{
			get
			{
				return base.FindControl<Label>("StationName");
			}
		}

		// Token: 0x1700045B RID: 1115
		// (get) Token: 0x060015A4 RID: 5540 RVA: 0x00080192 File Offset: 0x0007E392
		private BoxContainer CrewManifestListing
		{
			get
			{
				return base.FindControl<BoxContainer>("CrewManifestListing");
			}
		}

		// Token: 0x060015A5 RID: 5541 RVA: 0x000801A0 File Offset: 0x0007E3A0
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.CrewManifest.CrewManifestUi.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Title = (string)new LocExtension("crew-manifest-window-title").ProvideValue();
			A_1.SetSize = new Vector2(450f, 750f);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			boxContainer.VerticalExpand = true;
			boxContainer.HorizontalExpand = true;
			StripeBack stripeBack = new StripeBack();
			stripeBack.Name = "StationNameContainer";
			Control control = stripeBack;
			context.RobustNameScope.Register("StationNameContainer", control);
			PanelContainer panelContainer = new PanelContainer();
			Label label = new Label();
			label.Name = "StationName";
			control = label;
			context.RobustNameScope.Register("StationName", control);
			label.Align = 1;
			control = label;
			panelContainer.XamlChildren.Add(control);
			control = panelContainer;
			stripeBack.XamlChildren.Add(control);
			control = stripeBack;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.HorizontalExpand = true;
			boxContainer2.VerticalExpand = true;
			ScrollContainer scrollContainer = new ScrollContainer();
			scrollContainer.HorizontalExpand = true;
			scrollContainer.VerticalExpand = true;
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Name = "CrewManifestListing";
			control = boxContainer3;
			context.RobustNameScope.Register("CrewManifestListing", control);
			boxContainer3.Orientation = 1;
			boxContainer3.HorizontalExpand = true;
			control = new Label
			{
				Text = (string)new LocExtension("crew-manifest-no-valid-station").ProvideValue(),
				HorizontalExpand = true
			};
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			scrollContainer.XamlChildren.Add(control);
			control = scrollContainer;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x060015A6 RID: 5542 RVA: 0x00080413 File Offset: 0x0007E613
		private static void !XamlIlPopulateTrampoline(CrewManifestUi A_0)
		{
			CrewManifestUi.Populate:Content.Client.CrewManifest.CrewManifestUi.xaml(null, A_0);
		}

		// Token: 0x04000B4D RID: 2893
		[Nullable(1)]
		[Dependency]
		private readonly IPrototypeManager _prototypeManager;

		// Token: 0x04000B4E RID: 2894
		[Nullable(1)]
		[Dependency]
		private readonly IResourceCache _resourceCache;

		// Token: 0x04000B4F RID: 2895
		[Nullable(1)]
		[Dependency]
		private readonly IEntitySystemManager _entitySystemManager;

		// Token: 0x04000B50 RID: 2896
		[Nullable(1)]
		[Dependency]
		private readonly IConfigurationManager _configManager;

		// Token: 0x04000B51 RID: 2897
		[Nullable(1)]
		private readonly CrewManifestSystem _crewManifestSystem;

		// Token: 0x0200036F RID: 879
		private sealed class CrewManifestSection : BoxContainer
		{
			// Token: 0x060015A7 RID: 5543 RVA: 0x0008041C File Offset: 0x0007E61C
			[NullableContext(1)]
			public CrewManifestSection(string sectionTitle, List<CrewManifestEntry> entries, IResourceCache cache, CrewManifestSystem crewManifestSystem)
			{
				base.Orientation = 1;
				base.HorizontalExpand = true;
				string text;
				if (Loc.TryGetString("department-" + sectionTitle, ref text))
				{
					sectionTitle = text;
				}
				base.AddChild(new Label
				{
					StyleClasses = 
					{
						"LabelBig"
					},
					Text = Loc.GetString(sectionTitle)
				});
				GridContainer gridContainer = new GridContainer
				{
					HorizontalExpand = true,
					Columns = 2
				};
				base.AddChild(gridContainer);
				ResourcePath resourcePath = new ResourcePath("/Textures/Interface/Misc/job_icons.rsi", "/");
				RSIResource rsiresource;
				cache.TryGetResource<RSIResource>(resourcePath, ref rsiresource);
				foreach (CrewManifestEntry crewManifestEntry in entries)
				{
					RichTextLabel richTextLabel = new RichTextLabel
					{
						HorizontalExpand = true
					};
					richTextLabel.SetMessage(crewManifestEntry.Name);
					BoxContainer boxContainer = new BoxContainer
					{
						Orientation = 0,
						HorizontalExpand = true
					};
					RichTextLabel richTextLabel2 = new RichTextLabel();
					richTextLabel2.SetMessage(crewManifestEntry.JobTitle);
					if (rsiresource != null)
					{
						TextureRect textureRect = new TextureRect
						{
							TextureScale = new ValueTuple<float, float>(2f, 2f),
							Stretch = 4
						};
						RSI.State state;
						if (rsiresource.RSI.TryGetState(crewManifestEntry.JobIcon, ref state))
						{
							SpriteSpecifier.Rsi rsi = new SpriteSpecifier.Rsi(resourcePath, crewManifestEntry.JobIcon);
							textureRect.Texture = SpriteSpecifierExt.Frame0(rsi);
						}
						else if (rsiresource.RSI.TryGetState("Unknown", ref state))
						{
							SpriteSpecifier.Rsi rsi2 = new SpriteSpecifier.Rsi(resourcePath, "Unknown");
							textureRect.Texture = SpriteSpecifierExt.Frame0(rsi2);
						}
						boxContainer.AddChild(textureRect);
						boxContainer.AddChild(richTextLabel2);
					}
					else
					{
						boxContainer.AddChild(richTextLabel2);
					}
					gridContainer.AddChild(richTextLabel);
					gridContainer.AddChild(boxContainer);
				}
			}
		}
	}
}
