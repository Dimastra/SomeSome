using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;
using CompiledRobustXaml;
using Content.Shared.Lathe;
using Content.Shared.Materials;
using Content.Shared.Research.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;
using Robust.Shared.Prototypes;

namespace Content.Client.Lathe.UI
{
	// Token: 0x02000280 RID: 640
	[GenerateTypedNameReferences]
	public sealed class LatheMenu : DefaultWindow
	{
		// Token: 0x1400005B RID: 91
		// (add) Token: 0x06001052 RID: 4178 RVA: 0x00061578 File Offset: 0x0005F778
		// (remove) Token: 0x06001053 RID: 4179 RVA: 0x000615B0 File Offset: 0x0005F7B0
		[Nullable(new byte[]
		{
			2,
			1
		})]
		[Nullable(new byte[]
		{
			2,
			1
		})]
		public event Action<BaseButton.ButtonEventArgs> OnQueueButtonPressed;

		// Token: 0x1400005C RID: 92
		// (add) Token: 0x06001054 RID: 4180 RVA: 0x000615E8 File Offset: 0x0005F7E8
		// (remove) Token: 0x06001055 RID: 4181 RVA: 0x00061620 File Offset: 0x0005F820
		[Nullable(new byte[]
		{
			2,
			1
		})]
		[Nullable(new byte[]
		{
			2,
			1
		})]
		public event Action<BaseButton.ButtonEventArgs> OnServerListButtonPressed;

		// Token: 0x1400005D RID: 93
		// (add) Token: 0x06001056 RID: 4182 RVA: 0x00061658 File Offset: 0x0005F858
		// (remove) Token: 0x06001057 RID: 4183 RVA: 0x00061690 File Offset: 0x0005F890
		[Nullable(new byte[]
		{
			2,
			1
		})]
		[Nullable(new byte[]
		{
			2,
			1
		})]
		public event Action<BaseButton.ButtonEventArgs> OnServerSyncButtonPressed;

		// Token: 0x1400005E RID: 94
		// (add) Token: 0x06001058 RID: 4184 RVA: 0x000616C8 File Offset: 0x0005F8C8
		// (remove) Token: 0x06001059 RID: 4185 RVA: 0x00061700 File Offset: 0x0005F900
		[Nullable(new byte[]
		{
			2,
			1
		})]
		[Nullable(new byte[]
		{
			2,
			1
		})]
		public event Action<string, int> RecipeQueueAction;

		// Token: 0x0600105A RID: 4186 RVA: 0x00061738 File Offset: 0x0005F938
		[NullableContext(1)]
		public LatheMenu(LatheBoundUserInterface owner)
		{
			LatheMenu <>4__this = this;
			LatheMenu.!XamlIlPopulateTrampoline(this);
			IoCManager.InjectDependencies<LatheMenu>(this);
			this._spriteSystem = this._entityManager.EntitySysManager.GetEntitySystem<SpriteSystem>();
			this._lathe = this._entityManager.EntitySysManager.GetEntitySystem<LatheSystem>();
			base.Title = this._entityManager.GetComponent<MetaDataComponent>(owner.Lathe).EntityName;
			this.SearchBar.OnTextChanged += delegate(LineEdit.LineEditEventArgs _)
			{
				<>4__this.PopulateRecipes(owner.Lathe);
			};
			this.AmountLineEdit.OnTextChanged += delegate(LineEdit.LineEditEventArgs _)
			{
				<>4__this.PopulateRecipes(owner.Lathe);
			};
			this.QueueButton.OnPressed += delegate(BaseButton.ButtonEventArgs a)
			{
				Action<BaseButton.ButtonEventArgs> onQueueButtonPressed = <>4__this.OnQueueButtonPressed;
				if (onQueueButtonPressed == null)
				{
					return;
				}
				onQueueButtonPressed(a);
			};
			this.ServerListButton.OnPressed += delegate(BaseButton.ButtonEventArgs a)
			{
				Action<BaseButton.ButtonEventArgs> onServerListButtonPressed = <>4__this.OnServerListButtonPressed;
				if (onServerListButtonPressed == null)
				{
					return;
				}
				onServerListButtonPressed(a);
			};
			this.ServerSyncButton.OnPressed += delegate(BaseButton.ButtonEventArgs a)
			{
				Action<BaseButton.ButtonEventArgs> onServerSyncButtonPressed = <>4__this.OnServerSyncButtonPressed;
				if (onServerSyncButtonPressed == null)
				{
					return;
				}
				onServerSyncButtonPressed(a);
			};
			LatheComponent latheComponent;
			if (this._entityManager.TryGetComponent<LatheComponent>(owner.Lathe, ref latheComponent) && latheComponent.DynamicRecipes == null)
			{
				this.ServerListButton.Visible = false;
				this.ServerSyncButton.Visible = false;
			}
		}

		// Token: 0x0600105B RID: 4187 RVA: 0x00061874 File Offset: 0x0005FA74
		public void PopulateMaterials(EntityUid lathe)
		{
			MaterialStorageComponent materialStorageComponent;
			if (!this._entityManager.TryGetComponent<MaterialStorageComponent>(lathe, ref materialStorageComponent))
			{
				return;
			}
			this.Materials.Clear();
			foreach (KeyValuePair<string, int> keyValuePair in materialStorageComponent.Storage)
			{
				string text;
				int num;
				keyValuePair.Deconstruct(out text, out num);
				string text2 = text;
				int num2 = num;
				MaterialPrototype materialPrototype;
				if (this._prototypeManager.TryIndex<MaterialPrototype>(text2, ref materialPrototype))
				{
					string @string = Loc.GetString(materialPrototype.Name);
					string string2 = Loc.GetString("lathe-menu-material-display", new ValueTuple<string, object>[]
					{
						new ValueTuple<string, object>("material", @string),
						new ValueTuple<string, object>("amount", num2)
					});
					this.Materials.AddItem(string2, this._spriteSystem.Frame0(materialPrototype.Icon), false);
				}
			}
			if (this.Materials.Count == 0)
			{
				string string3 = Loc.GetString("lathe-menu-no-materials-message");
				this.Materials.AddItem(string3, null, false);
			}
			this.PopulateRecipes(lathe);
		}

		// Token: 0x0600105C RID: 4188 RVA: 0x000619A0 File Offset: 0x0005FBA0
		public void PopulateRecipes(EntityUid lathe)
		{
			LatheComponent latheComponent;
			if (!this._entityManager.TryGetComponent<LatheComponent>(lathe, ref latheComponent))
			{
				return;
			}
			List<LatheRecipePrototype> list = new List<LatheRecipePrototype>();
			foreach (string text in this.Recipes)
			{
				LatheRecipePrototype latheRecipePrototype;
				if (this._prototypeManager.TryIndex<LatheRecipePrototype>(text, ref latheRecipePrototype))
				{
					if (this.SearchBar.Text.Trim().Length != 0)
					{
						if (latheRecipePrototype.Name.ToLowerInvariant().Contains(this.SearchBar.Text.Trim().ToLowerInvariant()))
						{
							list.Add(latheRecipePrototype);
						}
					}
					else
					{
						list.Add(latheRecipePrototype);
					}
				}
			}
			int num;
			if (!int.TryParse(this.AmountLineEdit.Text, out num) || num <= 0)
			{
				num = 1;
			}
			this.RecipeList.Children.Clear();
			foreach (LatheRecipePrototype latheRecipePrototype2 in list)
			{
				StringBuilder stringBuilder = new StringBuilder();
				bool flag = true;
				foreach (KeyValuePair<string, int> keyValuePair in latheRecipePrototype2.RequiredMaterials)
				{
					string text2;
					int num2;
					keyValuePair.Deconstruct(out text2, out num2);
					string text3 = text2;
					int original = num2;
					MaterialPrototype materialPrototype;
					if (this._prototypeManager.TryIndex<MaterialPrototype>(text3, ref materialPrototype))
					{
						if (flag)
						{
							flag = false;
						}
						else
						{
							stringBuilder.Append('\n');
						}
						int value = SharedLatheSystem.AdjustMaterial(original, latheRecipePrototype2.ApplyMaterialDiscount, latheComponent.MaterialUseMultiplier);
						stringBuilder.Append(value);
						stringBuilder.Append(' ');
						stringBuilder.Append(Loc.GetString(materialPrototype.Name));
					}
				}
				Texture texture = (latheRecipePrototype2.Icon == null) ? this._spriteSystem.GetPrototypeIcon(latheRecipePrototype2.Result).Default : this._spriteSystem.Frame0(latheRecipePrototype2.Icon);
				bool canProduce = this._lathe.CanProduce(lathe, latheRecipePrototype2, num, null);
				RecipeControl recipeControl = new RecipeControl(latheRecipePrototype2, stringBuilder.ToString(), canProduce, texture);
				RecipeControl recipeControl2 = recipeControl;
				recipeControl2.OnButtonPressed = (Action<string>)Delegate.Combine(recipeControl2.OnButtonPressed, new Action<string>(delegate(string s)
				{
					int num3;
					if (!int.TryParse(this.AmountLineEdit.Text, out num3) || num3 <= 0)
					{
						num3 = 1;
					}
					Action<string, int> recipeQueueAction = this.RecipeQueueAction;
					if (recipeQueueAction == null)
					{
						return;
					}
					recipeQueueAction(s, num3);
				}));
				this.RecipeList.AddChild(recipeControl);
			}
		}

		// Token: 0x17000381 RID: 897
		// (get) Token: 0x0600105D RID: 4189 RVA: 0x00061C40 File Offset: 0x0005FE40
		private Button QueueButton
		{
			get
			{
				return base.FindControl<Button>("QueueButton");
			}
		}

		// Token: 0x17000382 RID: 898
		// (get) Token: 0x0600105E RID: 4190 RVA: 0x00061C4D File Offset: 0x0005FE4D
		private Button ServerListButton
		{
			get
			{
				return base.FindControl<Button>("ServerListButton");
			}
		}

		// Token: 0x17000383 RID: 899
		// (get) Token: 0x0600105F RID: 4191 RVA: 0x000384A2 File Offset: 0x000366A2
		private Button ServerSyncButton
		{
			get
			{
				return base.FindControl<Button>("ServerSyncButton");
			}
		}

		// Token: 0x17000384 RID: 900
		// (get) Token: 0x06001060 RID: 4192 RVA: 0x0001E1C9 File Offset: 0x0001C3C9
		private LineEdit SearchBar
		{
			get
			{
				return base.FindControl<LineEdit>("SearchBar");
			}
		}

		// Token: 0x17000385 RID: 901
		// (get) Token: 0x06001061 RID: 4193 RVA: 0x00061C5A File Offset: 0x0005FE5A
		private Button FilterButton
		{
			get
			{
				return base.FindControl<Button>("FilterButton");
			}
		}

		// Token: 0x17000386 RID: 902
		// (get) Token: 0x06001062 RID: 4194 RVA: 0x00061C67 File Offset: 0x0005FE67
		private BoxContainer RecipeList
		{
			get
			{
				return base.FindControl<BoxContainer>("RecipeList");
			}
		}

		// Token: 0x17000387 RID: 903
		// (get) Token: 0x06001063 RID: 4195 RVA: 0x00061C74 File Offset: 0x0005FE74
		private LineEdit AmountLineEdit
		{
			get
			{
				return base.FindControl<LineEdit>("AmountLineEdit");
			}
		}

		// Token: 0x17000388 RID: 904
		// (get) Token: 0x06001064 RID: 4196 RVA: 0x00061C81 File Offset: 0x0005FE81
		private ItemList Materials
		{
			get
			{
				return base.FindControl<ItemList>("Materials");
			}
		}

		// Token: 0x06001066 RID: 4198 RVA: 0x00061CCC File Offset: 0x0005FECC
		static void xaml(IServiceProvider A_0, DefaultWindow A_1)
		{
			XamlIlContext.Context<DefaultWindow> context = new XamlIlContext.Context<DefaultWindow>(A_0, null, "resm:Content.Client.Lathe.UI.LatheMenu.xaml?assembly=Content.Client");
			context.RootObject = A_1;
			context.IntermediateRoot = A_1;
			A_1.Title = (string)new LocExtension("lathe-menu-title").ProvideValue();
			A_1.MinSize = new Vector2(300f, 450f);
			A_1.SetSize = new Vector2(300f, 450f);
			BoxContainer boxContainer = new BoxContainer();
			boxContainer.Orientation = 1;
			boxContainer.VerticalExpand = true;
			boxContainer.SeparationOverride = new int?(5);
			BoxContainer boxContainer2 = new BoxContainer();
			boxContainer2.Orientation = 0;
			boxContainer2.Align = 2;
			boxContainer2.HorizontalExpand = true;
			boxContainer2.VerticalExpand = true;
			boxContainer2.SizeFlagsStretchRatio = 1f;
			Button button = new Button();
			button.Name = "QueueButton";
			Control control = button;
			context.RobustNameScope.Register("QueueButton", control);
			button.Text = (string)new LocExtension("lathe-menu-queue").ProvideValue();
			button.TextAlign = 1;
			button.Mode = 0;
			button.SizeFlagsStretchRatio = 1f;
			control = button;
			boxContainer2.XamlChildren.Add(control);
			Button button2 = new Button();
			button2.Name = "ServerListButton";
			control = button2;
			context.RobustNameScope.Register("ServerListButton", control);
			button2.Text = (string)new LocExtension("lathe-menu-server-list").ProvideValue();
			button2.TextAlign = 1;
			button2.Mode = 0;
			button2.SizeFlagsStretchRatio = 1f;
			control = button2;
			boxContainer2.XamlChildren.Add(control);
			Button button3 = new Button();
			button3.Name = "ServerSyncButton";
			control = button3;
			context.RobustNameScope.Register("ServerSyncButton", control);
			button3.Text = (string)new LocExtension("lathe-menu-sync").ProvideValue();
			button3.TextAlign = 1;
			button3.Mode = 0;
			button3.SizeFlagsStretchRatio = 1f;
			control = button3;
			boxContainer2.XamlChildren.Add(control);
			control = boxContainer2;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer3 = new BoxContainer();
			boxContainer3.Orientation = 0;
			boxContainer3.HorizontalExpand = true;
			boxContainer3.VerticalExpand = true;
			boxContainer3.SizeFlagsStretchRatio = 1f;
			LineEdit lineEdit = new LineEdit();
			lineEdit.Name = "SearchBar";
			control = lineEdit;
			context.RobustNameScope.Register("SearchBar", control);
			lineEdit.PlaceHolder = (string)new LocExtension("lathe-menu-search-designs").ProvideValue();
			lineEdit.HorizontalExpand = true;
			lineEdit.SizeFlagsStretchRatio = 1f;
			control = lineEdit;
			boxContainer3.XamlChildren.Add(control);
			Button button4 = new Button();
			button4.Name = "FilterButton";
			control = button4;
			context.RobustNameScope.Register("FilterButton", control);
			button4.Text = (string)new LocExtension("lathe-menu-search-filter").ProvideValue();
			button4.TextAlign = 1;
			button4.SizeFlagsStretchRatio = 1f;
			button4.Disabled = true;
			control = button4;
			boxContainer3.XamlChildren.Add(control);
			control = boxContainer3;
			boxContainer.XamlChildren.Add(control);
			ScrollContainer scrollContainer = new ScrollContainer();
			scrollContainer.MinHeight = 225f;
			BoxContainer boxContainer4 = new BoxContainer();
			boxContainer4.Name = "RecipeList";
			control = boxContainer4;
			context.RobustNameScope.Register("RecipeList", control);
			boxContainer4.Orientation = 1;
			boxContainer4.SizeFlagsStretchRatio = 8f;
			boxContainer4.HorizontalExpand = true;
			boxContainer4.VerticalExpand = true;
			control = boxContainer4;
			scrollContainer.XamlChildren.Add(control);
			control = scrollContainer;
			boxContainer.XamlChildren.Add(control);
			BoxContainer boxContainer5 = new BoxContainer();
			boxContainer5.Orientation = 0;
			boxContainer5.HorizontalExpand = true;
			boxContainer5.VerticalExpand = true;
			boxContainer5.SizeFlagsStretchRatio = 1f;
			control = new Label
			{
				Margin = new Thickness(8f, 0f, 8f, 0f),
				Text = (string)new LocExtension("lathe-menu-amount").ProvideValue()
			};
			boxContainer5.XamlChildren.Add(control);
			LineEdit lineEdit2 = new LineEdit();
			lineEdit2.Name = "AmountLineEdit";
			control = lineEdit2;
			context.RobustNameScope.Register("AmountLineEdit", control);
			lineEdit2.PlaceHolder = "0";
			lineEdit2.Text = "1";
			lineEdit2.HorizontalExpand = true;
			control = lineEdit2;
			boxContainer5.XamlChildren.Add(control);
			control = boxContainer5;
			boxContainer.XamlChildren.Add(control);
			ItemList itemList = new ItemList();
			itemList.Name = "Materials";
			control = itemList;
			context.RobustNameScope.Register("Materials", control);
			itemList.VerticalExpand = true;
			itemList.SizeFlagsStretchRatio = 3f;
			control = itemList;
			boxContainer.XamlChildren.Add(control);
			control = boxContainer;
			A_1.XamlChildren.Add(control);
			if ((control = (A_1 as Control)) != null)
			{
				context.RobustNameScope.Absorb(control.NameScope);
				control.NameScope = context.RobustNameScope;
			}
			context.RobustNameScope.Complete();
		}

		// Token: 0x06001067 RID: 4199 RVA: 0x00062296 File Offset: 0x00060496
		private static void !XamlIlPopulateTrampoline(LatheMenu A_0)
		{
			LatheMenu.Populate:Content.Client.Lathe.UI.LatheMenu.xaml(null, A_0);
		}

		// Token: 0x0400080C RID: 2060
		[Nullable(1)]
		[Dependency]
		private readonly IPrototypeManager _prototypeManager;

		// Token: 0x0400080D RID: 2061
		[Nullable(1)]
		[Dependency]
		private readonly IEntityManager _entityManager;

		// Token: 0x0400080E RID: 2062
		[Nullable(1)]
		private readonly SpriteSystem _spriteSystem;

		// Token: 0x0400080F RID: 2063
		[Nullable(1)]
		private readonly LatheSystem _lathe;

		// Token: 0x04000814 RID: 2068
		[Nullable(1)]
		public List<string> Recipes = new List<string>();
	}
}
